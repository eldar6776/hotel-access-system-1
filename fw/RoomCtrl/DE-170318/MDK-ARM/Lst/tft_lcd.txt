; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-170318\tft_lcd.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-170318\tft_lcd.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I.\RTE\_DE-170318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-170318\tft_lcd.crf ..\Src\tft_lcd.c]
                          THUMB

                          AREA ||i.LCD_AddressSet||, CODE, READONLY, ALIGN=1

                  LCD_AddressSet PROC
;;;213    
;;;214    void LCD_AddressSet(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;215    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;216        LCD_WriteRegister(ILI9341_COLUMN_ADDRESS_SET);
00000c  202a              MOVS     r0,#0x2a
00000e  f7fffffe          BL       LCD_WriteRegister
;;;217        LCD_WriteInt(x1);
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       LCD_WriteInt
;;;218        LCD_WriteInt(x2);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       LCD_WriteInt
;;;219        LCD_WriteRegister(ILI9341_PAGE_ADDRESS_SET);
00001e  202b              MOVS     r0,#0x2b
000020  f7fffffe          BL       LCD_WriteRegister
;;;220        LCD_WriteInt(y1);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       LCD_WriteInt
;;;221        LCD_WriteInt(y2);
00002a  4630              MOV      r0,r6
00002c  e8bd41f0          POP      {r4-r8,lr}
000030  f7ffbffe          B.W      LCD_WriteInt
;;;222    }
;;;223    
                          ENDP


                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=2

                  LCD_Clear PROC
;;;165    
;;;166    void LCD_Clear(uint16_t color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;167    {
000004  f5ad7d20          SUB      sp,sp,#0x280
000008  4607              MOV      r7,r0
;;;168    	uint32_t i = 640U;
00000a  f44f7520          MOV      r5,#0x280
00000e  462c              MOV      r4,r5
;;;169        uint8_t dsp_buff[640];
;;;170    
;;;171        LCD_AddressSet(0U, 0U, LCD_W - 1U, LCD_H - 1U);
000010  2100              MOVS     r1,#0
000012  23ef              MOVS     r3,#0xef
000014  f240123f          MOV      r2,#0x13f
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       LCD_AddressSet
;;;172    	LCD_WriteRegister(ILI9341_MEMORY_WRITE);
00001e  202c              MOVS     r0,#0x2c
000020  f7fffffe          BL       LCD_WriteRegister
;;;173        HAL_GPIO_WritePin(DISPLAY_DC_Port, DISPLAY_DC_Pin, GPIO_PIN_SET);
000024  4e18              LDR      r6,|L2.136|
000026  2201              MOVS     r2,#1
000028  0291              LSLS     r1,r2,#10
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       HAL_GPIO_WritePin
000030  4669              MOV      r1,sp                 ;169
;;;174        
;;;175        do
;;;176        {
;;;177            --i;
;;;178            dsp_buff[i] = (color >> 8U);
000032  0a3a              LSRS     r2,r7,#8
;;;179            --i;
;;;180            dsp_buff[i] = (color & 0xFFU);
000034  b2f8              UXTB     r0,r7
                  |L2.54|
000036  1e64              SUBS     r4,r4,#1              ;177
000038  550a              STRB     r2,[r1,r4]            ;178
00003a  1e64              SUBS     r4,r4,#1              ;179
00003c  5508              STRB     r0,[r1,r4]
;;;181        } 
;;;182        while (i != 0U);
00003e  2c00              CMP      r4,#0
000040  d1f9              BNE      |L2.54|
;;;183        
;;;184        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_RESET);
000042  f44f6700          MOV      r7,#0x800
000046  2200              MOVS     r2,#0
000048  4639              MOV      r1,r7
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       HAL_GPIO_WritePin
;;;185        i = LCD_H;
000050  24f0              MOVS     r4,#0xf0
;;;186        
;;;187        do
;;;188        {
;;;189            if (HAL_SPI_Transmit(&hspi2, dsp_buff, 640U, SPI_FLASH_TIMEOUT) != HAL_OK) Error_Handler();
000052  f44f78fa          MOV      r8,#0x1f4
                  |L2.86|
000056  4643              MOV      r3,r8
000058  462a              MOV      r2,r5
00005a  4669              MOV      r1,sp
00005c  480b              LDR      r0,|L2.140|
00005e  f7fffffe          BL       HAL_SPI_Transmit
000062  b108              CBZ      r0,|L2.104|
000064  f7fffffe          BL       Error_Handler
                  |L2.104|
;;;190            --i;
000068  1e64              SUBS     r4,r4,#1
;;;191        }
;;;192        while(i != 0U);
00006a  2c00              CMP      r4,#0
00006c  d1f3              BNE      |L2.86|
;;;193        
;;;194        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
00006e  2201              MOVS     r2,#1
000070  4639              MOV      r1,r7
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       HAL_GPIO_WritePin
;;;195        LCD_WriteRegister(ILI9341_NOP);
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       LCD_WriteRegister
;;;196    }
00007e  f50d7d20          ADD      sp,sp,#0x280
000082  e8bd81f0          POP      {r4-r8,pc}
;;;197    
                          ENDP

000086  0000              DCW      0x0000
                  |L2.136|
                          DCD      0x40010c00
                  |L2.140|
                          DCD      hspi2

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=2

                  LCD_Init PROC
;;;39     /* Program code   ------------------------------------------------------------*/
;;;40     void LCD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;41     {
;;;42     	HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
000002  2201              MOVS     r2,#1
000004  02d1              LSLS     r1,r2,#11
000006  4897              LDR      r0,|L3.612|
000008  f7fffffe          BL       HAL_GPIO_WritePin
;;;43         LCD_RST_SetHigh();
00000c  4c96              LDR      r4,|L3.616|
00000e  7820              LDRB     r0,[r4,#0]  ; hc595_dout
000010  f0400040          ORR      r0,r0,#0x40
000014  7020              STRB     r0,[r4,#0]
;;;44         DIO_SetOuput();
000016  f7fffffe          BL       DIO_SetOuput
;;;45         HAL_Delay(5U);
00001a  2005              MOVS     r0,#5
00001c  f7fffffe          BL       HAL_Delay
;;;46         LCD_RST_SetLow();
000020  7820              LDRB     r0,[r4,#0]  ; hc595_dout
000022  f0200040          BIC      r0,r0,#0x40
000026  7020              STRB     r0,[r4,#0]
;;;47         DIO_SetOuput();
000028  f7fffffe          BL       DIO_SetOuput
;;;48         HAL_Delay(50U);
00002c  2032              MOVS     r0,#0x32
00002e  f7fffffe          BL       HAL_Delay
;;;49         LCD_RST_SetHigh();
000032  7820              LDRB     r0,[r4,#0]  ; hc595_dout
000034  f0400040          ORR      r0,r0,#0x40
000038  7020              STRB     r0,[r4,#0]
;;;50         DIO_SetOuput();
00003a  f7fffffe          BL       DIO_SetOuput
;;;51         HAL_Delay(200U);
00003e  20c8              MOVS     r0,#0xc8
000040  f7fffffe          BL       HAL_Delay
;;;52     
;;;53         LCD_WriteRegister(0xefU);
000044  20ef              MOVS     r0,#0xef
000046  f7fffffe          BL       LCD_WriteRegister
;;;54         LCD_WriteByte(0x03U); 
00004a  2003              MOVS     r0,#3
00004c  f7fffffe          BL       LCD_WriteByte
;;;55         LCD_WriteByte(0x80U); 
000050  2080              MOVS     r0,#0x80
000052  f7fffffe          BL       LCD_WriteByte
;;;56         LCD_WriteByte(0x02U);
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       LCD_WriteByte
;;;57     
;;;58         LCD_WriteRegister(0xcfU);
00005c  20cf              MOVS     r0,#0xcf
00005e  f7fffffe          BL       LCD_WriteRegister
;;;59         LCD_WriteByte(0x00U); 
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       LCD_WriteByte
;;;60         LCD_WriteByte(0xc1U); 
000068  20c1              MOVS     r0,#0xc1
00006a  f7fffffe          BL       LCD_WriteByte
;;;61         LCD_WriteByte(0x30U);
00006e  2030              MOVS     r0,#0x30
000070  f7fffffe          BL       LCD_WriteByte
;;;62         
;;;63         LCD_WriteRegister(0xedU);
000074  20ed              MOVS     r0,#0xed
000076  f7fffffe          BL       LCD_WriteRegister
;;;64         LCD_WriteByte(0x64U); 
00007a  2064              MOVS     r0,#0x64
00007c  f7fffffe          BL       LCD_WriteByte
;;;65         LCD_WriteByte(0x03U); 
000080  2003              MOVS     r0,#3
000082  f7fffffe          BL       LCD_WriteByte
;;;66         LCD_WriteByte(0x12U);
000086  2012              MOVS     r0,#0x12
000088  f7fffffe          BL       LCD_WriteByte
;;;67         LCD_WriteByte(0x81U);
00008c  2081              MOVS     r0,#0x81
00008e  f7fffffe          BL       LCD_WriteByte
;;;68         
;;;69         LCD_WriteRegister(0xe8U);
000092  20e8              MOVS     r0,#0xe8
000094  f7fffffe          BL       LCD_WriteRegister
;;;70         LCD_WriteByte(0x85U); 
000098  2085              MOVS     r0,#0x85
00009a  f7fffffe          BL       LCD_WriteByte
;;;71         LCD_WriteByte(0x00U); 
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       LCD_WriteByte
;;;72         LCD_WriteByte(0x78U);
0000a4  2078              MOVS     r0,#0x78
0000a6  f7fffffe          BL       LCD_WriteByte
;;;73         
;;;74         LCD_WriteRegister(0xcbU);
0000aa  20cb              MOVS     r0,#0xcb
0000ac  f7fffffe          BL       LCD_WriteRegister
;;;75         LCD_WriteByte(0x39U); 
0000b0  2039              MOVS     r0,#0x39
0000b2  f7fffffe          BL       LCD_WriteByte
;;;76         LCD_WriteByte(0x2cU); 
0000b6  202c              MOVS     r0,#0x2c
0000b8  f7fffffe          BL       LCD_WriteByte
;;;77         LCD_WriteByte(0x00U);
0000bc  2000              MOVS     r0,#0
0000be  f7fffffe          BL       LCD_WriteByte
;;;78         LCD_WriteByte(0x34U); 
0000c2  2034              MOVS     r0,#0x34
0000c4  f7fffffe          BL       LCD_WriteByte
;;;79         LCD_WriteByte(0x02U);
0000c8  2002              MOVS     r0,#2
0000ca  f7fffffe          BL       LCD_WriteByte
;;;80     	    
;;;81         LCD_WriteRegister(0xf7U);
0000ce  20f7              MOVS     r0,#0xf7
0000d0  f7fffffe          BL       LCD_WriteRegister
;;;82         LCD_WriteByte(0x20U);
0000d4  2020              MOVS     r0,#0x20
0000d6  f7fffffe          BL       LCD_WriteByte
;;;83             
;;;84         LCD_WriteRegister(0xeaU);
0000da  20ea              MOVS     r0,#0xea
0000dc  f7fffffe          BL       LCD_WriteRegister
;;;85         LCD_WriteByte(0x00U); 
0000e0  2000              MOVS     r0,#0
0000e2  f7fffffe          BL       LCD_WriteByte
;;;86         LCD_WriteByte(0x00U);
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       LCD_WriteByte
;;;87     
;;;88         LCD_WriteRegister(ILI9341_POWER_CTRL_1);
0000ec  20c0              MOVS     r0,#0xc0
0000ee  f7fffffe          BL       LCD_WriteRegister
;;;89         LCD_WriteByte(0x23U);
0000f2  2023              MOVS     r0,#0x23
0000f4  f7fffffe          BL       LCD_WriteByte
;;;90         
;;;91         LCD_WriteRegister(ILI9341_POWER_CTRL_2);
0000f8  20c1              MOVS     r0,#0xc1
0000fa  f7fffffe          BL       LCD_WriteRegister
;;;92         LCD_WriteByte(0x10U);   
0000fe  2010              MOVS     r0,#0x10
000100  f7fffffe          BL       LCD_WriteByte
;;;93         
;;;94         LCD_WriteRegister(ILI9341_VCOM_CTRL_1);
000104  20c5              MOVS     r0,#0xc5
000106  f7fffffe          BL       LCD_WriteRegister
;;;95         LCD_WriteByte(0x3eU); 
00010a  203e              MOVS     r0,#0x3e
00010c  f7fffffe          BL       LCD_WriteByte
;;;96         LCD_WriteByte(0x28U);
000110  2028              MOVS     r0,#0x28
000112  f7fffffe          BL       LCD_WriteByte
;;;97             
;;;98         LCD_WriteRegister(ILI9341_VCOM_CTRL_2);
000116  20c7              MOVS     r0,#0xc7
000118  f7fffffe          BL       LCD_WriteRegister
;;;99         LCD_WriteByte(0x86U);    
00011c  2086              MOVS     r0,#0x86
00011e  f7fffffe          BL       LCD_WriteByte
;;;100            
;;;101        LCD_WriteRegister(ILI9341_MEMORY_ACCESS_CONTROL);
000122  2036              MOVS     r0,#0x36
000124  f7fffffe          BL       LCD_WriteRegister
;;;102        LCD_WriteByte(0xe8U);    
000128  20e8              MOVS     r0,#0xe8
00012a  f7fffffe          BL       LCD_WriteByte
;;;103            
;;;104        LCD_WriteRegister(ILI9341_PIXEL_FORMAT_SET);
00012e  203a              MOVS     r0,#0x3a
000130  f7fffffe          BL       LCD_WriteRegister
;;;105        LCD_WriteByte(0x55U);
000134  2055              MOVS     r0,#0x55
000136  f7fffffe          BL       LCD_WriteByte
;;;106        
;;;107        LCD_WriteRegister(ILI9341_FRAME_RATE_CTRL);
00013a  20b1              MOVS     r0,#0xb1
00013c  f7fffffe          BL       LCD_WriteRegister
;;;108        LCD_WriteByte(0x00U); 
000140  2000              MOVS     r0,#0
000142  f7fffffe          BL       LCD_WriteByte
;;;109        LCD_WriteByte(0x18U);
000146  2018              MOVS     r0,#0x18
000148  f7fffffe          BL       LCD_WriteByte
;;;110       
;;;111        LCD_WriteRegister(ILI9341_DISP_FUNCTION_CTRL);
00014c  20b6              MOVS     r0,#0xb6
00014e  f7fffffe          BL       LCD_WriteRegister
;;;112        LCD_WriteByte(0x08U); 
000152  2008              MOVS     r0,#8
000154  f7fffffe          BL       LCD_WriteByte
;;;113        LCD_WriteByte(0x82U); 
000158  2082              MOVS     r0,#0x82
00015a  f7fffffe          BL       LCD_WriteByte
;;;114        LCD_WriteByte(0x27U);
00015e  2027              MOVS     r0,#0x27
000160  f7fffffe          BL       LCD_WriteByte
;;;115       
;;;116        LCD_WriteRegister(0xf2U);
000164  20f2              MOVS     r0,#0xf2
000166  f7fffffe          BL       LCD_WriteRegister
;;;117        LCD_WriteByte(0x00U);
00016a  2000              MOVS     r0,#0
00016c  f7fffffe          BL       LCD_WriteByte
;;;118        
;;;119        LCD_WriteRegister(ILI9341_GAMMA_SET);
000170  2026              MOVS     r0,#0x26
000172  f7fffffe          BL       LCD_WriteRegister
;;;120        LCD_WriteByte(0x01U);
000176  2001              MOVS     r0,#1
000178  f7fffffe          BL       LCD_WriteByte
;;;121        
;;;122        LCD_WriteRegister(ILI9341_POSITIVE_GAMMA_CORRECTION);
00017c  20e0              MOVS     r0,#0xe0
00017e  f7fffffe          BL       LCD_WriteRegister
;;;123        LCD_WriteByte(0x0fU);
000182  200f              MOVS     r0,#0xf
000184  f7fffffe          BL       LCD_WriteByte
;;;124        LCD_WriteByte(0x31U);
000188  2031              MOVS     r0,#0x31
00018a  f7fffffe          BL       LCD_WriteByte
;;;125        LCD_WriteByte(0x2bU);
00018e  202b              MOVS     r0,#0x2b
000190  f7fffffe          BL       LCD_WriteByte
;;;126        LCD_WriteByte(0x0cU); 
000194  200c              MOVS     r0,#0xc
000196  f7fffffe          BL       LCD_WriteByte
;;;127        LCD_WriteByte(0x0eU);
00019a  200e              MOVS     r0,#0xe
00019c  f7fffffe          BL       LCD_WriteByte
;;;128        LCD_WriteByte(0x08U);
0001a0  2008              MOVS     r0,#8
0001a2  f7fffffe          BL       LCD_WriteByte
;;;129        LCD_WriteByte(0x4eU);
0001a6  204e              MOVS     r0,#0x4e
0001a8  f7fffffe          BL       LCD_WriteByte
;;;130        LCD_WriteByte(0xf1U);
0001ac  20f1              MOVS     r0,#0xf1
0001ae  f7fffffe          BL       LCD_WriteByte
;;;131        LCD_WriteByte(0x37U);
0001b2  2037              MOVS     r0,#0x37
0001b4  f7fffffe          BL       LCD_WriteByte
;;;132        LCD_WriteByte(0x07U);
0001b8  2007              MOVS     r0,#7
0001ba  f7fffffe          BL       LCD_WriteByte
;;;133        LCD_WriteByte(0x10U);
0001be  2010              MOVS     r0,#0x10
0001c0  f7fffffe          BL       LCD_WriteByte
;;;134        LCD_WriteByte(0x03U);
0001c4  2003              MOVS     r0,#3
0001c6  f7fffffe          BL       LCD_WriteByte
;;;135        LCD_WriteByte(0x0eU);
0001ca  200e              MOVS     r0,#0xe
0001cc  f7fffffe          BL       LCD_WriteByte
;;;136        LCD_WriteByte(0x09U);
0001d0  2009              MOVS     r0,#9
0001d2  f7fffffe          BL       LCD_WriteByte
;;;137        LCD_WriteByte(0x00U);
0001d6  2000              MOVS     r0,#0
0001d8  f7fffffe          BL       LCD_WriteByte
;;;138    
;;;139        LCD_WriteRegister(ILI9341_NEGATIVE_GAMMA_CORRECTION);
0001dc  20e1              MOVS     r0,#0xe1
0001de  f7fffffe          BL       LCD_WriteRegister
;;;140        LCD_WriteByte(0x00U);
0001e2  2000              MOVS     r0,#0
0001e4  f7fffffe          BL       LCD_WriteByte
;;;141        LCD_WriteByte(0x0eU);
0001e8  200e              MOVS     r0,#0xe
0001ea  f7fffffe          BL       LCD_WriteByte
;;;142        LCD_WriteByte(0x14U);
0001ee  2014              MOVS     r0,#0x14
0001f0  f7fffffe          BL       LCD_WriteByte
;;;143        LCD_WriteByte(0x03U);
0001f4  2003              MOVS     r0,#3
0001f6  f7fffffe          BL       LCD_WriteByte
;;;144        LCD_WriteByte(0x11U);
0001fa  2011              MOVS     r0,#0x11
0001fc  f7fffffe          BL       LCD_WriteByte
;;;145        LCD_WriteByte(0x07U);
000200  2007              MOVS     r0,#7
000202  f7fffffe          BL       LCD_WriteByte
;;;146        LCD_WriteByte(0x31U);
000206  2031              MOVS     r0,#0x31
000208  f7fffffe          BL       LCD_WriteByte
;;;147        LCD_WriteByte(0xc1U); 
00020c  20c1              MOVS     r0,#0xc1
00020e  f7fffffe          BL       LCD_WriteByte
;;;148        LCD_WriteByte(0x48U);
000212  2048              MOVS     r0,#0x48
000214  f7fffffe          BL       LCD_WriteByte
;;;149        LCD_WriteByte(0x08U);    
000218  2008              MOVS     r0,#8
00021a  f7fffffe          BL       LCD_WriteByte
;;;150        LCD_WriteByte(0x0fU);
00021e  200f              MOVS     r0,#0xf
000220  f7fffffe          BL       LCD_WriteByte
;;;151        LCD_WriteByte(0x0cU);
000224  200c              MOVS     r0,#0xc
000226  f7fffffe          BL       LCD_WriteByte
;;;152        LCD_WriteByte(0x31U);
00022a  2031              MOVS     r0,#0x31
00022c  f7fffffe          BL       LCD_WriteByte
;;;153        LCD_WriteByte(0x36U); 
000230  2036              MOVS     r0,#0x36
000232  f7fffffe          BL       LCD_WriteByte
;;;154        LCD_WriteByte(0x0fU);  
000236  200f              MOVS     r0,#0xf
000238  f7fffffe          BL       LCD_WriteByte
;;;155            
;;;156        LCD_WriteRegister(0xb1U);
00023c  20b1              MOVS     r0,#0xb1
00023e  f7fffffe          BL       LCD_WriteRegister
;;;157        LCD_WriteByte(0x00U); 
000242  2000              MOVS     r0,#0
000244  f7fffffe          BL       LCD_WriteByte
;;;158        LCD_WriteByte(0x10U);
000248  2010              MOVS     r0,#0x10
00024a  f7fffffe          BL       LCD_WriteByte
;;;159        
;;;160        LCD_WriteRegister(ILI9341_SLEEP_OUT); 
00024e  2011              MOVS     r0,#0x11
000250  f7fffffe          BL       LCD_WriteRegister
;;;161        HAL_Delay(200U);
000254  20c8              MOVS     r0,#0xc8
000256  f7fffffe          BL       HAL_Delay
;;;162        LCD_WriteRegister(ILI9341_DISP_ON);
00025a  e8bd4010          POP      {r4,lr}
00025e  2029              MOVS     r0,#0x29
000260  f7ffbffe          B.W      LCD_WriteRegister
;;;163    }
;;;164    
                          ENDP

                  |L3.612|
                          DCD      0x40010c00
                  |L3.616|
                          DCD      hc595_dout

                          AREA ||i.LCD_ReadCommand||, CODE, READONLY, ALIGN=2

                  LCD_ReadCommand PROC
;;;198    
;;;199    uint8_t LCD_ReadCommand(uint8_t command, uint8_t index) 
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;201        spi_buff[0] = 0U;
000006  4d16              LDR      r5,|L4.96|
000008  2000              MOVS     r0,#0
00000a  7028              STRB     r0,[r5,#0]
;;;202        LCD_WriteRegister(0xD9U);
00000c  20d9              MOVS     r0,#0xd9
00000e  f7fffffe          BL       LCD_WriteRegister
;;;203        LCD_WriteByte(0x10U + index);
000012  3410              ADDS     r4,r4,#0x10
000014  b2e0              UXTB     r0,r4
000016  f7fffffe          BL       LCD_WriteByte
;;;204        LCD_WriteRegister(command);
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       LCD_WriteRegister
;;;205        HAL_GPIO_WritePin(DISPLAY_DC_Port, DISPLAY_DC_Pin, GPIO_PIN_SET);
000020  4c10              LDR      r4,|L4.100|
000022  2201              MOVS     r2,#1
000024  0291              LSLS     r1,r2,#10
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_GPIO_WritePin
;;;206        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_RESET);
00002c  14e6              ASRS     r6,r4,#19
00002e  2200              MOVS     r2,#0
000030  4631              MOV      r1,r6
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_GPIO_WritePin
;;;207        HAL_SPI_Transmit(&hspi2, spi_buff, 1U, 10U);
000038  230a              MOVS     r3,#0xa
00003a  2201              MOVS     r2,#1
00003c  4629              MOV      r1,r5
00003e  480a              LDR      r0,|L4.104|
000040  f7fffffe          BL       HAL_SPI_Transmit
;;;208        HAL_SPI_Receive(&hspi2, spi_buff, 1U, 10U);
000044  230a              MOVS     r3,#0xa
000046  2201              MOVS     r2,#1
000048  4629              MOV      r1,r5
00004a  4807              LDR      r0,|L4.104|
00004c  f7fffffe          BL       HAL_SPI_Receive
;;;209        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
000050  2201              MOVS     r2,#1
000052  4631              MOV      r1,r6
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       HAL_GPIO_WritePin
;;;210        return (spi_buff[0]);
00005a  7828              LDRB     r0,[r5,#0]  ; spi_buff
;;;211    }
00005c  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP

00005e  0000              DCW      0x0000
                  |L4.96|
                          DCD      ||.data||+0x6
                  |L4.100|
                          DCD      0x40010c00
                  |L4.104|
                          DCD      hspi2

                          AREA ||i.LCD_ShowChar||, CODE, READONLY, ALIGN=2

                  LCD_ShowChar PROC
;;;233    
;;;234    void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;235    {
;;;236        uint32_t temp, pos, n, t;
;;;237        uint16_t colortemp = POINT_COLOR;
000004  f8dfa0d0          LDR      r10,|L5.216|
000008  f8bab004          LDRH     r11,[r10,#4]  ; POINT_COLOR
;;;238        uint32_t font_cnt, font_i, font_x, font_y, bcnt1, bcnt2;
;;;239        
;;;240        n = num - ' ';
00000c  3a20              SUBS     r2,r2,#0x20
00000e  9200              STR      r2,[sp,#0]
;;;241    
;;;242        
;;;243        if(font_size == SMALL_SIZE_FONT)
000010  f89a2000          LDRB     r2,[r10,#0]  ; font_size
;;;244    	{
;;;245            font_x = 8U;
;;;246            font_y = 16U;
;;;247            font_cnt = 4U;
;;;248            bcnt1 = 0xFFFFU;
000014  f64f75ff          MOV      r5,#0xffff
000018  2a01              CMP      r2,#1                 ;243
00001a  d004              BEQ      |L5.38|
;;;249            bcnt2 = 0xFFFFU;
;;;250        }
;;;251        else if(font_size == MIDDLE_SIZE_FONT)
00001c  2a02              CMP      r2,#2
00001e  d008              BEQ      |L5.50|
;;;252    	{		
;;;253            bcnt1 = 19U;
;;;254            bcnt2 = 3U;
;;;255            font_x = 12U;
;;;256            font_y = 20U;
;;;257            font_cnt = 10U;
;;;258        }
;;;259        else if(font_size == BIG_SIZE_FONT)
000020  2a03              CMP      r2,#3
000022  d00e              BEQ      |L5.66|
000024  e012              B        |L5.76|
                  |L5.38|
000026  2408              MOVS     r4,#8                 ;245
000028  2310              MOVS     r3,#0x10              ;246
00002a  2704              MOVS     r7,#4                 ;247
00002c  46a8              MOV      r8,r5                 ;248
00002e  46c1              MOV      r9,r8                 ;249
000030  e00c              B        |L5.76|
                  |L5.50|
000032  f04f0813          MOV      r8,#0x13              ;253
000036  f04f0903          MOV      r9,#3                 ;254
00003a  240c              MOVS     r4,#0xc               ;255
00003c  2314              MOVS     r3,#0x14              ;256
00003e  270a              MOVS     r7,#0xa               ;257
000040  e004              B        |L5.76|
                  |L5.66|
;;;260    	{
;;;261            font_x = 16U;
000042  2410              MOVS     r4,#0x10
;;;262            font_y = 26U;
000044  231a              MOVS     r3,#0x1a
;;;263            font_cnt = 13U;
000046  270d              MOVS     r7,#0xd
;;;264            bcnt1 = 0xFFFFU;
000048  46a8              MOV      r8,r5
;;;265            bcnt2 = 0xFFFFU;
00004a  46c1              MOV      r9,r8
                  |L5.76|
;;;266        }
;;;267        
;;;268        LCD_AddressSet(x, y, (x + font_x - 1U), (y  + font_y - 1U));
00004c  18ca              ADDS     r2,r1,r3
00004e  1e52              SUBS     r2,r2,#1
000050  b293              UXTH     r3,r2
000052  1902              ADDS     r2,r0,r4
000054  1e52              SUBS     r2,r2,#1
000056  b292              UXTH     r2,r2
000058  f7fffffe          BL       LCD_AddressSet
;;;269        LCD_WriteRegister(ILI9341_MEMORY_WRITE);
00005c  202c              MOVS     r0,#0x2c
00005e  f7fffffe          BL       LCD_WriteRegister
;;;270    		
;;;271        for (pos = 0U; pos < font_cnt; pos++)
000062  2500              MOVS     r5,#0
000064  e031              B        |L5.202|
                  |L5.102|
;;;272        {
;;;273            font_i = (n * font_cnt + pos);
000066  9800              LDR      r0,[sp,#0]
000068  fb005007          MLA      r0,r0,r7,r5
;;;274            
;;;275            if(font_size == 1U)         temp = ascii_1608[font_i];
00006c  f89a1000          LDRB     r1,[r10,#0]  ; font_size
000070  2901              CMP      r1,#1
000072  d004              BEQ      |L5.126|
;;;276            else if(font_size == 2U)    temp = ascii_1220[font_i];
000074  2902              CMP      r1,#2
000076  d006              BEQ      |L5.134|
;;;277            else if(font_size == 3U)    temp = ascii_1626[font_i];
000078  2903              CMP      r1,#3
00007a  d008              BEQ      |L5.142|
00007c  e00a              B        |L5.148|
                  |L5.126|
00007e  4917              LDR      r1,|L5.220|
000080  f8516020          LDR      r6,[r1,r0,LSL #2]     ;275
000084  e006              B        |L5.148|
                  |L5.134|
000086  4916              LDR      r1,|L5.224|
000088  f8516020          LDR      r6,[r1,r0,LSL #2]     ;276
00008c  e002              B        |L5.148|
                  |L5.142|
00008e  4915              LDR      r1,|L5.228|
000090  f8516020          LDR      r6,[r1,r0,LSL #2]
                  |L5.148|
;;;278            
;;;279            t = 32U;
000094  2420              MOVS     r4,#0x20
                  |L5.150|
;;;280            
;;;281            do
;;;282            {   
;;;283                --t;
000096  1e64              SUBS     r4,r4,#1
;;;284                if(temp & (1U << t)) POINT_COLOR = colortemp;			
000098  2001              MOVS     r0,#1
00009a  40a0              LSLS     r0,r0,r4
00009c  4230              TST      r0,r6
00009e  d002              BEQ      |L5.166|
0000a0  f8aab004          STRH     r11,[r10,#4]
0000a4  e003              B        |L5.174|
                  |L5.166|
;;;285                else POINT_COLOR = BACK_COLOR;
0000a6  f8ba0002          LDRH     r0,[r10,#2]  ; BACK_COLOR
0000aa  f8aa0004          STRH     r0,[r10,#4]
                  |L5.174|
;;;286                LCD_WriteInt(POINT_COLOR);          // write pixels for all 32 bits if bcnt1 and bcnt2 not set
0000ae  f8ba0004          LDRH     r0,[r10,#4]  ; POINT_COLOR
0000b2  f7fffffe          BL       LCD_WriteInt
;;;287                if(t == bcnt1) t = 15U;             // write pixels for first 12 bits, skeep 4 empty bits,
0000b6  4544              CMP      r4,r8
0000b8  d101              BNE      |L5.190|
0000ba  240f              MOVS     r4,#0xf
0000bc  e002              B        |L5.196|
                  |L5.190|
;;;288                else if(t == bcnt2) t = 0U;         // write pixels for next 12 bits and break loop
0000be  454c              CMP      r4,r9
0000c0  d100              BNE      |L5.196|
0000c2  2400              MOVS     r4,#0
                  |L5.196|
;;;289            }
;;;290            while(t != 0);  
0000c4  2c00              CMP      r4,#0
0000c6  d1e6              BNE      |L5.150|
0000c8  1c6d              ADDS     r5,r5,#1              ;271
                  |L5.202|
0000ca  42bd              CMP      r5,r7                 ;271
0000cc  d3cb              BCC      |L5.102|
;;;291        }
;;;292        
;;;293        POINT_COLOR = colortemp;
0000ce  f8aab004          STRH     r11,[r10,#4]
;;;294    }
0000d2  e8bd8ff8          POP      {r3-r11,pc}
;;;295    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L5.216|
                          DCD      ||.data||
                  |L5.220|
                          DCD      ascii_1608
                  |L5.224|
                          DCD      ascii_1220
                  |L5.228|
                          DCD      ascii_1626

                          AREA ||i.LCD_ShowNum||, CODE, READONLY, ALIGN=2

                  LCD_ShowNum PROC
;;;297    
;;;298    void LCD_ShowNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;299    {
000004  4606              MOV      r6,r0
000006  468b              MOV      r11,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
;;;300        uint32_t t, temp, enshow = 0U;
00000c  f04f0800          MOV      r8,#0
;;;301        
;;;302    	for(t = 0U; t < len; t++)
000010  2400              MOVS     r4,#0
;;;303    	{
;;;304    		temp =( num / BaseToPower(10U, len - t - 1U)) %10U;
;;;305            
;;;306    		if((enshow == 0U) && (t < (len - 1)))
;;;307    		{
;;;308    			if(temp == 0U)
;;;309    			{
;;;310    				LCD_ShowChar(( x + 8U * t), y, ' ');
;;;311    				continue;
;;;312    			}
;;;313    			else 
;;;314    			{
;;;315                    enshow = 1U;
;;;316                }
;;;317    		}
;;;318            
;;;319            if(font_size == SMALL_SIZE_FONT) LCD_ShowChar((x + 8U * t), y, (temp + '0'));
000012  f8dfa094          LDR      r10,|L6.168|
000016  e043              B        |L6.160|
                  |L6.24|
000018  1b38              SUBS     r0,r7,r4              ;304
00001a  1e40              SUBS     r0,r0,#1              ;304
00001c  b2c1              UXTB     r1,r0                 ;304
00001e  200a              MOVS     r0,#0xa               ;304
000020  f7fffffe          BL       BaseToPower
000024  fbb9f0f0          UDIV     r0,r9,r0              ;304
000028  210a              MOVS     r1,#0xa               ;304
00002a  fbb0f2f1          UDIV     r2,r0,r1              ;304
00002e  fb010512          MLS      r5,r1,r2,r0           ;304
000032  f1b80f00          CMP      r8,#0                 ;306
000036  d105              BNE      |L6.68|
000038  1e78              SUBS     r0,r7,#1              ;306
00003a  4284              CMP      r4,r0                 ;306
00003c  d202              BCS      |L6.68|
00003e  b155              CBZ      r5,|L6.86|
000040  f04f0801          MOV      r8,#1                 ;315
                  |L6.68|
000044  f89a0000          LDRB     r0,[r10,#0]  ; font_size
000048  2801              CMP      r0,#1
00004a  d00c              BEQ      |L6.102|
;;;320    		else if(font_size == MIDDLE_SIZE_FONT) LCD_ShowChar((x + 12U * t), y, (temp + '0'));
00004c  2802              CMP      r0,#2
00004e  d013              BEQ      |L6.120|
;;;321    		else if(font_size == BIG_SIZE_FONT) LCD_ShowChar((x + 16U * t), y, (temp + '0'));
000050  2803              CMP      r0,#3
000052  d01c              BEQ      |L6.142|
000054  e023              B        |L6.158|
                  |L6.86|
000056  eb0600c4          ADD      r0,r6,r4,LSL #3       ;310
00005a  b280              UXTH     r0,r0                 ;310
00005c  2220              MOVS     r2,#0x20              ;310
00005e  4659              MOV      r1,r11                ;310
000060  f7fffffe          BL       LCD_ShowChar
000064  e01b              B        |L6.158|
                  |L6.102|
000066  3530              ADDS     r5,r5,#0x30           ;319
000068  eb0600c4          ADD      r0,r6,r4,LSL #3       ;319
00006c  b2ea              UXTB     r2,r5                 ;319
00006e  b280              UXTH     r0,r0                 ;319
000070  4659              MOV      r1,r11                ;319
000072  f7fffffe          BL       LCD_ShowChar
000076  e012              B        |L6.158|
                  |L6.120|
000078  eb040044          ADD      r0,r4,r4,LSL #1       ;320
00007c  3530              ADDS     r5,r5,#0x30           ;320
00007e  eb060080          ADD      r0,r6,r0,LSL #2       ;320
000082  b2ea              UXTB     r2,r5                 ;320
000084  b280              UXTH     r0,r0                 ;320
000086  4659              MOV      r1,r11                ;320
000088  f7fffffe          BL       LCD_ShowChar
00008c  e007              B        |L6.158|
                  |L6.142|
00008e  3530              ADDS     r5,r5,#0x30
000090  eb061004          ADD      r0,r6,r4,LSL #4
000094  b2ea              UXTB     r2,r5
000096  b280              UXTH     r0,r0
000098  4659              MOV      r1,r11
00009a  f7fffffe          BL       LCD_ShowChar
                  |L6.158|
00009e  1c64              ADDS     r4,r4,#1              ;302
                  |L6.160|
0000a0  42bc              CMP      r4,r7                 ;302
0000a2  d3b9              BCC      |L6.24|
;;;322    	}
;;;323    }
0000a4  e8bd9ff0          POP      {r4-r12,pc}
;;;324    
                          ENDP

                  |L6.168|
                          DCD      ||.data||

                          AREA ||i.LCD_ShowString||, CODE, READONLY, ALIGN=2

                  LCD_ShowString PROC
;;;325    
;;;326    void LCD_ShowString(uint16_t x, uint16_t y, const char *p)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;327    {            
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;328        while(*p != '\0')
;;;329    	{        
;;;330    		if(font_size == SMALL_SIZE_FONT)
00000a  4f22              LDR      r7,|L7.148|
00000c  e03c              B        |L7.136|
                  |L7.14|
00000e  7838              LDRB     r0,[r7,#0]  ; font_size
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L7.30|
;;;331    		{
;;;332    			if(x > (LCD_W - 8U))
;;;333    			{
;;;334    				x = 0U;
;;;335    				y += 16U;
;;;336    			}
;;;337    
;;;338    			if(y > (LCD_H - 16U)) y = x = 0U;
;;;339    			LCD_ShowChar(x, y, *p);
;;;340    			x += 8U;
;;;341    			p++;			
;;;342    		}
;;;343    		else if(font_size == MIDDLE_SIZE_FONT)
000014  2802              CMP      r0,#2
000016  d014              BEQ      |L7.66|
;;;344    		{
;;;345    			if(x > (LCD_W - 12U))
;;;346    			{
;;;347    				x = 0U;
;;;348    				y += 20U;
;;;349    			}
;;;350    
;;;351    			if(y > (LCD_H - 20U)) y = x = 0U;
;;;352    			LCD_ShowChar(x, y, *p);
;;;353    			x += 12U;
;;;354    			p++;
;;;355    		} 
;;;356    		else if(font_size == BIG_SIZE_FONT)
000018  2803              CMP      r0,#3
00001a  d135              BNE      |L7.136|
00001c  e023              B        |L7.102|
                  |L7.30|
00001e  f5b47f9c          CMP      r4,#0x138             ;332
000022  d902              BLS      |L7.42|
000024  2400              MOVS     r4,#0                 ;334
000026  3510              ADDS     r5,r5,#0x10           ;335
000028  b2ad              UXTH     r5,r5                 ;335
                  |L7.42|
00002a  2de0              CMP      r5,#0xe0              ;338
00002c  d901              BLS      |L7.50|
00002e  2400              MOVS     r4,#0                 ;338
000030  4625              MOV      r5,r4                 ;338
                  |L7.50|
000032  4629              MOV      r1,r5                 ;339
000034  4620              MOV      r0,r4                 ;339
000036  f7fffffe          BL       LCD_ShowChar
00003a  3408              ADDS     r4,r4,#8              ;340
00003c  b2a4              UXTH     r4,r4                 ;340
00003e  1c76              ADDS     r6,r6,#1              ;341
000040  e022              B        |L7.136|
                  |L7.66|
000042  f5b47f9a          CMP      r4,#0x134             ;345
000046  d902              BLS      |L7.78|
000048  2400              MOVS     r4,#0                 ;347
00004a  3514              ADDS     r5,r5,#0x14           ;348
00004c  b2ad              UXTH     r5,r5                 ;348
                  |L7.78|
00004e  2ddc              CMP      r5,#0xdc              ;351
000050  d901              BLS      |L7.86|
000052  2400              MOVS     r4,#0                 ;351
000054  4625              MOV      r5,r4                 ;351
                  |L7.86|
000056  4629              MOV      r1,r5                 ;352
000058  4620              MOV      r0,r4                 ;352
00005a  f7fffffe          BL       LCD_ShowChar
00005e  340c              ADDS     r4,r4,#0xc            ;353
000060  b2a4              UXTH     r4,r4                 ;353
000062  1c76              ADDS     r6,r6,#1              ;354
000064  e010              B        |L7.136|
                  |L7.102|
;;;357    		{
;;;358    			if(x > (LCD_W - 16U))
000066  f5b47f98          CMP      r4,#0x130
00006a  d902              BLS      |L7.114|
;;;359    			{
;;;360    				x = 0U;
00006c  2400              MOVS     r4,#0
;;;361    				y += 26U;
00006e  351a              ADDS     r5,r5,#0x1a
000070  b2ad              UXTH     r5,r5
                  |L7.114|
;;;362    			}
;;;363    
;;;364    			if(y > (LCD_H - 26U)) y = x = 0U;
000072  2dd6              CMP      r5,#0xd6
000074  d901              BLS      |L7.122|
000076  2400              MOVS     r4,#0
000078  4625              MOV      r5,r4
                  |L7.122|
;;;365    			LCD_ShowChar(x, y, *p);
00007a  4629              MOV      r1,r5
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       LCD_ShowChar
;;;366    			x += 16U;
000082  3410              ADDS     r4,r4,#0x10
000084  b2a4              UXTH     r4,r4
;;;367    			p++;
000086  1c76              ADDS     r6,r6,#1
                  |L7.136|
000088  7832              LDRB     r2,[r6,#0]            ;328
00008a  2a00              CMP      r2,#0                 ;328
00008c  d1bf              BNE      |L7.14|
;;;368    		}        
;;;369        }
;;;370    }
00008e  e8bd81f0          POP      {r4-r8,pc}
;;;371    
                          ENDP

000092  0000              DCW      0x0000
                  |L7.148|
                          DCD      ||.data||

                          AREA ||i.LCD_WriteByte||, CODE, READONLY, ALIGN=2

                  LCD_WriteByte PROC
;;;372    
;;;373    static void LCD_WriteByte(uint8_t data)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;374    {
;;;375    	HAL_GPIO_WritePin(DISPLAY_DC_Port, DISPLAY_DC_Pin, GPIO_PIN_SET);
000002  4c0e              LDR      r4,|L8.60|
000004  2201              MOVS     r2,#1
000006  0291              LSLS     r1,r2,#10
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       HAL_GPIO_WritePin
;;;376        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_RESET);
00000e  14e5              ASRS     r5,r4,#19
000010  2200              MOVS     r2,#0
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       HAL_GPIO_WritePin
;;;377        if (HAL_SPI_Transmit(&hspi2, &data, 1U, SPI_FLASH_TIMEOUT) != HAL_OK) Error_Handler();
00001a  f44f73fa          MOV      r3,#0x1f4
00001e  2201              MOVS     r2,#1
000020  4669              MOV      r1,sp
000022  4807              LDR      r0,|L8.64|
000024  f7fffffe          BL       HAL_SPI_Transmit
000028  b108              CBZ      r0,|L8.46|
00002a  f7fffffe          BL       Error_Handler
                  |L8.46|
;;;378        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
00002e  2201              MOVS     r2,#1
000030  4629              MOV      r1,r5
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_GPIO_WritePin
;;;379    }
000038  bd38              POP      {r3-r5,pc}
;;;380    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      0x40010c00
                  |L8.64|
                          DCD      hspi2

                          AREA ||i.LCD_WriteInt||, CODE, READONLY, ALIGN=2

                  LCD_WriteInt PROC
;;;381    
;;;382    static void LCD_WriteInt(uint16_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;383    {
000002  4604              MOV      r4,r0
;;;384    	HAL_GPIO_WritePin(DISPLAY_DC_Port, DISPLAY_DC_Pin, GPIO_PIN_SET);
000004  4d10              LDR      r5,|L9.72|
000006  2201              MOVS     r2,#1
000008  0291              LSLS     r1,r2,#10
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       HAL_GPIO_WritePin
;;;385        spi_buff[0] = data >> 8U;
000010  480e              LDR      r0,|L9.76|
000012  0a21              LSRS     r1,r4,#8
000014  7001              STRB     r1,[r0,#0]
;;;386        spi_buff[1] = data & 0xFFU;
000016  7044              STRB     r4,[r0,#1]
;;;387        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_RESET);
000018  14ec              ASRS     r4,r5,#19
00001a  2200              MOVS     r2,#0
00001c  4621              MOV      r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       HAL_GPIO_WritePin
;;;388        if (HAL_SPI_Transmit(&hspi2, spi_buff, 2U, SPI_FLASH_TIMEOUT) != HAL_OK) Error_Handler();
000024  f44f73fa          MOV      r3,#0x1f4
000028  2202              MOVS     r2,#2
00002a  4908              LDR      r1,|L9.76|
00002c  4808              LDR      r0,|L9.80|
00002e  f7fffffe          BL       HAL_SPI_Transmit
000032  b108              CBZ      r0,|L9.56|
000034  f7fffffe          BL       Error_Handler
                  |L9.56|
;;;389        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
000038  4621              MOV      r1,r4
00003a  4628              MOV      r0,r5
00003c  e8bd4070          POP      {r4-r6,lr}
000040  2201              MOVS     r2,#1
000042  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;390    }
;;;391    
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      0x40010c00
                  |L9.76|
                          DCD      ||.data||+0x6
                  |L9.80|
                          DCD      hspi2

                          AREA ||i.LCD_WriteRegister||, CODE, READONLY, ALIGN=2

                  LCD_WriteRegister PROC
;;;224    
;;;225    void LCD_WriteRegister(uint8_t data)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;226    {
;;;227        HAL_GPIO_WritePin(DISPLAY_DC_Port, DISPLAY_DC_Pin, GPIO_PIN_RESET);
000002  4c0e              LDR      r4,|L10.60|
000004  2200              MOVS     r2,#0
000006  f44f6180          MOV      r1,#0x400
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       HAL_GPIO_WritePin
;;;228        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_RESET);
000010  14e5              ASRS     r5,r4,#19
000012  2200              MOVS     r2,#0
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_GPIO_WritePin
;;;229        if (HAL_SPI_Transmit(&hspi2, &data, 1U, SPI_FLASH_TIMEOUT) != HAL_OK) Error_Handler();
00001c  f44f73fa          MOV      r3,#0x1f4
000020  2201              MOVS     r2,#1
000022  4669              MOV      r1,sp
000024  4806              LDR      r0,|L10.64|
000026  f7fffffe          BL       HAL_SPI_Transmit
00002a  b108              CBZ      r0,|L10.48|
00002c  f7fffffe          BL       Error_Handler
                  |L10.48|
;;;230        HAL_GPIO_WritePin(DISPLAY_CS_Port, DISPLAY_CS_Pin, GPIO_PIN_SET); 
000030  2201              MOVS     r2,#1
000032  4629              MOV      r1,r5
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       HAL_GPIO_WritePin
;;;231    }
00003a  bd38              POP      {r3-r5,pc}
;;;232    
                          ENDP

                  |L10.60|
                          DCD      0x40010c00
                  |L10.64|
                          DCD      hspi2

                          AREA ||.data||, DATA, ALIGN=1

                  font_size
000000  0000              DCB      0x00,0x00
                  BACK_COLOR
000002  0000              DCB      0x00,0x00
                  POINT_COLOR
000004  0000              DCB      0x00,0x00
                  spi_buff
000006  0000              DCB      0x00,0x00
                          DCDU     0x00000000
00000c  0000              DCB      0x00,0x00

                          AREA ||area_number.14||, DATA, ALIGN=0

                          EXPORTAS ||area_number.14||, ||.data||
                  bit_byte
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\Src\\tft_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_tft_lcd_c_LCD_Init____REV16|
#line 441 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_tft_lcd_c_LCD_Init____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_tft_lcd_c_LCD_Init____REVSH|
#line 456
|__asm___9_tft_lcd_c_LCD_Init____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_tft_lcd_c_LCD_Init____RRX|
#line 643
|__asm___9_tft_lcd_c_LCD_Init____RRX| PROC
#line 644

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
