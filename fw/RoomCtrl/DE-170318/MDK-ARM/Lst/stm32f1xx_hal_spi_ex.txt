; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-170318\stm32f1xx_hal_spi_ex.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-170318\stm32f1xx_hal_spi_ex.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I.\RTE\_DE-170318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-170318\stm32f1xx_hal_spi_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi_ex.c]
                          THUMB

                          AREA ||i.HAL_SPI_Init||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Init PROC
;;;99       */
;;;100    HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000000  b570              PUSH     {r4-r6,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102      /* Check the SPI handle allocation */
;;;103      if(hspi == NULL)
000004  2c00              CMP      r4,#0
000006  d005              BEQ      |L1.20|
;;;104      {
;;;105        return HAL_ERROR;
;;;106      }
;;;107    
;;;108      /* Check the parameters */
;;;109      assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
;;;110      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;111      assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
;;;112      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;113      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;114      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;115      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;116      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;117      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;118    
;;;119    #if (USE_SPI_CRC != 0U)
;;;120      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;121      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;122      {
;;;123        assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;124      }
;;;125    #else
;;;126      hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
000008  2500              MOVS     r5,#0
00000a  62a5              STR      r5,[r4,#0x28]
;;;127    #endif /* USE_SPI_CRC */
;;;128    
;;;129      if(hspi->State == HAL_SPI_STATE_RESET)
00000c  f8940051          LDRB     r0,[r4,#0x51]
000010  b110              CBZ      r0,|L1.24|
000012  e004              B        |L1.30|
                  |L1.20|
000014  2001              MOVS     r0,#1                 ;105
;;;130      {
;;;131        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;132        HAL_SPI_MspInit(hspi);
;;;133      }
;;;134      
;;;135      hspi->State = HAL_SPI_STATE_BUSY;
;;;136    
;;;137      /* Disble the selected SPI peripheral */
;;;138      __HAL_SPI_DISABLE(hspi);
;;;139    
;;;140      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;141      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;142      Communication speed, First bit and CRC calculation state */
;;;143      WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;144                                      hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;145                                      hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );
;;;146    
;;;147      /* Configure : NSS management */
;;;148      WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
;;;149    
;;;150      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;151      /* Configure : CRC Polynomial */
;;;152      WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
;;;153    
;;;154    #if defined(SPI_I2SCFGR_I2SMOD)
;;;155      /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
;;;156      CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
;;;157    #endif /* SPI_I2SCFGR_I2SMOD */
;;;158    
;;;159    #if (USE_SPI_CRC != 0U)
;;;160    #if defined (STM32F101xE) || defined (STM32F103xE)
;;;161      /* Check RevisionID value for identifying if Device is Rev Z (0x0001) in order to enable workaround for
;;;162         CRC errors wrongly detected */
;;;163      /* Pb is that ES_STM32F10xxCDE also identify an issue in Debug registers access while not in Debug mode.
;;;164         Revision ID information is only available in Debug mode, so Workaround could not be implemented
;;;165         to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
;;;166         So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
;;;167      uCRCErrorWorkaroundCheck = 0U;
;;;168    #else
;;;169      uCRCErrorWorkaroundCheck = 0U;
;;;170    #endif /* STM32F101xE || STM32F103xE */
;;;171    #endif /* USE_SPI_CRC */
;;;172    
;;;173      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;174      hspi->State = HAL_SPI_STATE_READY;
;;;175      
;;;176      return HAL_OK;
;;;177    }
000016  bd70              POP      {r4-r6,pc}
                  |L1.24|
000018  4620              MOV      r0,r4                 ;132
00001a  f7fffffe          BL       HAL_SPI_MspInit
                  |L1.30|
00001e  2002              MOVS     r0,#2                 ;135
000020  f8840051          STRB     r0,[r4,#0x51]         ;135
000024  6820              LDR      r0,[r4,#0]            ;138
000026  6801              LDR      r1,[r0,#0]            ;138
000028  f0210140          BIC      r1,r1,#0x40           ;138
00002c  6001              STR      r1,[r0,#0]            ;138
00002e  e9d40101          LDRD     r0,r1,[r4,#4]         ;143
000032  4308              ORRS     r0,r0,r1              ;143
000034  e9d41203          LDRD     r1,r2,[r4,#0xc]       ;143
000038  4311              ORRS     r1,r1,r2              ;143
00003a  4308              ORRS     r0,r0,r1              ;143
00003c  6961              LDR      r1,[r4,#0x14]         ;143
00003e  4308              ORRS     r0,r0,r1              ;143
000040  8b21              LDRH     r1,[r4,#0x18]         ;143
000042  f4017100          AND      r1,r1,#0x200          ;143
000046  4308              ORRS     r0,r0,r1              ;143
000048  69e1              LDR      r1,[r4,#0x1c]         ;143
00004a  4308              ORRS     r0,r0,r1              ;143
00004c  6a21              LDR      r1,[r4,#0x20]         ;143
00004e  4308              ORRS     r0,r0,r1              ;143
000050  6aa1              LDR      r1,[r4,#0x28]         ;143
000052  4308              ORRS     r0,r0,r1              ;143
000054  6821              LDR      r1,[r4,#0]            ;143
000056  6008              STR      r0,[r1,#0]            ;143
000058  69a0              LDR      r0,[r4,#0x18]         ;148
00005a  2104              MOVS     r1,#4                 ;148
00005c  ea014010          AND      r0,r1,r0,LSR #16      ;148
000060  6a61              LDR      r1,[r4,#0x24]         ;148
000062  4308              ORRS     r0,r0,r1              ;148
000064  6821              LDR      r1,[r4,#0]            ;148
000066  6048              STR      r0,[r1,#4]            ;148
000068  6821              LDR      r1,[r4,#0]            ;152
00006a  6ae0              LDR      r0,[r4,#0x2c]         ;152
00006c  6108              STR      r0,[r1,#0x10]         ;152
00006e  6820              LDR      r0,[r4,#0]            ;156
000070  69c1              LDR      r1,[r0,#0x1c]         ;156
000072  f4216100          BIC      r1,r1,#0x800          ;156
000076  61c1              STR      r1,[r0,#0x1c]         ;156
000078  6565              STR      r5,[r4,#0x54]         ;173
00007a  2001              MOVS     r0,#1                 ;174
00007c  f8840051          STRB     r0,[r4,#0x51]         ;174
000080  2000              MOVS     r0,#0                 ;176
000082  bd70              POP      {r4-r6,pc}
;;;178    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_spi_ex_c_5e7b22bd____REV16|
#line 441 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_spi_ex_c_5e7b22bd____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_spi_ex_c_5e7b22bd____REVSH|
#line 456
|__asm___22_stm32f1xx_hal_spi_ex_c_5e7b22bd____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_spi_ex_c_5e7b22bd____RRX|
#line 643
|__asm___22_stm32f1xx_hal_spi_ex_c_5e7b22bd____RRX| PROC
#line 644

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
