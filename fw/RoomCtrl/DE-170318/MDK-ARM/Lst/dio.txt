; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-170318\dio.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-170318\dio.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I.\RTE\_DE-170318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-170318\dio.crf ..\Src\dio.c]
                          THUMB

                          AREA ||i.CAP1293_Init||, CODE, READONLY, ALIGN=2

                  CAP1293_Init PROC
;;;863    
;;;864    void CAP1293_Init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;865    {
;;;866    	uint8_t vendor_id, product_id, reg_wr[2];
;;;867    	
;;;868    	vendor_id = 0U;
000002  2000              MOVS     r0,#0
000004  9003              STR      r0,[sp,#0xc]
;;;869    	product_id = 0U;
000006  9002              STR      r0,[sp,#8]
;;;870    	reg_wr[0] = CAP1293_PRODUCT_ID_REG;
000008  20fd              MOVS     r0,#0xfd
00000a  f88d0004          STRB     r0,[sp,#4]
;;;871    	HAL_I2C_Master_Transmit(&hi2c1, CAP1293_WRITE, reg_wr, 1U, CAP1293_TIMEOUT);
00000e  240a              MOVS     r4,#0xa
000010  2301              MOVS     r3,#1
000012  aa01              ADD      r2,sp,#4
000014  2150              MOVS     r1,#0x50
000016  4829              LDR      r0,|L1.188|
000018  9400              STR      r4,[sp,#0]
00001a  f7fffffe          BL       HAL_I2C_Master_Transmit
;;;872    	HAL_I2C_Master_Receive(&hi2c1, CAP1293_READ, &product_id, 1U, CAP1293_TIMEOUT);
00001e  2301              MOVS     r3,#1
000020  aa02              ADD      r2,sp,#8
000022  2151              MOVS     r1,#0x51
000024  4825              LDR      r0,|L1.188|
000026  9400              STR      r4,[sp,#0]
000028  f7fffffe          BL       HAL_I2C_Master_Receive
;;;873    	reg_wr[0] = CAP1293_MANUFACTURER_ID_REG;
00002c  20fe              MOVS     r0,#0xfe
00002e  f88d0004          STRB     r0,[sp,#4]
;;;874    	HAL_I2C_Master_Transmit(&hi2c1, CAP1293_WRITE, reg_wr, 1U, CAP1293_TIMEOUT);
000032  2301              MOVS     r3,#1
000034  aa01              ADD      r2,sp,#4
000036  2150              MOVS     r1,#0x50
000038  4820              LDR      r0,|L1.188|
00003a  9400              STR      r4,[sp,#0]
00003c  f7fffffe          BL       HAL_I2C_Master_Transmit
;;;875    	HAL_I2C_Master_Receive(&hi2c1, CAP1293_READ, &vendor_id, 1U, CAP1293_TIMEOUT);
000040  2301              MOVS     r3,#1
000042  aa03              ADD      r2,sp,#0xc
000044  2151              MOVS     r1,#0x51
000046  481d              LDR      r0,|L1.188|
000048  9400              STR      r4,[sp,#0]
00004a  f7fffffe          BL       HAL_I2C_Master_Receive
;;;876    	
;;;877    	if((product_id == CAP1293_PRODUCT_ID) && (vendor_id == CAP1293_VENDOR_ID)) 
00004e  f89d1008          LDRB     r1,[sp,#8]
;;;878    	{
;;;879    		CAP1293_SensorPresent();
000052  481b              LDR      r0,|L1.192|
000054  296f              CMP      r1,#0x6f              ;877
000056  d103              BNE      |L1.96|
000058  f89d100c          LDRB     r1,[sp,#0xc]          ;877
00005c  295d              CMP      r1,#0x5d              ;877
00005e  d004              BEQ      |L1.106|
                  |L1.96|
;;;880    		CAP1293_WriteRegister(CAP1293_MULTIPLE_TOUCH_CONFIGURATION_REG, 0x00U);
;;;881    		CAP1293_WriteRegister(CAP1293_SENSOR_INPUT_ENABLE_REG, 0x05U);
;;;882    		CAP1293_WriteRegister(CAP1293_INTERRUPT_ENABLE_REG, 0x05U);
;;;883    		CAP1293_WriteRegister(CAP1293_CONFIGURATION_2_REG, 0x40U);
;;;884    		CAP1293_WriteRegister(CAP1293_REPEAT_RATE_ENABLE_REG, 0x00U);
;;;885    		CAP1293_WriteRegister(CAP1293_SINGLE_GUARD_ENABLE_REG, 0x05U);
;;;886    		CAP1293_WriteRegister(CAP1293_SENSITIVITY_CONTROL_REG, 0x0FU);
;;;887    		CAP1293_WriteRegister(CAP1293_CALIBRATION_SENSITIVITY_CONFIG_REG, 0x00U);
;;;888    		CAP1293_WriteRegister(CAP1293_MAIN_CONTROL_REG, 0x00U);
;;;889    	}
;;;890    	else CAP1293_SensorNotPresent();
000060  7ac1              LDRB     r1,[r0,#0xb]  ; din_cap_sen
000062  f0210180          BIC      r1,r1,#0x80
000066  72c1              STRB     r1,[r0,#0xb]
;;;891    }
000068  bd1f              POP      {r0-r4,pc}
                  |L1.106|
00006a  7ac1              LDRB     r1,[r0,#0xb]          ;879  ; din_cap_sen
00006c  f0410180          ORR      r1,r1,#0x80           ;879
000070  72c1              STRB     r1,[r0,#0xb]          ;879
000072  2100              MOVS     r1,#0                 ;880
000074  202a              MOVS     r0,#0x2a              ;880
000076  f7fffffe          BL       CAP1293_WriteRegister
00007a  2105              MOVS     r1,#5                 ;881
00007c  2021              MOVS     r0,#0x21              ;881
00007e  f7fffffe          BL       CAP1293_WriteRegister
000082  2105              MOVS     r1,#5                 ;882
000084  2027              MOVS     r0,#0x27              ;882
000086  f7fffffe          BL       CAP1293_WriteRegister
00008a  2140              MOVS     r1,#0x40              ;883
00008c  2044              MOVS     r0,#0x44              ;883
00008e  f7fffffe          BL       CAP1293_WriteRegister
000092  2100              MOVS     r1,#0                 ;884
000094  2028              MOVS     r0,#0x28              ;884
000096  f7fffffe          BL       CAP1293_WriteRegister
00009a  2105              MOVS     r1,#5                 ;885
00009c  2029              MOVS     r0,#0x29              ;885
00009e  f7fffffe          BL       CAP1293_WriteRegister
0000a2  210f              MOVS     r1,#0xf               ;886
0000a4  201f              MOVS     r0,#0x1f              ;886
0000a6  f7fffffe          BL       CAP1293_WriteRegister
0000aa  2100              MOVS     r1,#0                 ;887
0000ac  2080              MOVS     r0,#0x80              ;887
0000ae  f7fffffe          BL       CAP1293_WriteRegister
0000b2  2100              MOVS     r1,#0                 ;888
0000b4  4608              MOV      r0,r1                 ;888
0000b6  f7fffffe          BL       CAP1293_WriteRegister
0000ba  bd1f              POP      {r0-r4,pc}
;;;892    
                          ENDP

                  |L1.188|
                          DCD      hi2c1
                  |L1.192|
                          DCD      ||.data||

                          AREA ||i.CAP1293_ReadRegister||, CODE, READONLY, ALIGN=2

                  CAP1293_ReadRegister PROC
;;;893    
;;;894    uint8_t CAP1293_ReadRegister(uint8_t register_address)
000000  b511              PUSH     {r0,r4,lr}
;;;895    {
000002  b083              SUB      sp,sp,#0xc
;;;896    	uint8_t ret_val;
;;;897    	
;;;898    	HAL_I2C_Master_Transmit(&hi2c1, CAP1293_WRITE, &register_address, 1U, CAP1293_TIMEOUT);
000004  240a              MOVS     r4,#0xa
000006  2301              MOVS     r3,#1
000008  aa03              ADD      r2,sp,#0xc
00000a  2150              MOVS     r1,#0x50
00000c  4807              LDR      r0,|L2.44|
00000e  9400              STR      r4,[sp,#0]
000010  f7fffffe          BL       HAL_I2C_Master_Transmit
;;;899    	HAL_I2C_Master_Receive(&hi2c1, CAP1293_READ, &ret_val, 1U, CAP1293_TIMEOUT);
000014  2301              MOVS     r3,#1
000016  aa02              ADD      r2,sp,#8
000018  2151              MOVS     r1,#0x51
00001a  4804              LDR      r0,|L2.44|
00001c  9400              STR      r4,[sp,#0]
00001e  f7fffffe          BL       HAL_I2C_Master_Receive
;;;900    	return(ret_val);
000022  f89d0008          LDRB     r0,[sp,#8]
;;;901    }
000026  b004              ADD      sp,sp,#0x10
000028  bd10              POP      {r4,pc}
;;;902    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      hi2c1

                          AREA ||i.CAP1293_WriteRegister||, CODE, READONLY, ALIGN=2

                  CAP1293_WriteRegister PROC
;;;903    
;;;904    void CAP1293_WriteRegister(uint8_t register_address, uint8_t register_data)
000000  b51c              PUSH     {r2-r4,lr}
;;;905    {
;;;906    	uint8_t reg_val[2];
;;;907    	
;;;908    	reg_val[0] = register_address;
000002  f88d0004          STRB     r0,[sp,#4]
;;;909    	reg_val[1] = register_data;
000006  f88d1005          STRB     r1,[sp,#5]
;;;910    	HAL_I2C_Master_Transmit(&hi2c1, CAP1293_WRITE, reg_val, 2U, CAP1293_TIMEOUT);
00000a  200a              MOVS     r0,#0xa
00000c  9000              STR      r0,[sp,#0]
00000e  2302              MOVS     r3,#2
000010  aa01              ADD      r2,sp,#4
000012  2150              MOVS     r1,#0x50
000014  4801              LDR      r0,|L3.28|
000016  f7fffffe          BL       HAL_I2C_Master_Transmit
;;;911    }
00001a  bd1c              POP      {r2-r4,pc}
;;;912    
                          ENDP

                  |L3.28|
                          DCD      hi2c1

                          AREA ||i.DIO_DebounceDigitalInput||, CODE, READONLY, ALIGN=2

                  DIO_DebounceDigitalInput PROC
;;;226    
;;;227    void DIO_DebounceDigitalInput(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;228    {
000004  b085              SUB      sp,sp,#0x14
;;;229        uint32_t tmp_add;
;;;230        uint8_t ee_buff[4];
;;;231        RTC_TimeTypeDef time_dio;
;;;232        RTC_DateTypeDef date_dio;
;;;233    	static uint8_t din_0_timer = 0U;
;;;234    	static uint8_t din_1_timer = 0U;
;;;235    	static uint8_t din_2_timer = 0U;
;;;236    	static uint8_t din_3_timer = 0U;
;;;237    	static uint8_t din_4_timer = 0U;
;;;238    	static uint8_t din_5_timer = 0U;
;;;239    	static uint8_t din_6_timer = 0U;
;;;240    	static uint8_t din_7_timer = 0U;
;;;241        static uint32_t entry_door_pcnt = 0U;
;;;242        static uint32_t entry_door_timer = 0U;
;;;243        static uint32_t handmaid_sw_time = 0U;
;;;244        static uint32_t handmaid_sw_timer = 0U;
;;;245        static uint32_t door_bell_sw_time = 0U;
;;;246        static uint32_t door_bell_sw_timer = 0U;
;;;247    	/**
;;;248    	*   debounce digital input 0 state 
;;;249    	*/
;;;250    	if((din_state & (1U << 0)) && (!(din_0_7 & (1U << 0))))	// CARD STACKER STATE
000006  48f9              LDR      r0,|L4.1004|
000008  7a81              LDRB     r1,[r0,#0xa]  ; din_state
00000a  4602              MOV      r2,r0
00000c  07cd              LSLS     r5,r1,#31
;;;251    	{  
;;;252    		if(++din_0_timer >= INPUT_DEBOUNCE_CNT)
00000e  7851              LDRB     r1,[r2,#1]
;;;253    		{        
;;;254    			din_0_timer = 0U;           // reset bit 0 debounce counter
;;;255    			din_0_7 |= (1U << 0);       // change input register bit 0 state
;;;256    			
;;;257    			if(ROOM_Status != ROOM_HANDMAID_IN) DoNotDisturbModul_On();			
000010  4cf7              LDR      r4,|L4.1008|
000012  f1010101          ADD      r1,r1,#1              ;252
000016  b2cb              UXTB     r3,r1                 ;252
000018  7821              LDRB     r1,[r4,#0]
;;;258    			if(!IsBalconyDoorSensorActiv()) HVAC_Contactor_On();
;;;259    			LED_RoomStatusRed_On();					
00001a  7b52              LDRB     r2,[r2,#0xd]
00001c  f04f0400          MOV      r4,#0
000020  d002              BEQ      |L4.40|
000022  7a45              LDRB     r5,[r0,#9]            ;250  ; din_0_7
000024  07ed              LSLS     r5,r5,#31             ;250
000026  d003              BEQ      |L4.48|
                  |L4.40|
;;;260    		}   
;;;261    	} 
;;;262    	else if((!(din_state & (1U << 0))) && (din_0_7 & (1U << 0)))
000028  7a85              LDRB     r5,[r0,#0xa]  ; din_state
00002a  07ed              LSLS     r5,r5,#31
00002c  d019              BEQ      |L4.98|
00002e  e031              B        |L4.148|
                  |L4.48|
000030  7043              STRB     r3,[r0,#1]            ;252
000032  2b64              CMP      r3,#0x64              ;252
000034  d32f              BCC      |L4.150|
000036  7044              STRB     r4,[r0,#1]            ;254
000038  7a43              LDRB     r3,[r0,#9]            ;255  ; din_0_7
00003a  f0430301          ORR      r3,r3,#1              ;255
00003e  7243              STRB     r3,[r0,#9]            ;255
000040  2908              CMP      r1,#8                 ;257
000042  d003              BEQ      |L4.76|
000044  7b01              LDRB     r1,[r0,#0xc]          ;257  ; dout_0_7
000046  f0410102          ORR      r1,r1,#2              ;257
00004a  7301              STRB     r1,[r0,#0xc]          ;257
                  |L4.76|
00004c  7a41              LDRB     r1,[r0,#9]            ;258  ; din_0_7
00004e  0689              LSLS     r1,r1,#26             ;258
000050  d503              BPL      |L4.90|
000052  7b01              LDRB     r1,[r0,#0xc]          ;258  ; dout_0_7
000054  f0410110          ORR      r1,r1,#0x10           ;258
000058  7301              STRB     r1,[r0,#0xc]          ;258
                  |L4.90|
00005a  f0420102          ORR      r1,r2,#2              ;259
00005e  7341              STRB     r1,[r0,#0xd]          ;259
000060  e019              B        |L4.150|
                  |L4.98|
000062  7a45              LDRB     r5,[r0,#9]  ; din_0_7
000064  07ed              LSLS     r5,r5,#31
000066  d015              BEQ      |L4.148|
;;;263    	{
;;;264    		if(++din_0_timer >= INPUT_DEBOUNCE_CNT)
000068  7043              STRB     r3,[r0,#1]
00006a  2b64              CMP      r3,#0x64
00006c  d313              BCC      |L4.150|
;;;265    		{        
;;;266                din_0_timer = 0U;           // reset bit 0 debounce counter
00006e  7044              STRB     r4,[r0,#1]
;;;267                din_0_7 &= (~(1U << 0));    // change input register bit 0 state			
000070  7a43              LDRB     r3,[r0,#9]  ; din_0_7
000072  f0230301          BIC      r3,r3,#1
000076  7243              STRB     r3,[r0,#9]
;;;268    			
;;;269    			HVAC_Contactor_Off();
000078  7b03              LDRB     r3,[r0,#0xc]  ; dout_0_7
00007a  f0230310          BIC      r3,r3,#0x10
00007e  7303              STRB     r3,[r0,#0xc]
;;;270    			if(ROOM_Status == ROOM_BUSY) DoNotDisturbModul_Off();
000080  2902              CMP      r1,#2
000082  d103              BNE      |L4.140|
000084  7b01              LDRB     r1,[r0,#0xc]  ; dout_0_7
000086  f0210102          BIC      r1,r1,#2
00008a  7301              STRB     r1,[r0,#0xc]
                  |L4.140|
;;;271    			LED_RoomStatusRed_Off();			
00008c  f0220102          BIC      r1,r2,#2
000090  7341              STRB     r1,[r0,#0xd]
000092  e000              B        |L4.150|
                  |L4.148|
;;;272    		}
;;;273    	} 
;;;274    	else 
;;;275    	{
;;;276    		din_0_timer = 0U;               // reset bit 0 debounce counter 
000094  7044              STRB     r4,[r0,#1]
                  |L4.150|
;;;277    		
;;;278    	}// End of check if din 0 state changed
;;;279    	/**
;;;280    	*   debounce digital input 1 state 
;;;281    	*/
;;;282    	if((din_state & (1U << 1)) && (!(din_0_7 & (1U << 1))))	// SOS ALARM TRIGGER SWITCH STATE
000096  7a81              LDRB     r1,[r0,#0xa]  ; din_state
;;;283    	{        
;;;284    		if(++din_1_timer >= FAST_INPUT_DEBOUNCE_CNT)
;;;285    		{        
;;;286    			din_1_timer = 0U; 	        // reset bit 1 debounce counter
;;;287    			din_0_7 |= (1U << 1);       // change input register bit 1 state            
;;;288    		}       
;;;289    	} 
;;;290    	else if((!(din_state & (1U << 1))) && (din_0_7 & (1U << 1)))
;;;291    	{
;;;292    		if(++din_1_timer >= FAST_INPUT_DEBOUNCE_CNT)
;;;293    		{        
;;;294    			din_1_timer = 0U; 	        // reset bit 1 debounce counter
;;;295    			din_0_7 &= (~(1U << 1));    // change input register bit 1 state
;;;296                
;;;297    			if(!IsSosAlarmActiv())
;;;298    			{
;;;299    				SosAlarm_On();
;;;300    				DISPLAY_SosAlarmImage();
000098  4ad6              LDR      r2,|L4.1012|
00009a  078b              LSLS     r3,r1,#30             ;282
00009c  49d3              LDR      r1,|L4.1004|
00009e  7889              LDRB     r1,[r1,#2]            ;284
0000a0  f1010101          ADD      r1,r1,#1              ;284
0000a4  b2c9              UXTB     r1,r1                 ;284
0000a6  d50b              BPL      |L4.192|
0000a8  7a43              LDRB     r3,[r0,#9]            ;282  ; din_0_7
0000aa  079b              LSLS     r3,r3,#30             ;282
0000ac  d408              BMI      |L4.192|
0000ae  7081              STRB     r1,[r0,#2]            ;284
0000b0  2932              CMP      r1,#0x32              ;284
0000b2  d324              BCC      |L4.254|
0000b4  7084              STRB     r4,[r0,#2]            ;286
0000b6  7a41              LDRB     r1,[r0,#9]            ;287  ; din_0_7
0000b8  f0410102          ORR      r1,r1,#2              ;287
0000bc  7241              STRB     r1,[r0,#9]            ;287
0000be  e01e              B        |L4.254|
                  |L4.192|
0000c0  7a83              LDRB     r3,[r0,#0xa]          ;290  ; din_state
0000c2  079b              LSLS     r3,r3,#30             ;290
0000c4  d41a              BMI      |L4.252|
0000c6  7a43              LDRB     r3,[r0,#9]            ;290  ; din_0_7
0000c8  079b              LSLS     r3,r3,#30             ;290
0000ca  d517              BPL      |L4.252|
0000cc  7081              STRB     r1,[r0,#2]            ;292
0000ce  2932              CMP      r1,#0x32              ;292
0000d0  d315              BCC      |L4.254|
0000d2  7084              STRB     r4,[r0,#2]            ;294
0000d4  7a41              LDRB     r1,[r0,#9]            ;295  ; din_0_7
0000d6  f0210102          BIC      r1,r1,#2              ;295
0000da  7241              STRB     r1,[r0,#9]            ;295
0000dc  6ac1              LDR      r1,[r0,#0x2c]         ;297  ; dio_flags
0000de  0709              LSLS     r1,r1,#28             ;297
0000e0  d40d              BMI      |L4.254|
0000e2  6ac1              LDR      r1,[r0,#0x2c]         ;299  ; dio_flags
0000e4  f0410108          ORR      r1,r1,#8              ;299
0000e8  62c1              STR      r1,[r0,#0x2c]         ;299  ; dio_flags
0000ea  6811              LDR      r1,[r2,#0]  ; display_flags
0000ec  f0410120          ORR      r1,r1,#0x20
0000f0  6011              STR      r1,[r2,#0]  ; display_flags
0000f2  6811              LDR      r1,[r2,#0]  ; display_flags
0000f4  f0414100          ORR      r1,r1,#0x80000000
0000f8  6011              STR      r1,[r2,#0]  ; display_flags
0000fa  e000              B        |L4.254|
                  |L4.252|
;;;301    			}			
;;;302    		}        
;;;303    	} 
;;;304    	else 
;;;305    	{
;;;306    		din_1_timer = 0U;     		    // reset bit 1 debounce counter
0000fc  7084              STRB     r4,[r0,#2]
                  |L4.254|
;;;307            
;;;308    	}// End of check if din 1 state changed
;;;309    	/**
;;;310    	*   debounce digital input 2 state 
;;;311    	*/
;;;312    	if((din_state & (1U << 2)) && (!(din_0_7 & (1U << 2))))	// SOS ALARM RESET SWITCH STATE
0000fe  7a81              LDRB     r1,[r0,#0xa]  ; din_state
;;;313    	{
;;;314    		if(++din_2_timer >= FAST_INPUT_DEBOUNCE_CNT)
;;;315    		{
;;;316    			din_2_timer = 0U;           // reset bit 2 debounce counter
;;;317    			din_0_7 |= (1U << 2);       // change input register bit 2 state
;;;318    			
;;;319    			if(IsSosAlarmActiv())
;;;320    			{
;;;321    				SosAlarm_Off();
;;;322    				SignalBuzzer = BUZZ_OFF;
000100  4fbd              LDR      r7,|L4.1016|
000102  074b              LSLS     r3,r1,#29             ;312
000104  49b9              LDR      r1,|L4.1004|
000106  78c9              LDRB     r1,[r1,#3]            ;314
000108  f1010101          ADD      r1,r1,#1              ;314
00010c  b2c9              UXTB     r1,r1                 ;314
00010e  d51b              BPL      |L4.328|
000110  7a43              LDRB     r3,[r0,#9]            ;312  ; din_0_7
000112  075b              LSLS     r3,r3,#29             ;312
000114  d418              BMI      |L4.328|
000116  70c1              STRB     r1,[r0,#3]            ;314
000118  2932              CMP      r1,#0x32              ;314
00011a  d325              BCC      |L4.360|
00011c  70c4              STRB     r4,[r0,#3]            ;316
00011e  7a41              LDRB     r1,[r0,#9]            ;317  ; din_0_7
000120  f0410104          ORR      r1,r1,#4              ;317
000124  7241              STRB     r1,[r0,#9]            ;317
000126  6ac1              LDR      r1,[r0,#0x2c]         ;319  ; dio_flags
000128  0709              LSLS     r1,r1,#28             ;319
00012a  d51d              BPL      |L4.360|
00012c  6ac1              LDR      r1,[r0,#0x2c]         ;321  ; dio_flags
00012e  f0210108          BIC      r1,r1,#8              ;321
000132  62c1              STR      r1,[r0,#0x2c]         ;321  ; dio_flags
000134  703c              STRB     r4,[r7,#0]
;;;323    				DISPLAY_SosAlarmImageDelete();
000136  6811              LDR      r1,[r2,#0]  ; display_flags
000138  f0210120          BIC      r1,r1,#0x20
00013c  6011              STR      r1,[r2,#0]  ; display_flags
00013e  6811              LDR      r1,[r2,#0]  ; display_flags
000140  f0414100          ORR      r1,r1,#0x80000000
000144  6011              STR      r1,[r2,#0]  ; display_flags
000146  e00f              B        |L4.360|
                  |L4.328|
;;;324    			}			
;;;325    		}
;;;326    	} 
;;;327    	else if((!(din_state & (1U << 2))) && (din_0_7 & (1U << 2)))
000148  7a83              LDRB     r3,[r0,#0xa]  ; din_state
00014a  075b              LSLS     r3,r3,#29
00014c  d40b              BMI      |L4.358|
00014e  7a43              LDRB     r3,[r0,#9]  ; din_0_7
000150  075b              LSLS     r3,r3,#29
000152  d508              BPL      |L4.358|
;;;328    	{
;;;329    		if(++din_2_timer >= FAST_INPUT_DEBOUNCE_CNT)
000154  70c1              STRB     r1,[r0,#3]
000156  2932              CMP      r1,#0x32
000158  d306              BCC      |L4.360|
;;;330    		{
;;;331    			din_2_timer = 0U; 	        // reset bit 2 debounce counter
00015a  70c4              STRB     r4,[r0,#3]
;;;332    			din_0_7 &= (~(1U << 2));    // change input register bit 2 state
00015c  7a41              LDRB     r1,[r0,#9]  ; din_0_7
00015e  f0210104          BIC      r1,r1,#4
000162  7241              STRB     r1,[r0,#9]
000164  e000              B        |L4.360|
                  |L4.358|
;;;333    		}
;;;334    	} 
;;;335    	else 
;;;336    	{
;;;337    		din_2_timer = 0U;     	        // reset bit 2 debounce counter
000166  70c4              STRB     r4,[r0,#3]
                  |L4.360|
;;;338    
;;;339    	}// End of check if din 2 state changed           
;;;340    	/**
;;;341    	*   debounce digital input 3 state 
;;;342    	*/
;;;343    	if((din_state & (1U << 3)) && (!(din_0_7 & (1U << 3))))	// HANDMAID CALL STATE
000168  7a81              LDRB     r1,[r0,#0xa]  ; din_state
00016a  070b              LSLS     r3,r1,#28
00016c  499f              LDR      r1,|L4.1004|
;;;344    	{
;;;345    		if(++din_3_timer >= INPUT_DEBOUNCE_CNT)
00016e  7909              LDRB     r1,[r1,#4]
000170  f1010101          ADD      r1,r1,#1
000174  b2c9              UXTB     r1,r1
000176  d516              BPL      |L4.422|
000178  7a43              LDRB     r3,[r0,#9]            ;343  ; din_0_7
00017a  071b              LSLS     r3,r3,#28             ;343
00017c  d413              BMI      |L4.422|
00017e  7101              STRB     r1,[r0,#4]
000180  2964              CMP      r1,#0x64
000182  d328              BCC      |L4.470|
;;;346    		{
;;;347    			din_3_timer = 0U;           // reset bit 3 debounce counter
000184  7104              STRB     r4,[r0,#4]
;;;348    			din_0_7 |= (1U << 3);       // change input register bit 3 state
000186  7a41              LDRB     r1,[r0,#9]  ; din_0_7
000188  f0410108          ORR      r1,r1,#8
00018c  7241              STRB     r1,[r0,#9]
;;;349    			
;;;350    			if (IsHandmaidCallActiv())
00018e  6ac1              LDR      r1,[r0,#0x2c]  ; dio_flags
000190  0689              LSLS     r1,r1,#26
000192  d520              BPL      |L4.470|
;;;351    			{
;;;352    				HandmaidCall_Off();
000194  6ac1              LDR      r1,[r0,#0x2c]  ; dio_flags
000196  f0210120          BIC      r1,r1,#0x20
00019a  62c1              STR      r1,[r0,#0x2c]  ; dio_flags
;;;353    				LED_HandmaidGreen_Off();
00019c  7b41              LDRB     r1,[r0,#0xd]  ; hc595_dout
00019e  f0210101          BIC      r1,r1,#1
0001a2  7341              STRB     r1,[r0,#0xd]
0001a4  e017              B        |L4.470|
                  |L4.422|
;;;354    			}			
;;;355    		}  
;;;356    	} 
;;;357    	else if((!(din_state & (1U << 3))) && (din_0_7 & (1U << 3)))
0001a6  7a83              LDRB     r3,[r0,#0xa]  ; din_state
0001a8  071b              LSLS     r3,r3,#28
0001aa  d413              BMI      |L4.468|
0001ac  7a43              LDRB     r3,[r0,#9]  ; din_0_7
0001ae  071b              LSLS     r3,r3,#28
0001b0  d510              BPL      |L4.468|
;;;358    	{
;;;359    		if(++din_3_timer >= INPUT_DEBOUNCE_CNT)
0001b2  7101              STRB     r1,[r0,#4]
0001b4  2964              CMP      r1,#0x64
0001b6  d30e              BCC      |L4.470|
;;;360    		{        
;;;361    			din_3_timer = 0U;           // reset bit 3 debounce counter
0001b8  7104              STRB     r4,[r0,#4]
;;;362    			din_0_7 &= (~(1U << 3));    // change input register bit 3 state
0001ba  7a41              LDRB     r1,[r0,#9]  ; din_0_7
0001bc  f0210108          BIC      r1,r1,#8
0001c0  7241              STRB     r1,[r0,#9]
;;;363    			HandmaidCall_On();
0001c2  6ac1              LDR      r1,[r0,#0x2c]  ; dio_flags
0001c4  f0410120          ORR      r1,r1,#0x20
0001c8  62c1              STR      r1,[r0,#0x2c]  ; dio_flags
;;;364    			LED_HandmaidGreen_On();
0001ca  7b41              LDRB     r1,[r0,#0xd]  ; hc595_dout
0001cc  f0410101          ORR      r1,r1,#1
0001d0  7341              STRB     r1,[r0,#0xd]
0001d2  e000              B        |L4.470|
                  |L4.468|
;;;365    		}          
;;;366    	} 
;;;367    	else 
;;;368    	{
;;;369    		din_3_timer = 0U;     	        // reset bit 3 debounce counter
0001d4  7104              STRB     r4,[r0,#4]
                  |L4.470|
;;;370    		  
;;;371    	}// End of check if din 3 state changed
;;;372    	/**
;;;373    	*   debounce digital input 4 state 
;;;374    	*/
;;;375    	if((din_state & (1U << 4)) && (!(din_0_7 & (1U << 4))))	// MINIBAR SENSOR STATE
0001d6  7a81              LDRB     r1,[r0,#0xa]  ; din_state
;;;376    	{            
;;;377    		if(++din_4_timer >= FAST_INPUT_DEBOUNCE_CNT)
;;;378    		{        
;;;379    			din_4_timer = 0U; 	            // reset bit 4 debounce counter
;;;380    			din_0_7 |= (1U << 4);           // change input register bit 4 state
;;;381    		}        
;;;382    	} 
;;;383    	else if((!(din_state & (1U << 4))) && (din_0_7 & (1U << 4)))
;;;384    	{
;;;385    		if(++din_4_timer >= FAST_INPUT_DEBOUNCE_CNT)
;;;386    		{        
;;;387    			din_4_timer = 0U;               // reset bit 4 debounce counter
;;;388    			din_0_7 &= (~(1U << 4));        // change input register bit 4 state
;;;389    			
;;;390    			if (servisMenu.mode < 2U) 
0001d8  4e88              LDR      r6,|L4.1020|
0001da  06cd              LSLS     r5,r1,#27             ;375
0001dc  4983              LDR      r1,|L4.1004|
0001de  7949              LDRB     r1,[r1,#5]            ;377
0001e0  f1010101          ADD      r1,r1,#1              ;377
0001e4  b2cb              UXTB     r3,r1                 ;377
0001e6  7831              LDRB     r1,[r6,#0]
0001e8  d50b              BPL      |L4.514|
0001ea  7a45              LDRB     r5,[r0,#9]            ;375  ; din_0_7
0001ec  06ed              LSLS     r5,r5,#27             ;375
0001ee  d408              BMI      |L4.514|
0001f0  7143              STRB     r3,[r0,#5]            ;377
0001f2  2b32              CMP      r3,#0x32              ;377
0001f4  d31f              BCC      |L4.566|
0001f6  7144              STRB     r4,[r0,#5]            ;379
0001f8  7a43              LDRB     r3,[r0,#9]            ;380  ; din_0_7
0001fa  f0430310          ORR      r3,r3,#0x10           ;380
0001fe  7243              STRB     r3,[r0,#9]            ;380
000200  e019              B        |L4.566|
                  |L4.514|
000202  7a85              LDRB     r5,[r0,#0xa]          ;383  ; din_state
000204  06ed              LSLS     r5,r5,#27             ;383
000206  d415              BMI      |L4.564|
000208  7a45              LDRB     r5,[r0,#9]            ;383  ; din_0_7
00020a  06ed              LSLS     r5,r5,#27             ;383
00020c  d512              BPL      |L4.564|
00020e  7143              STRB     r3,[r0,#5]            ;385
000210  2b32              CMP      r3,#0x32              ;385
000212  d310              BCC      |L4.566|
000214  7144              STRB     r4,[r0,#5]            ;387
000216  7a43              LDRB     r3,[r0,#9]            ;388  ; din_0_7
000218  f0230310          BIC      r3,r3,#0x10           ;388
00021c  7243              STRB     r3,[r0,#9]            ;388
00021e  2902              CMP      r1,#2
000220  d209              BCS      |L4.566|
;;;391    			{
;;;392    				DISPLAY_MinibarUsedImage();
000222  6813              LDR      r3,[r2,#0]  ; display_flags
000224  f4435300          ORR      r3,r3,#0x2000
000228  6013              STR      r3,[r2,#0]  ; display_flags
00022a  6813              LDR      r3,[r2,#0]  ; display_flags
00022c  f0434300          ORR      r3,r3,#0x80000000
000230  6013              STR      r3,[r2,#0]  ; display_flags
000232  e000              B        |L4.566|
                  |L4.564|
;;;393    			}
;;;394    		}            
;;;395    	} 
;;;396    	else 
;;;397    	{
;;;398    		din_4_timer = 0U;     	            // reset bit 4 debounce counter
000234  7144              STRB     r4,[r0,#5]
                  |L4.566|
;;;399                
;;;400    	}// End of check if din 4 state changed
;;;401    	/**
;;;402    	*   debounce digital input 5 state 
;;;403    	*/
;;;404    	if((din_state & (1U << 5)) && (!(din_0_7 & (1U << 5))))	// BALCONY DOOR SWITCH STATE
000236  4605              MOV      r5,r0
000238  7a80              LDRB     r0,[r0,#0xa]  ; din_state
00023a  ea5f6c80          LSLS     r12,r0,#26
00023e  486b              LDR      r0,|L4.1004|
;;;405    	{
;;;406    		if(++din_5_timer >= INPUT_DEBOUNCE_CNT)
000240  7980              LDRB     r0,[r0,#6]
000242  f1000001          ADD      r0,r0,#1
000246  b2c3              UXTB     r3,r0
000248  d512              BPL      |L4.624|
00024a  7a68              LDRB     r0,[r5,#9]            ;404  ; din_0_7
00024c  0680              LSLS     r0,r0,#26             ;404
00024e  d40f              BMI      |L4.624|
000250  71ab              STRB     r3,[r5,#6]
000252  2b64              CMP      r3,#0x64
000254  d323              BCC      |L4.670|
;;;407    		{
;;;408    			din_5_timer = 0U; 	            // reset bit 5 debounce counter
000256  71ac              STRB     r4,[r5,#6]
;;;409    			din_0_7 |= (1U << 5);           // change input register bit 5 state
000258  7a68              LDRB     r0,[r5,#9]  ; din_0_7
00025a  f0400020          ORR      r0,r0,#0x20
00025e  7268              STRB     r0,[r5,#9]
;;;410    			if(IsIndorCardReaderActiv()) HVAC_Contactor_On();			
000260  7a68              LDRB     r0,[r5,#9]  ; din_0_7
000262  07c0              LSLS     r0,r0,#31
000264  d01b              BEQ      |L4.670|
000266  7b28              LDRB     r0,[r5,#0xc]  ; dout_0_7
000268  f0400010          ORR      r0,r0,#0x10
00026c  7328              STRB     r0,[r5,#0xc]
00026e  e016              B        |L4.670|
                  |L4.624|
;;;411    	}        
;;;412    	} 
;;;413    	else if((!(din_state & (1U << 5))) && (din_0_7 & (1U << 5)))
000270  7aa8              LDRB     r0,[r5,#0xa]  ; din_state
000272  0680              LSLS     r0,r0,#26
000274  d412              BMI      |L4.668|
000276  f895c009          LDRB     r12,[r5,#9]  ; din_0_7
00027a  4628              MOV      r0,r5
00027c  ea5f6c8c          LSLS     r12,r12,#26
000280  d50c              BPL      |L4.668|
;;;414    	{
;;;415    		if(++din_5_timer >= INPUT_DEBOUNCE_CNT)
000282  7183              STRB     r3,[r0,#6]
000284  2b64              CMP      r3,#0x64
000286  d30a              BCC      |L4.670|
;;;416    		{        
;;;417    			din_5_timer = 0U; 	            // reset bit 5 debounce counter
000288  7184              STRB     r4,[r0,#6]
;;;418    			din_0_7 &= (~(1U << 5));        // change input register bit 5 state
00028a  7a43              LDRB     r3,[r0,#9]  ; din_0_7
00028c  f0230320          BIC      r3,r3,#0x20
000290  7243              STRB     r3,[r0,#9]
;;;419    			HVAC_Contactor_Off();
000292  7b03              LDRB     r3,[r0,#0xc]  ; dout_0_7
000294  f0230310          BIC      r3,r3,#0x10
000298  7303              STRB     r3,[r0,#0xc]
00029a  e000              B        |L4.670|
                  |L4.668|
;;;420    		}        
;;;421    	} 
;;;422    	else 
;;;423    	{
;;;424    		din_5_timer = 0U;     	            // reset bit 5 debounce counter
00029c  71ac              STRB     r4,[r5,#6]
                  |L4.670|
;;;425            
;;;426    	}// End of check if din 5 state changed
;;;427    	/**
;;;428    	*   debounce digital input 6 state 
;;;429    	*/
;;;430    	if((din_state & (1U << 6)) && (!(din_0_7 & (1U << 6))))	// DO NOT DISTURB SWITCH STATE
00029e  7aa8              LDRB     r0,[r5,#0xa]  ; din_state
0002a0  0643              LSLS     r3,r0,#25
0002a2  4852              LDR      r0,|L4.1004|
;;;431    	{            
;;;432    		if(++din_6_timer >= INPUT_DEBOUNCE_CNT)
0002a4  79c0              LDRB     r0,[r0,#7]
0002a6  f1000001          ADD      r0,r0,#1
0002aa  b2c0              UXTB     r0,r0
0002ac  d51a              BPL      |L4.740|
0002ae  7a6b              LDRB     r3,[r5,#9]            ;430  ; din_0_7
0002b0  065b              LSLS     r3,r3,#25             ;430
0002b2  d417              BMI      |L4.740|
0002b4  71e8              STRB     r0,[r5,#7]
0002b6  2864              CMP      r0,#0x64
0002b8  d330              BCC      |L4.796|
;;;433    		{        
;;;434    			din_6_timer = 0U;               // reset bit 6 debounce counter
0002ba  71ec              STRB     r4,[r5,#7]
;;;435    			din_0_7 |= (1U << 6);           // change input register bit 6 state 
0002bc  7a68              LDRB     r0,[r5,#9]  ; din_0_7
0002be  f0400040          ORR      r0,r0,#0x40
0002c2  7268              STRB     r0,[r5,#9]
;;;436    			
;;;437    			if(IsDonNotDisturbActiv())
0002c4  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
0002c6  07c0              LSLS     r0,r0,#31
0002c8  d028              BEQ      |L4.796|
;;;438    			{
;;;439    				DoNotDisturb_Off();
0002ca  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
0002cc  f0200001          BIC      r0,r0,#1
0002d0  62e8              STR      r0,[r5,#0x2c]  ; dio_flags
;;;440    				DISPLAY_DoNotDisturbImageDelete();
0002d2  6810              LDR      r0,[r2,#0]  ; display_flags
0002d4  f0200010          BIC      r0,r0,#0x10
0002d8  6010              STR      r0,[r2,#0]  ; display_flags
0002da  6810              LDR      r0,[r2,#0]  ; display_flags
0002dc  f0404000          ORR      r0,r0,#0x80000000
0002e0  6010              STR      r0,[r2,#0]  ; display_flags
0002e2  e01b              B        |L4.796|
                  |L4.740|
;;;441    			}		
;;;442    		}        
;;;443    	} 
;;;444    	else if((!(din_state & (1U << 6))) && (din_0_7 & (1U << 6)))
0002e4  7aab              LDRB     r3,[r5,#0xa]  ; din_state
0002e6  065b              LSLS     r3,r3,#25
0002e8  d417              BMI      |L4.794|
0002ea  7a6b              LDRB     r3,[r5,#9]  ; din_0_7
0002ec  065b              LSLS     r3,r3,#25
0002ee  d514              BPL      |L4.794|
;;;445    	{
;;;446     		if(++din_6_timer >= INPUT_DEBOUNCE_CNT)
0002f0  71e8              STRB     r0,[r5,#7]
0002f2  2864              CMP      r0,#0x64
0002f4  d312              BCC      |L4.796|
;;;447    		{        
;;;448    			din_6_timer = 0U;               // reset bit 6 debounce counter
0002f6  71ec              STRB     r4,[r5,#7]
;;;449    			din_0_7 &= (~(1U << 6));        // change input register bit 6 state
0002f8  7a68              LDRB     r0,[r5,#9]  ; din_0_7
0002fa  f0200040          BIC      r0,r0,#0x40
0002fe  7268              STRB     r0,[r5,#9]
;;;450    			DoNotDisturb_On();
000300  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
000302  f0400001          ORR      r0,r0,#1
000306  62e8              STR      r0,[r5,#0x2c]  ; dio_flags
;;;451    			DISPLAY_DoNotDisturbImage();		
000308  6810              LDR      r0,[r2,#0]  ; display_flags
00030a  f0400010          ORR      r0,r0,#0x10
00030e  6010              STR      r0,[r2,#0]  ; display_flags
000310  6810              LDR      r0,[r2,#0]  ; display_flags
000312  f0404000          ORR      r0,r0,#0x80000000
000316  6010              STR      r0,[r2,#0]  ; display_flags
000318  e000              B        |L4.796|
                  |L4.794|
;;;452            }       
;;;453    	} 
;;;454    	else 
;;;455    	{
;;;456    		din_6_timer = 0U;                   // reset bit 6 debounce counter        
00031a  71ec              STRB     r4,[r5,#7]
                  |L4.796|
;;;457    	}
;;;458    	/**
;;;459    	*   debounce digital input 7 state
;;;460    	*/
;;;461    	if((din_state & (1U << 7)) && (!(din_0_7 & (1U << 7))))	// ENTRY DOOR SWITCH STATE
00031c  7aa8              LDRB     r0,[r5,#0xa]  ; din_state
00031e  0602              LSLS     r2,r0,#24
000320  4832              LDR      r0,|L4.1004|
;;;462    	{
;;;463    		if(++din_7_timer >= FAST_INPUT_DEBOUNCE_CNT)
000322  7a00              LDRB     r0,[r0,#8]
000324  f1000001          ADD      r0,r0,#1
000328  b2c0              UXTB     r0,r0
00032a  d50f              BPL      |L4.844|
00032c  7a6a              LDRB     r2,[r5,#9]            ;461  ; din_0_7
00032e  0612              LSLS     r2,r2,#24             ;461
000330  d40c              BMI      |L4.844|
000332  7228              STRB     r0,[r5,#8]
000334  2832              CMP      r0,#0x32
000336  d319              BCC      |L4.876|
;;;464    		{
;;;465    			din_7_timer = 0U;               // reset bit 7 debounce counter
000338  722c              STRB     r4,[r5,#8]
;;;466    			din_0_7 |= (1U << 7);           // change input register bit 7 state
00033a  7a68              LDRB     r0,[r5,#9]  ; din_0_7
00033c  f0400080          ORR      r0,r0,#0x80
000340  7268              STRB     r0,[r5,#9]
;;;467    			EntranceDoorSensorEnabled();
000342  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
000344  f0400010          ORR      r0,r0,#0x10
000348  62e8              STR      r0,[r5,#0x2c]  ; dio_flags
00034a  e00f              B        |L4.876|
                  |L4.844|
;;;468    		}	
;;;469    	} 
;;;470    	else if((!(din_state & (1U << 7))) && (din_0_7 & (1U << 7)))
00034c  7aaa              LDRB     r2,[r5,#0xa]  ; din_state
00034e  0612              LSLS     r2,r2,#24
000350  d40b              BMI      |L4.874|
000352  7a6a              LDRB     r2,[r5,#9]  ; din_0_7
000354  0612              LSLS     r2,r2,#24
000356  d508              BPL      |L4.874|
;;;471    	{
;;;472    		if(++din_7_timer >= FAST_INPUT_DEBOUNCE_CNT)
000358  7228              STRB     r0,[r5,#8]
00035a  2832              CMP      r0,#0x32
00035c  d306              BCC      |L4.876|
;;;473    		{
;;;474    			din_7_timer = 0U;               // reset bit 7 debounce counter
00035e  722c              STRB     r4,[r5,#8]
;;;475    			din_0_7 &= (~(1U << 7));        // change input register bit 7 state
000360  7a68              LDRB     r0,[r5,#9]  ; din_0_7
000362  f0200080          BIC      r0,r0,#0x80
000366  7268              STRB     r0,[r5,#9]
000368  e000              B        |L4.876|
                  |L4.874|
;;;476    		}
;;;477    	} 
;;;478    	else 
;;;479    	{
;;;480            din_7_timer = 0U;                   // reset bit 7 debounce counter
00036a  722c              STRB     r4,[r5,#8]
                  |L4.876|
;;;481    
;;;482        }// End of check if din 7 state changed
;;;483    	/**
;;;484    	*   check door bell taster state and if pressed
;;;485    	*	activate output for defined time period and
;;;486    	*	wait for releaseed switch state for new cycle
;;;487    	*/
;;;488    	if(IsDoorBellSwitchActiv() && !IsDoorBellSwitchPressed())
00036c  7ae8              LDRB     r0,[r5,#0xb]  ; din_cap_sen
;;;489    	{
;;;490    		DoorBellSwitchPressed();
;;;491    		
;;;492    		if(servisMenu.mode < 2U)
;;;493    		{
;;;494    			DoorBell_On();			
;;;495    			SignalBuzzer = BUZZ_DOOR_BELL;			
;;;496    			door_bell_sw_time = DOOR_BELL_SW_ACTIV_TIME;
;;;497                door_bell_sw_timer = HAL_GetTick();
;;;498    		}
;;;499    		else if (servisMenu.mode > 2U)
;;;500    		{
;;;501                door_bell_sw_timer = HAL_GetTick();
;;;502                door_bell_sw_time = DOOR_BELL_SW_MENU_BUTTON_TIME;
;;;503                display_menu_timeout_timer = HAL_GetTick();
00036e  f8df9090          LDR      r9,|L4.1024|
;;;504                display_menu_timeout_time = MENU_TIMEOUT;
000372  f8dfa090          LDR      r10,|L4.1028|
000376  0740              LSLS     r0,r0,#29             ;488
000378  f04f0803          MOV      r8,#3                 ;495
00037c  f2475b30          MOV      r11,#0x7530
000380  d559              BPL      |L4.1078|
000382  6ae8              LDR      r0,[r5,#0x2c]         ;488  ; dio_flags
000384  0780              LSLS     r0,r0,#30             ;488
000386  d456              BMI      |L4.1078|
000388  6ae8              LDR      r0,[r5,#0x2c]         ;490  ; dio_flags
00038a  f0400002          ORR      r0,r0,#2              ;490
00038e  62e8              STR      r0,[r5,#0x2c]         ;490  ; dio_flags
000390  2902              CMP      r1,#2                 ;492
000392  d20c              BCS      |L4.942|
000394  7b28              LDRB     r0,[r5,#0xc]          ;494  ; dout_0_7
000396  f0400008          ORR      r0,r0,#8              ;494
00039a  7328              STRB     r0,[r5,#0xc]          ;494
00039c  f8878000          STRB     r8,[r7,#0]            ;495
0003a0  f44f6004          MOV      r0,#0x840             ;496
0003a4  6268              STR      r0,[r5,#0x24]         ;496  ; door_bell_sw_time
0003a6  f7fffffe          BL       HAL_GetTick
0003aa  62a8              STR      r0,[r5,#0x28]         ;497  ; door_bell_sw_timer
0003ac  e062              B        |L4.1140|
                  |L4.942|
0003ae  d961              BLS      |L4.1140|
0003b0  f7fffffe          BL       HAL_GetTick
0003b4  62a8              STR      r0,[r5,#0x28]         ;501  ; door_bell_sw_timer
0003b6  f240200b          MOV      r0,#0x20b             ;502
0003ba  6268              STR      r0,[r5,#0x24]         ;502  ; door_bell_sw_time
0003bc  f7fffffe          BL       HAL_GetTick
0003c0  f8c90000          STR      r0,[r9,#0]            ;503  ; display_menu_timeout_timer
0003c4  f8cab000          STR      r11,[r10,#0]  ; display_menu_timeout_time
;;;505               
;;;506    			servisMenu.mode = 2U;                       // refresh display
0003c8  2002              MOVS     r0,#2
0003ca  7030              STRB     r0,[r6,#0]
;;;507                servisMenu.selected = !servisMenu.selected; // toggle select-deselect
0003cc  78b0              LDRB     r0,[r6,#2]  ; servisMenu
0003ce  b1e8              CBZ      r0,|L4.1036|
0003d0  2000              MOVS     r0,#0
                  |L4.978|
0003d2  70b0              STRB     r0,[r6,#2]
;;;508                
;;;509    			if(servisMenu.item == 0U) 
0003d4  7870              LDRB     r0,[r6,#1]  ; servisMenu
0003d6  b1d8              CBZ      r0,|L4.1040|
;;;510    			{
;;;511    				servisMenu.mode = 0U;				
;;;512    			}
;;;513    			else if(servisMenu.item == 1U) 
0003d8  2801              CMP      r0,#1
0003da  d01b              BEQ      |L4.1044|
;;;514                {
;;;515                    Error_Handler();
;;;516                }
;;;517                else if(servisMenu.item == 12U)
0003dc  280c              CMP      r0,#0xc
0003de  d01c              BEQ      |L4.1050|
;;;518                {
;;;519                    servisMenu.mode = 0U;
;;;520    				//ONEWIRE_Scan();
;;;521                }
;;;522    			else if(servisMenu.item == 13U)
;;;523                {
;;;524                    servisMenu.mode = 0U;
;;;525                    SYS_ImageUpdateRequestSet();
0003e0  4909              LDR      r1,|L4.1032|
0003e2  280d              CMP      r0,#0xd               ;522
0003e4  d01b              BEQ      |L4.1054|
;;;526                }
;;;527    			else if(servisMenu.item == 14U)
0003e6  280e              CMP      r0,#0xe
0003e8  d01f              BEQ      |L4.1066|
0003ea  e043              B        |L4.1140|
                  |L4.1004|
                          DCD      ||.data||
                  |L4.1008|
                          DCD      ROOM_Status
                  |L4.1012|
                          DCD      display_flags
                  |L4.1016|
                          DCD      SignalBuzzer
                  |L4.1020|
                          DCD      servisMenu
                  |L4.1024|
                          DCD      display_menu_timeout_timer
                  |L4.1028|
                          DCD      display_menu_timeout_time
                  |L4.1032|
                          DCD      sys_status
                  |L4.1036|
00040c  2001              MOVS     r0,#1                 ;507
00040e  e7e0              B        |L4.978|
                  |L4.1040|
000410  7034              STRB     r4,[r6,#0]            ;511
000412  e02f              B        |L4.1140|
                  |L4.1044|
000414  f7fffffe          BL       Error_Handler
000418  e02c              B        |L4.1140|
                  |L4.1050|
00041a  7034              STRB     r4,[r6,#0]            ;519
00041c  e02a              B        |L4.1140|
                  |L4.1054|
00041e  7034              STRB     r4,[r6,#0]            ;524
000420  7808              LDRB     r0,[r1,#0]            ;525  ; sys_status
000422  f0400040          ORR      r0,r0,#0x40           ;525
000426  7008              STRB     r0,[r1,#0]            ;525
000428  e024              B        |L4.1140|
                  |L4.1066|
;;;528    			{
;;;529                    servisMenu.mode = 0U;
00042a  7034              STRB     r4,[r6,#0]
;;;530    				SYS_FirmwareUpdateRequestSet();
00042c  7808              LDRB     r0,[r1,#0]  ; sys_status
00042e  f0400080          ORR      r0,r0,#0x80
000432  7008              STRB     r0,[r1,#0]
000434  e01e              B        |L4.1140|
                  |L4.1078|
;;;531    			}
;;;532    		}
;;;533    	}
;;;534    	else if((HAL_GetTick() - door_bell_sw_timer) >= door_bell_sw_time)
000436  f7fffffe          BL       HAL_GetTick
00043a  6aa9              LDR      r1,[r5,#0x28]  ; door_bell_sw_timer
00043c  1a40              SUBS     r0,r0,r1
00043e  6a69              LDR      r1,[r5,#0x24]  ; door_bell_sw_time
000440  4288              CMP      r0,r1
000442  d317              BCC      |L4.1140|
;;;535    	{
;;;536    		if(!(dout_0_7_remote & (1U << 3))) 
000444  89e8              LDRH     r0,[r5,#0xe]  ; dout_0_7_remote
000446  0700              LSLS     r0,r0,#28
000448  d403              BMI      |L4.1106|
;;;537            {
;;;538                DoorBell_Off();
00044a  7b28              LDRB     r0,[r5,#0xc]  ; dout_0_7
00044c  f0200008          BIC      r0,r0,#8
000450  7328              STRB     r0,[r5,#0xc]
                  |L4.1106|
;;;539            }
;;;540    		
;;;541    		if(IsDoorBellSwitchActiv())
000452  7ae8              LDRB     r0,[r5,#0xb]  ; din_cap_sen
000454  0740              LSLS     r0,r0,#29
000456  d506              BPL      |L4.1126|
;;;542    		{
;;;543                door_bell_sw_time = DOOR_BELL_SW_ACTIV_TIME;
000458  f44f6004          MOV      r0,#0x840
00045c  6268              STR      r0,[r5,#0x24]  ; door_bell_sw_time
;;;544                door_bell_sw_timer = HAL_GetTick();
00045e  f7fffffe          BL       HAL_GetTick
000462  62a8              STR      r0,[r5,#0x28]  ; door_bell_sw_timer
000464  e006              B        |L4.1140|
                  |L4.1126|
;;;545    		}
;;;546    		else if(IsDoorBellSwitchPressed())			
000466  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
000468  0780              LSLS     r0,r0,#30
00046a  d503              BPL      |L4.1140|
;;;547    		{
;;;548    			DoorBellSwitchReleased();
00046c  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
00046e  f0200002          BIC      r0,r0,#2
000472  62e8              STR      r0,[r5,#0x2c]  ; dio_flags
                  |L4.1140|
;;;549    		}
;;;550    	}
;;;551    	/**
;;;552    	*	check handmaid capacitive switch
;;;553    	*/
;;;554    	if(IsHandmaidSwitchActiv() && !IsHandmaidSwitchPressed())
000474  7ae8              LDRB     r0,[r5,#0xb]  ; din_cap_sen
000476  07c0              LSLS     r0,r0,#31
000478  d07d              BEQ      |L4.1398|
00047a  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
00047c  0740              LSLS     r0,r0,#29
00047e  d47a              BMI      |L4.1398|
;;;555    	{
;;;556    		HandmaidSwitchPressed();
000480  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
000482  f0400004          ORR      r0,r0,#4
000486  62e8              STR      r0,[r5,#0x2c]  ; dio_flags
;;;557    		
;;;558    		if(servisMenu.mode == 1U) 
000488  7830              LDRB     r0,[r6,#0]  ; servisMenu
00048a  2801              CMP      r0,#1
00048c  d012              BEQ      |L4.1204|
;;;559    		{
;;;560    			display_menu_timeout_time = MENU_TIMEOUT;
;;;561                display_menu_timeout_timer = HAL_GetTick();
;;;562                handmaid_sw_time = HANDMAID_SW_ACTIV_TIME;
;;;563                handmaid_sw_timer = HAL_GetTick();
;;;564                SignalBuzzer = BUZZ_DOOR_BELL;
;;;565    			servisMenu.mode = 2U;
;;;566    		}
;;;567    		else if (servisMenu.mode > 2U)
00048e  2802              CMP      r0,#2
000490  d90f              BLS      |L4.1202|
;;;568    		{
;;;569                display_menu_timeout_time = MENU_TIMEOUT;
000492  f8cab000          STR      r11,[r10,#0]  ; display_menu_timeout_time
;;;570                display_menu_timeout_timer = HAL_GetTick();
000496  f7fffffe          BL       HAL_GetTick
00049a  f8c90000          STR      r0,[r9,#0]  ; display_menu_timeout_timer
;;;571                handmaid_sw_time = HANDMAID_SW_MENU_BUTTON_TIME;
00049e  f44f7003          MOV      r0,#0x20c
0004a2  61e8              STR      r0,[r5,#0x1c]  ; handmaid_sw_time
;;;572                handmaid_sw_timer = HAL_GetTick();
0004a4  f7fffffe          BL       HAL_GetTick
0004a8  6228              STR      r0,[r5,#0x20]  ; handmaid_sw_timer
;;;573                
;;;574    			if(servisMenu.mode == 4U)
0004aa  7831              LDRB     r1,[r6,#0]  ; servisMenu
0004ac  4630              MOV      r0,r6
0004ae  2904              CMP      r1,#4
0004b0  d011              BEQ      |L4.1238|
                  |L4.1202|
0004b2  e1a6              B        |L4.2050|
                  |L4.1204|
0004b4  f8cab000          STR      r11,[r10,#0]          ;560  ; display_menu_timeout_time
0004b8  f7fffffe          BL       HAL_GetTick
0004bc  f8c90000          STR      r0,[r9,#0]            ;561  ; display_menu_timeout_timer
0004c0  f2404062          MOV      r0,#0x462             ;562
0004c4  61e8              STR      r0,[r5,#0x1c]         ;562  ; handmaid_sw_time
0004c6  f7fffffe          BL       HAL_GetTick
0004ca  6228              STR      r0,[r5,#0x20]         ;563  ; handmaid_sw_timer
0004cc  f8878000          STRB     r8,[r7,#0]            ;564
0004d0  2002              MOVS     r0,#2                 ;565
0004d2  7030              STRB     r0,[r6,#0]            ;565
0004d4  e195              B        |L4.2050|
                  |L4.1238|
;;;575    			{
;;;576                    servisMenu.mode = 3U;
0004d6  f8808000          STRB     r8,[r0,#0]
;;;577                    
;;;578    				if(servisMenu.selected == 0U)
0004da  7881              LDRB     r1,[r0,#2]  ; servisMenu
0004dc  b309              CBZ      r1,|L4.1314|
;;;579    				{
;;;580                        ++servisMenu.item;
;;;581                        
;;;582    					if(servisMenu.item > 19U)   //  on menu overflow check and save date & time if changed
;;;583                        {
;;;584                            servisMenu.item = 0U;
;;;585                            
;;;586                            if(servisMenu.date_time[10] != 0U)
;;;587                            {
;;;588                                servisMenu.date_time[10] = 0U;
;;;589                                Str2Hex(&servisMenu.date_time[0], 1U, &date_dio.Date);
;;;590                                Str2Hex(&servisMenu.date_time[2], 1U, &date_dio.Month);
;;;591                                Str2Hex(&servisMenu.date_time[4], 1U, &date_dio.Year);
;;;592                                Str2Hex(&servisMenu.date_time[6], 1U, &time_dio.Hours);
;;;593                                Str2Hex(&servisMenu.date_time[8], 1U, &time_dio.Minutes);
;;;594                                time_dio.Seconds = 0U;
;;;595                                HAL_RTC_SetTime(&hrtc, &time_dio, RTC_FORMAT_BCD);
;;;596                                HAL_RTC_SetDate(&hrtc, &date_dio, RTC_FORMAT_BCD);
;;;597                                HAL_RTC_WaitForSynchro(&hrtc);
;;;598                            }   
;;;599                        }
;;;600    					else if((servisMenu.item > 11U) && (servisMenu.rs485_add[6] != 0U)) // save rs485 address if value changed
;;;601    					{
;;;602    						servisMenu.rs485_add[6] = 0U;
;;;603    						Str2Int(servisMenu.rs485_add, &tmp_add);
;;;604    						rs485_interface_address[0] = (tmp_add >> 8U);
;;;605    						rs485_interface_address[1] = (tmp_add & 0xFFU);
;;;606    						ee_buff[0] = EE_RS485_INTERFACE_ADDRESS >> 8U;
;;;607    						ee_buff[1] = EE_RS485_INTERFACE_ADDRESS & 0xFFU;
;;;608    						ee_buff[2] = rs485_interface_address[0];
;;;609    						ee_buff[3] = rs485_interface_address[1];
;;;610    						if (HAL_I2C_Master_Transmit(&hi2c1, I2C_EE_WRITE, ee_buff, 4U, I2C_EE_TIMEOUT) != HAL_OK) Error_Handler();
;;;611    						if (HAL_I2C_IsDeviceReady(&hi2c1, I2C_EE_READ, I2C_EE_TRIALS, I2C_EE_WRITE_DELAY) != HAL_OK) Error_Handler();
;;;612    					}
;;;613                        else if((servisMenu.item > 6U) && (servisMenu.system_id[6] != 0U)) // save system id if value changed
;;;614    					{
;;;615    						servisMenu.system_id[6] = 0U;
;;;616    						Str2Int(servisMenu.system_id, &tmp_add);
;;;617    						system_id[0] = (tmp_add >> 8U);
;;;618    						system_id[1] = (tmp_add & 0xFFU);
;;;619    						ee_buff[0] = EE_SYSTEM_ID_ADDRESS >> 8U;
;;;620    						ee_buff[1] = EE_SYSTEM_ID_ADDRESS & 0xFFU;
;;;621    						ee_buff[2] = system_id[0];
;;;622    						ee_buff[3] = system_id[1];
;;;623    						if (HAL_I2C_Master_Transmit(&hi2c1, I2C_EE_WRITE, ee_buff, 4U, I2C_EE_TIMEOUT) != HAL_OK) Error_Handler();
;;;624    						if (HAL_I2C_IsDeviceReady(&hi2c1, I2C_EE_READ, I2C_EE_TRIALS, I2C_EE_WRITE_DELAY) != HAL_OK) Error_Handler();
;;;625    					}
;;;626    				}
;;;627    				else
;;;628    				{
;;;629                        if(servisMenu.item == 2U) // system id
0004de  7841              LDRB     r1,[r0,#1]  ; servisMenu
;;;630    					{
;;;631                            ++servisMenu.system_id[0];
;;;632                            ++servisMenu.system_id[6];  
;;;633                            
;;;634    						if(servisMenu.system_id[0] > '6') 
;;;635                            {
;;;636                                servisMenu.system_id[0] = '0';
0004e0  2230              MOVS     r2,#0x30
0004e2  2902              CMP      r1,#2                 ;629
0004e4  d07e              BEQ      |L4.1508|
;;;637                            }
;;;638    					}
;;;639    					else if(servisMenu.item == 3U) // system id
0004e6  2903              CMP      r1,#3
0004e8  d07d              BEQ      |L4.1510|
;;;640    					{
;;;641    						++servisMenu.system_id[1];
;;;642                            ++servisMenu.system_id[6];
;;;643                            
;;;644    						if(servisMenu.system_id[1] > '9') 
;;;645                            {
;;;646                                servisMenu.system_id[1] = '0';
;;;647                            }
;;;648    					}
;;;649    					else if(servisMenu.item == 4U) // system id
0004ea  2904              CMP      r1,#4
0004ec  d07c              BEQ      |L4.1512|
;;;650    					{
;;;651    						++servisMenu.system_id[2];
;;;652                            ++servisMenu.system_id[6];
;;;653                            
;;;654    						if(servisMenu.system_id[2] > '9') 
;;;655                            {
;;;656                                servisMenu.system_id[2] = '0';
;;;657                            }
;;;658    					}
;;;659    					else if(servisMenu.item == 5U) // system id
0004ee  2905              CMP      r1,#5
0004f0  d07b              BEQ      |L4.1514|
;;;660    					{
;;;661    						++servisMenu.system_id[3];
;;;662                            ++servisMenu.system_id[6];
;;;663                            
;;;664    						if(servisMenu.system_id[3] > '9') 
;;;665                            {
;;;666                                servisMenu.system_id[3] = '0';
;;;667                            }
;;;668    					}
;;;669                        else if(servisMenu.item == 6U) // system id
0004f2  2906              CMP      r1,#6
0004f4  d07a              BEQ      |L4.1516|
;;;670    					{
;;;671    						++servisMenu.system_id[4];
;;;672                            ++servisMenu.system_id[6];
;;;673                            
;;;674    						if(servisMenu.system_id[4] > '9') 
;;;675                            {
;;;676                                servisMenu.system_id[4] = '0';
;;;677                            }
;;;678    					}
;;;679                        else if(servisMenu.item == 7U) // rs485 address
0004f6  2907              CMP      r1,#7
0004f8  d079              BEQ      |L4.1518|
;;;680    					{
;;;681    						++servisMenu.rs485_add[0];
;;;682                            ++servisMenu.rs485_add[6];  
;;;683                            
;;;684    						if(servisMenu.rs485_add[0] > '6') 
;;;685                            {
;;;686                                servisMenu.rs485_add[0] = '0';
;;;687                            }
;;;688    					}
;;;689    					else if(servisMenu.item == 8U) // rs485 address
0004fa  2908              CMP      r1,#8
0004fc  d078              BEQ      |L4.1520|
;;;690    					{
;;;691    						++servisMenu.rs485_add[1];
;;;692                            ++servisMenu.rs485_add[6];  // set rs485 address value changed flag
;;;693                            
;;;694    						if(servisMenu.rs485_add[1] > '6') 
;;;695                            {
;;;696                                servisMenu.rs485_add[1] = '0';
;;;697                            }
;;;698    					}
;;;699    					else if(servisMenu.item == 9U) // rs485 address
0004fe  2909              CMP      r1,#9
000500  d077              BEQ      |L4.1522|
;;;700    					{
;;;701    						++servisMenu.rs485_add[2];
;;;702                            ++servisMenu.rs485_add[6];  // set rs485 address value changed flag
;;;703                            
;;;704    						if(servisMenu.rs485_add[2] > '6') 
;;;705                            {
;;;706                                servisMenu.rs485_add[2] = '0';
;;;707                            }
;;;708    					}
;;;709                        else if(servisMenu.item == 10U) // rs485 address
000502  290a              CMP      r1,#0xa
000504  d076              BEQ      |L4.1524|
;;;710    					{
;;;711    						++servisMenu.rs485_add[3];
;;;712                            ++servisMenu.rs485_add[6];  // set rs485 address value changed flag
;;;713                            
;;;714    						if(servisMenu.rs485_add[3] > '6') 
;;;715                            {
;;;716                                servisMenu.rs485_add[3] = '0';
;;;717                            }
;;;718    					}
;;;719                        else if(servisMenu.item == 11U) // rs485 address
000506  290b              CMP      r1,#0xb
000508  d075              BEQ      |L4.1526|
;;;720    					{
;;;721    						++servisMenu.rs485_add[4];
;;;722                            ++servisMenu.rs485_add[6];  // set rs485 address value changed flag
;;;723                            
;;;724    						if(servisMenu.rs485_add[4] > '6') 
;;;725                            {
;;;726                                servisMenu.rs485_add[4] = '0';
;;;727                            }
;;;728    					}
;;;729    					
;;;730                        else if(servisMenu.item == 15U)	// hours
00050a  290f              CMP      r1,#0xf
00050c  d074              BEQ      |L4.1528|
;;;731    					{
;;;732                            ++servisMenu.date_time[1];
;;;733                            ++servisMenu.date_time[10]; // set date & time value changed flag
;;;734                            
;;;735    						if(servisMenu.date_time[1] > '3') 
;;;736                            {
;;;737                                if(servisMenu.date_time[0] == '2') 
;;;738                                {
;;;739                                    servisMenu.date_time[0] = '0';
;;;740                                    servisMenu.date_time[1] = '0';
;;;741                                }
;;;742                            }
;;;743                            else if(servisMenu.date_time[1] > '9') 
;;;744                            {
;;;745                                ++servisMenu.date_time[0];
;;;746                                servisMenu.date_time[1] = '0';
;;;747                            }
;;;748    					}
;;;749    					else if(servisMenu.item == 16U)	// minute
00050e  2910              CMP      r1,#0x10
000510  d073              BEQ      |L4.1530|
;;;750    					{
;;;751    						++servisMenu.date_time[3];
;;;752                            ++servisMenu.date_time[10]; // set date & time value changed flag
;;;753                            
;;;754    						if(servisMenu.date_time[3] > '9') 
;;;755                            {
;;;756                                if(servisMenu.date_time[2] == '5') 
;;;757                                {
;;;758                                    servisMenu.date_time[2] = '0';
;;;759                                    servisMenu.date_time[3] = '0';
;;;760                                }
;;;761                            }
;;;762                            else if(servisMenu.date_time[3] > '9') 
;;;763                            {
;;;764                                ++servisMenu.date_time[2];
;;;765                                servisMenu.date_time[3] = '0';
;;;766                            }
;;;767    					}
;;;768    					else if(servisMenu.item == 17U) // days
;;;769    					{
;;;770    						++servisMenu.date_time[5];
;;;771                            ++servisMenu.date_time[10]; // set date & time value changed flag
;;;772                            
;;;773    						if(servisMenu.date_time[5] > '1') 
;;;774                            {
;;;775                                if(servisMenu.date_time[4] == '3') 
;;;776                                {
;;;777                                    servisMenu.date_time[4] = '0';
;;;778                                    servisMenu.date_time[5] = '1';
000512  2331              MOVS     r3,#0x31
000514  2911              CMP      r1,#0x11              ;768
000516  d071              BEQ      |L4.1532|
;;;779                                }
;;;780                            }
;;;781                            else if(servisMenu.date_time[5] > '9') 
;;;782                            {
;;;783                                ++servisMenu.date_time[4];
;;;784                                servisMenu.date_time[5] = '0';
;;;785                            }
;;;786    					}
;;;787    					else if(servisMenu.item == 18U) // month
000518  2912              CMP      r1,#0x12
00051a  d070              BEQ      |L4.1534|
;;;788    					{
;;;789    						++servisMenu.date_time[7];
;;;790                            ++servisMenu.date_time[10]; // set date & time value changed flag
;;;791                            
;;;792    						if(servisMenu.date_time[7] > '2') 
;;;793                            {
;;;794                                if(servisMenu.date_time[6] == '1') 
;;;795                                {
;;;796                                    servisMenu.date_time[6] = '0';
;;;797                                    servisMenu.date_time[7] = '1';
;;;798                                }
;;;799                            }
;;;800                            else if(servisMenu.date_time[7] > '9') 
;;;801                            {
;;;802                                ++servisMenu.date_time[6];
;;;803                                servisMenu.date_time[7] = '0';
;;;804                            }
;;;805    					}
;;;806    					else if(servisMenu.item == 19U) // years
00051c  2913              CMP      r1,#0x13
00051e  d06f              BEQ      |L4.1536|
000520  e16f              B        |L4.2050|
                  |L4.1314|
000522  7841              LDRB     r1,[r0,#1]            ;580  ; servisMenu
000524  1c49              ADDS     r1,r1,#1              ;580
000526  b2c9              UXTB     r1,r1                 ;580
000528  7041              STRB     r1,[r0,#1]            ;580
00052a  2913              CMP      r1,#0x13              ;582
00052c  d934              BLS      |L4.1432|
00052e  7044              STRB     r4,[r0,#1]            ;584
000530  7f41              LDRB     r1,[r0,#0x1d]         ;586  ; servisMenu
000532  2900              CMP      r1,#0                 ;586
000534  d0bd              BEQ      |L4.1202|
000536  7744              STRB     r4,[r0,#0x1d]         ;588
000538  ae01              ADD      r6,sp,#4              ;589
00053a  1cb2              ADDS     r2,r6,#2              ;589
00053c  2101              MOVS     r1,#1                 ;589
00053e  48c0              LDR      r0,|L4.2112|
000540  f7fffffe          BL       Str2Hex
000544  48be              LDR      r0,|L4.2112|
000546  1c72              ADDS     r2,r6,#1              ;590
000548  2101              MOVS     r1,#1                 ;590
00054a  1c80              ADDS     r0,r0,#2              ;590
00054c  f7fffffe          BL       Str2Hex
000550  48bb              LDR      r0,|L4.2112|
000552  1cf2              ADDS     r2,r6,#3              ;591
000554  2101              MOVS     r1,#1                 ;591
000556  1d00              ADDS     r0,r0,#4              ;591
000558  f7fffffe          BL       Str2Hex
00055c  48b8              LDR      r0,|L4.2112|
00055e  aa02              ADD      r2,sp,#8              ;592
000560  2101              MOVS     r1,#1                 ;592
000562  1d80              ADDS     r0,r0,#6              ;592
000564  f7fffffe          BL       Str2Hex
000568  48b5              LDR      r0,|L4.2112|
00056a  1d72              ADDS     r2,r6,#5              ;593
00056c  2101              MOVS     r1,#1                 ;593
00056e  3008              ADDS     r0,r0,#8              ;593
000570  f7fffffe          BL       Str2Hex
000574  e000              B        |L4.1400|
                  |L4.1398|
000576  e136              B        |L4.2022|
                  |L4.1400|
000578  f88d400a          STRB     r4,[sp,#0xa]          ;594
00057c  2201              MOVS     r2,#1                 ;595
00057e  a902              ADD      r1,sp,#8              ;595
000580  48b0              LDR      r0,|L4.2116|
000582  f7fffffe          BL       HAL_RTC_SetTime
000586  2201              MOVS     r2,#1                 ;596
000588  a901              ADD      r1,sp,#4              ;596
00058a  48ae              LDR      r0,|L4.2116|
00058c  f7fffffe          BL       HAL_RTC_SetDate
000590  48ac              LDR      r0,|L4.2116|
000592  f7fffffe          BL       HAL_RTC_WaitForSynchro
000596  e134              B        |L4.2050|
                  |L4.1432|
000598  2705              MOVS     r7,#5                 ;610
00059a  290b              CMP      r1,#0xb               ;600
00059c  d93b              BLS      |L4.1558|
00059e  7c42              LDRB     r2,[r0,#0x11]         ;600  ; servisMenu
0005a0  b37a              CBZ      r2,|L4.1538|
0005a2  7444              STRB     r4,[r0,#0x11]         ;602
0005a4  48a6              LDR      r0,|L4.2112|
0005a6  a904              ADD      r1,sp,#0x10           ;603
0005a8  3808              SUBS     r0,r0,#8              ;603
0005aa  f7fffffe          BL       Str2Int
0005ae  9804              LDR      r0,[sp,#0x10]         ;604
0005b0  4aa5              LDR      r2,|L4.2120|
0005b2  0a01              LSRS     r1,r0,#8              ;604
0005b4  7011              STRB     r1,[r2,#0]            ;604
0005b6  7050              STRB     r0,[r2,#1]            ;605
0005b8  f88d400c          STRB     r4,[sp,#0xc]          ;606
0005bc  2228              MOVS     r2,#0x28              ;607
0005be  f88d200d          STRB     r2,[sp,#0xd]          ;607
0005c2  f88d100e          STRB     r1,[sp,#0xe]          ;608
0005c6  f88d000f          STRB     r0,[sp,#0xf]          ;609
0005ca  2304              MOVS     r3,#4                 ;610
0005cc  aa03              ADD      r2,sp,#0xc            ;610
0005ce  21a0              MOVS     r1,#0xa0              ;610
0005d0  489e              LDR      r0,|L4.2124|
0005d2  9700              STR      r7,[sp,#0]            ;610
0005d4  f7fffffe          BL       HAL_I2C_Master_Transmit
0005d8  b108              CBZ      r0,|L4.1502|
0005da  f7fffffe          BL       Error_Handler
                  |L4.1502|
0005de  230f              MOVS     r3,#0xf               ;611
0005e0  2264              MOVS     r2,#0x64              ;611
0005e2  e00f              B        |L4.1540|
                  |L4.1508|
0005e4  e043              B        |L4.1646|
                  |L4.1510|
0005e6  e04d              B        |L4.1668|
                  |L4.1512|
0005e8  e057              B        |L4.1690|
                  |L4.1514|
0005ea  e061              B        |L4.1712|
                  |L4.1516|
0005ec  e06b              B        |L4.1734|
                  |L4.1518|
0005ee  e075              B        |L4.1756|
                  |L4.1520|
0005f0  e07f              B        |L4.1778|
                  |L4.1522|
0005f2  e089              B        |L4.1800|
                  |L4.1524|
0005f4  e093              B        |L4.1822|
                  |L4.1526|
0005f6  e09d              B        |L4.1844|
                  |L4.1528|
0005f8  e0a7              B        |L4.1866|
                  |L4.1530|
0005fa  e0b5              B        |L4.1896|
                  |L4.1532|
0005fc  e0c3              B        |L4.1926|
                  |L4.1534|
0005fe  e0d1              B        |L4.1956|
                  |L4.1536|
000600  e0df              B        |L4.1986|
                  |L4.1538|
000602  e008              B        |L4.1558|
                  |L4.1540|
000604  21a1              MOVS     r1,#0xa1              ;611
000606  4891              LDR      r0,|L4.2124|
000608  f7fffffe          BL       HAL_I2C_IsDeviceReady
00060c  2800              CMP      r0,#0                 ;611
00060e  d001              BEQ      |L4.1556|
000610  f7fffffe          BL       Error_Handler
                  |L4.1556|
000614  e0f5              B        |L4.2050|
                  |L4.1558|
000616  2906              CMP      r1,#6                 ;613
000618  d949              BLS      |L4.1710|
00061a  7a41              LDRB     r1,[r0,#9]            ;613  ; servisMenu
00061c  2900              CMP      r1,#0                 ;613
00061e  d046              BEQ      |L4.1710|
000620  7244              STRB     r4,[r0,#9]            ;615
000622  a904              ADD      r1,sp,#0x10           ;616
000624  1cc0              ADDS     r0,r0,#3              ;616
000626  f7fffffe          BL       Str2Int
00062a  9804              LDR      r0,[sp,#0x10]         ;617
00062c  4a88              LDR      r2,|L4.2128|
00062e  0a01              LSRS     r1,r0,#8              ;617
000630  7011              STRB     r1,[r2,#0]            ;617
000632  7050              STRB     r0,[r2,#1]            ;618
000634  f88d400c          STRB     r4,[sp,#0xc]          ;619
000638  2236              MOVS     r2,#0x36              ;620
00063a  f88d200d          STRB     r2,[sp,#0xd]          ;620
00063e  f88d100e          STRB     r1,[sp,#0xe]          ;621
000642  f88d000f          STRB     r0,[sp,#0xf]          ;622
000646  2304              MOVS     r3,#4                 ;623
000648  aa03              ADD      r2,sp,#0xc            ;623
00064a  21a0              MOVS     r1,#0xa0              ;623
00064c  487f              LDR      r0,|L4.2124|
00064e  9700              STR      r7,[sp,#0]            ;623
000650  f7fffffe          BL       HAL_I2C_Master_Transmit
000654  b108              CBZ      r0,|L4.1626|
000656  f7fffffe          BL       Error_Handler
                  |L4.1626|
00065a  230f              MOVS     r3,#0xf               ;624
00065c  2264              MOVS     r2,#0x64              ;624
00065e  21a1              MOVS     r1,#0xa1              ;624
000660  487a              LDR      r0,|L4.2124|
000662  f7fffffe          BL       HAL_I2C_IsDeviceReady
000666  b310              CBZ      r0,|L4.1710|
000668  f7fffffe          BL       Error_Handler
00066c  e0c9              B        |L4.2050|
                  |L4.1646|
00066e  78c1              LDRB     r1,[r0,#3]            ;631  ; servisMenu
000670  1c49              ADDS     r1,r1,#1              ;631
000672  b2c9              UXTB     r1,r1                 ;631
000674  70c1              STRB     r1,[r0,#3]            ;631
000676  7a43              LDRB     r3,[r0,#9]            ;632  ; servisMenu
000678  1c5b              ADDS     r3,r3,#1              ;632
00067a  7243              STRB     r3,[r0,#9]            ;632
00067c  2936              CMP      r1,#0x36              ;634
00067e  d916              BLS      |L4.1710|
000680  70c2              STRB     r2,[r0,#3]            ;636
000682  e0be              B        |L4.2050|
                  |L4.1668|
000684  7901              LDRB     r1,[r0,#4]            ;641  ; servisMenu
000686  1c49              ADDS     r1,r1,#1              ;641
000688  b2c9              UXTB     r1,r1                 ;641
00068a  7101              STRB     r1,[r0,#4]            ;641
00068c  7a43              LDRB     r3,[r0,#9]            ;642  ; servisMenu
00068e  1c5b              ADDS     r3,r3,#1              ;642
000690  7243              STRB     r3,[r0,#9]            ;642
000692  2939              CMP      r1,#0x39              ;644
000694  d90b              BLS      |L4.1710|
000696  7102              STRB     r2,[r0,#4]            ;646
000698  e0b3              B        |L4.2050|
                  |L4.1690|
00069a  7941              LDRB     r1,[r0,#5]            ;651  ; servisMenu
00069c  1c49              ADDS     r1,r1,#1              ;651
00069e  b2c9              UXTB     r1,r1                 ;651
0006a0  7141              STRB     r1,[r0,#5]            ;651
0006a2  7a43              LDRB     r3,[r0,#9]            ;652  ; servisMenu
0006a4  1c5b              ADDS     r3,r3,#1              ;652
0006a6  7243              STRB     r3,[r0,#9]            ;652
0006a8  2939              CMP      r1,#0x39              ;654
0006aa  d900              BLS      |L4.1710|
0006ac  7142              STRB     r2,[r0,#5]            ;656
                  |L4.1710|
0006ae  e0a8              B        |L4.2050|
                  |L4.1712|
0006b0  7981              LDRB     r1,[r0,#6]            ;661  ; servisMenu
0006b2  1c49              ADDS     r1,r1,#1              ;661
0006b4  b2c9              UXTB     r1,r1                 ;661
0006b6  7181              STRB     r1,[r0,#6]            ;661
0006b8  7a43              LDRB     r3,[r0,#9]            ;662  ; servisMenu
0006ba  1c5b              ADDS     r3,r3,#1              ;662
0006bc  7243              STRB     r3,[r0,#9]            ;662
0006be  2939              CMP      r1,#0x39              ;664
0006c0  d900              BLS      |L4.1732|
0006c2  7182              STRB     r2,[r0,#6]            ;666
                  |L4.1732|
0006c4  e09d              B        |L4.2050|
                  |L4.1734|
0006c6  79c1              LDRB     r1,[r0,#7]            ;671  ; servisMenu
0006c8  1c49              ADDS     r1,r1,#1              ;671
0006ca  b2c9              UXTB     r1,r1                 ;671
0006cc  71c1              STRB     r1,[r0,#7]            ;671
0006ce  7a43              LDRB     r3,[r0,#9]            ;672  ; servisMenu
0006d0  1c5b              ADDS     r3,r3,#1              ;672
0006d2  7243              STRB     r3,[r0,#9]            ;672
0006d4  2939              CMP      r1,#0x39              ;674
0006d6  d900              BLS      |L4.1754|
0006d8  71c2              STRB     r2,[r0,#7]            ;676
                  |L4.1754|
0006da  e092              B        |L4.2050|
                  |L4.1756|
0006dc  7ac1              LDRB     r1,[r0,#0xb]          ;681  ; servisMenu
0006de  1c49              ADDS     r1,r1,#1              ;681
0006e0  b2c9              UXTB     r1,r1                 ;681
0006e2  72c1              STRB     r1,[r0,#0xb]          ;681
0006e4  7c43              LDRB     r3,[r0,#0x11]         ;682  ; servisMenu
0006e6  1c5b              ADDS     r3,r3,#1              ;682
0006e8  7443              STRB     r3,[r0,#0x11]         ;682
0006ea  2936              CMP      r1,#0x36              ;684
0006ec  d900              BLS      |L4.1776|
0006ee  72c2              STRB     r2,[r0,#0xb]          ;686
                  |L4.1776|
0006f0  e087              B        |L4.2050|
                  |L4.1778|
0006f2  7b01              LDRB     r1,[r0,#0xc]          ;691  ; servisMenu
0006f4  1c49              ADDS     r1,r1,#1              ;691
0006f6  b2c9              UXTB     r1,r1                 ;691
0006f8  7301              STRB     r1,[r0,#0xc]          ;691
0006fa  7c43              LDRB     r3,[r0,#0x11]         ;692  ; servisMenu
0006fc  1c5b              ADDS     r3,r3,#1              ;692
0006fe  7443              STRB     r3,[r0,#0x11]         ;692
000700  2936              CMP      r1,#0x36              ;694
000702  d97e              BLS      |L4.2050|
000704  7302              STRB     r2,[r0,#0xc]          ;696
000706  e07c              B        |L4.2050|
                  |L4.1800|
000708  7b41              LDRB     r1,[r0,#0xd]          ;701  ; servisMenu
00070a  1c49              ADDS     r1,r1,#1              ;701
00070c  b2c9              UXTB     r1,r1                 ;701
00070e  7341              STRB     r1,[r0,#0xd]          ;701
000710  7c43              LDRB     r3,[r0,#0x11]         ;702  ; servisMenu
000712  1c5b              ADDS     r3,r3,#1              ;702
000714  7443              STRB     r3,[r0,#0x11]         ;702
000716  2936              CMP      r1,#0x36              ;704
000718  d973              BLS      |L4.2050|
00071a  7342              STRB     r2,[r0,#0xd]          ;706
00071c  e071              B        |L4.2050|
                  |L4.1822|
00071e  7b81              LDRB     r1,[r0,#0xe]          ;711  ; servisMenu
000720  1c49              ADDS     r1,r1,#1              ;711
000722  b2c9              UXTB     r1,r1                 ;711
000724  7381              STRB     r1,[r0,#0xe]          ;711
000726  7c43              LDRB     r3,[r0,#0x11]         ;712  ; servisMenu
000728  1c5b              ADDS     r3,r3,#1              ;712
00072a  7443              STRB     r3,[r0,#0x11]         ;712
00072c  2936              CMP      r1,#0x36              ;714
00072e  d968              BLS      |L4.2050|
000730  7382              STRB     r2,[r0,#0xe]          ;716
000732  e066              B        |L4.2050|
                  |L4.1844|
000734  7bc1              LDRB     r1,[r0,#0xf]          ;721  ; servisMenu
000736  1c49              ADDS     r1,r1,#1              ;721
000738  b2c9              UXTB     r1,r1                 ;721
00073a  73c1              STRB     r1,[r0,#0xf]          ;721
00073c  7c43              LDRB     r3,[r0,#0x11]         ;722  ; servisMenu
00073e  1c5b              ADDS     r3,r3,#1              ;722
000740  7443              STRB     r3,[r0,#0x11]         ;722
000742  2936              CMP      r1,#0x36              ;724
000744  d95d              BLS      |L4.2050|
000746  73c2              STRB     r2,[r0,#0xf]          ;726
000748  e05b              B        |L4.2050|
                  |L4.1866|
00074a  7d01              LDRB     r1,[r0,#0x14]         ;732  ; servisMenu
00074c  1c49              ADDS     r1,r1,#1              ;732
00074e  b2c9              UXTB     r1,r1                 ;732
000750  7501              STRB     r1,[r0,#0x14]         ;732
000752  7f43              LDRB     r3,[r0,#0x1d]         ;733  ; servisMenu
000754  1c5b              ADDS     r3,r3,#1              ;733
000756  7743              STRB     r3,[r0,#0x1d]         ;733
000758  2933              CMP      r1,#0x33              ;735
00075a  d952              BLS      |L4.2050|
00075c  7cc1              LDRB     r1,[r0,#0x13]         ;737  ; servisMenu
00075e  2932              CMP      r1,#0x32              ;737
000760  d14f              BNE      |L4.2050|
000762  74c2              STRB     r2,[r0,#0x13]         ;739
000764  7502              STRB     r2,[r0,#0x14]         ;740
000766  e04c              B        |L4.2050|
                  |L4.1896|
000768  7d81              LDRB     r1,[r0,#0x16]         ;751  ; servisMenu
00076a  1c49              ADDS     r1,r1,#1              ;751
00076c  b2c9              UXTB     r1,r1                 ;751
00076e  7581              STRB     r1,[r0,#0x16]         ;751
000770  7f43              LDRB     r3,[r0,#0x1d]         ;752  ; servisMenu
000772  1c5b              ADDS     r3,r3,#1              ;752
000774  7743              STRB     r3,[r0,#0x1d]         ;752
000776  2939              CMP      r1,#0x39              ;754
000778  d943              BLS      |L4.2050|
00077a  7d41              LDRB     r1,[r0,#0x15]         ;756  ; servisMenu
00077c  2935              CMP      r1,#0x35              ;756
00077e  d140              BNE      |L4.2050|
000780  7542              STRB     r2,[r0,#0x15]         ;758
000782  7582              STRB     r2,[r0,#0x16]         ;759
000784  e03d              B        |L4.2050|
                  |L4.1926|
000786  7e01              LDRB     r1,[r0,#0x18]         ;770  ; servisMenu
000788  1c49              ADDS     r1,r1,#1              ;770
00078a  b2c9              UXTB     r1,r1                 ;770
00078c  7601              STRB     r1,[r0,#0x18]         ;770
00078e  7f46              LDRB     r6,[r0,#0x1d]         ;771  ; servisMenu
000790  1c76              ADDS     r6,r6,#1              ;771
000792  7746              STRB     r6,[r0,#0x1d]         ;771
000794  2931              CMP      r1,#0x31              ;773
000796  d934              BLS      |L4.2050|
000798  7dc1              LDRB     r1,[r0,#0x17]         ;775  ; servisMenu
00079a  2933              CMP      r1,#0x33              ;775
00079c  d131              BNE      |L4.2050|
00079e  75c2              STRB     r2,[r0,#0x17]         ;777
0007a0  7603              STRB     r3,[r0,#0x18]         ;778
0007a2  e02e              B        |L4.2050|
                  |L4.1956|
0007a4  7e81              LDRB     r1,[r0,#0x1a]         ;789  ; servisMenu
0007a6  1c49              ADDS     r1,r1,#1              ;789
0007a8  b2c9              UXTB     r1,r1                 ;789
0007aa  7681              STRB     r1,[r0,#0x1a]         ;789
0007ac  7f46              LDRB     r6,[r0,#0x1d]         ;790  ; servisMenu
0007ae  1c76              ADDS     r6,r6,#1              ;790
0007b0  7746              STRB     r6,[r0,#0x1d]         ;790
0007b2  2932              CMP      r1,#0x32              ;792
0007b4  d925              BLS      |L4.2050|
0007b6  7e41              LDRB     r1,[r0,#0x19]         ;794  ; servisMenu
0007b8  2931              CMP      r1,#0x31              ;794
0007ba  d122              BNE      |L4.2050|
0007bc  7642              STRB     r2,[r0,#0x19]         ;796
0007be  7683              STRB     r3,[r0,#0x1a]         ;797
0007c0  e01f              B        |L4.2050|
                  |L4.1986|
;;;807    					{
;;;808    						++servisMenu.date_time[9];
0007c2  7f01              LDRB     r1,[r0,#0x1c]  ; servisMenu
0007c4  1c49              ADDS     r1,r1,#1
0007c6  b2c9              UXTB     r1,r1
0007c8  7701              STRB     r1,[r0,#0x1c]
;;;809                            ++servisMenu.date_time[10]; // set date & time value changed flag
0007ca  7f43              LDRB     r3,[r0,#0x1d]  ; servisMenu
0007cc  1c5b              ADDS     r3,r3,#1
0007ce  7743              STRB     r3,[r0,#0x1d]
;;;810                            
;;;811    						if(servisMenu.date_time[9] > '9') 
0007d0  2939              CMP      r1,#0x39
0007d2  d916              BLS      |L4.2050|
;;;812                            {
;;;813                                servisMenu.date_time[9] = '0';
0007d4  7702              STRB     r2,[r0,#0x1c]
;;;814                                ++servisMenu.date_time[8];
0007d6  7ec1              LDRB     r1,[r0,#0x1b]  ; servisMenu
0007d8  1c49              ADDS     r1,r1,#1
0007da  b2c9              UXTB     r1,r1
0007dc  76c1              STRB     r1,[r0,#0x1b]
;;;815                                
;;;816                                if(servisMenu.date_time[8] > '9') 
0007de  2939              CMP      r1,#0x39
0007e0  d90f              BLS      |L4.2050|
;;;817                                {
;;;818                                    servisMenu.date_time[8] = '0';
0007e2  76c2              STRB     r2,[r0,#0x1b]
0007e4  e00d              B        |L4.2050|
                  |L4.2022|
;;;819                                }
;;;820                            }
;;;821    					}
;;;822    				}
;;;823    			}
;;;824    		}
;;;825    	}
;;;826    	else if(IsHandmaidSwitchPressed())
0007e6  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
0007e8  0740              LSLS     r0,r0,#29
0007ea  d50a              BPL      |L4.2050|
;;;827    	{
;;;828    		if((HAL_GetTick() - handmaid_sw_timer) >= handmaid_sw_time)
0007ec  f7fffffe          BL       HAL_GetTick
0007f0  6a29              LDR      r1,[r5,#0x20]  ; handmaid_sw_timer
0007f2  1a40              SUBS     r0,r0,r1
0007f4  69e9              LDR      r1,[r5,#0x1c]  ; handmaid_sw_time
0007f6  4288              CMP      r0,r1
0007f8  d303              BCC      |L4.2050|
;;;829            {
;;;830                HandmaidSwitchReleased();
0007fa  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
0007fc  f0200004          BIC      r0,r0,#4
000800  62e8              STR      r0,[r5,#0x2c]  ; dio_flags
                  |L4.2050|
;;;831            }
;;;832    	}
;;;833    	/**
;;;834    	*	check if entry door not closed
;;;835    	*/
;;;836    	if(IsEntryDoorSensorActiv() && IsEntranceDoorSensorActiv())
000802  7a68              LDRB     r0,[r5,#9]  ; din_0_7
000804  0600              LSLS     r0,r0,#24
000806  d416              BMI      |L4.2102|
000808  6ae8              LDR      r0,[r5,#0x2c]  ; dio_flags
00080a  06c0              LSLS     r0,r0,#27
00080c  d513              BPL      |L4.2102|
;;;837    	{
;;;838    		if((HAL_GetTick() - entry_door_timer) >= ENTRY_DOOR_CHECK_CYCLE_TIME)
00080e  f7fffffe          BL       HAL_GetTick
000812  69a9              LDR      r1,[r5,#0x18]  ; entry_door_timer
000814  1a40              SUBS     r0,r0,r1
000816  f2404157          MOV      r1,#0x457
00081a  4288              CMP      r0,r1
00081c  d308              BCC      |L4.2096|
;;;839    		{
;;;840    			entry_door_timer = HAL_GetTick();
00081e  f7fffffe          BL       HAL_GetTick
000822  61a8              STR      r0,[r5,#0x18]  ; entry_door_timer
;;;841    			
;;;842    			if(++entry_door_pcnt >= ENTRY_DOOR_MAX_CYCLES)
000824  6968              LDR      r0,[r5,#0x14]  ; entry_door_pcnt
000826  1c40              ADDS     r0,r0,#1
000828  6168              STR      r0,[r5,#0x14]  ; entry_door_pcnt
00082a  283c              CMP      r0,#0x3c
00082c  d300              BCC      |L4.2096|
;;;843    			{
;;;844    				entry_door_pcnt = 0U;
00082e  616c              STR      r4,[r5,#0x14]  ; entry_door_pcnt
                  |L4.2096|
;;;845    			}
;;;846    		}
;;;847    	}
;;;848    	else
;;;849    	{
;;;850    		entry_door_pcnt = 0U;
;;;851    		entry_door_timer = HAL_GetTick();
;;;852    	}
;;;853    }
000830  b005              ADD      sp,sp,#0x14
000832  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.2102|
000836  616c              STR      r4,[r5,#0x14]         ;850  ; entry_door_pcnt
000838  f7fffffe          BL       HAL_GetTick
00083c  61a8              STR      r0,[r5,#0x18]         ;851  ; entry_door_timer
00083e  e7f7              B        |L4.2096|
;;;854    
                          ENDP

                  |L4.2112|
                          DCD      servisMenu+0x13
                  |L4.2116|
                          DCD      hrtc
                  |L4.2120|
                          DCD      rs485_interface_address
                  |L4.2124|
                          DCD      hi2c1
                  |L4.2128|
                          DCD      system_id

                          AREA ||i.DIO_Init||, CODE, READONLY, ALIGN=2

                  DIO_Init PROC
;;;122    /* Program Code  -------------------------------------------------------------*/
;;;123    void DIO_Init(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    	EntranceDoorSensorDisabled();
000002  480b              LDR      r0,|L5.48|
000004  6ac1              LDR      r1,[r0,#0x2c]  ; dio_flags
000006  f0210110          BIC      r1,r1,#0x10
00000a  62c1              STR      r1,[r0,#0x2c]  ; dio_flags
;;;126    	LED_DoorBellBlue_On();
00000c  7b41              LDRB     r1,[r0,#0xd]  ; hc595_dout
00000e  f0410104          ORR      r1,r1,#4
000012  7341              STRB     r1,[r0,#0xd]
;;;127    	DoNotDisturbModul_On();
000014  7b01              LDRB     r1,[r0,#0xc]  ; dout_0_7
000016  f0410102          ORR      r1,r1,#2
00001a  7301              STRB     r1,[r0,#0xc]
;;;128    	PowerContactor_On();
00001c  7b01              LDRB     r1,[r0,#0xc]  ; dout_0_7
00001e  f0210101          BIC      r1,r1,#1
000022  7301              STRB     r1,[r0,#0xc]
;;;129    	DIO_SetOuput();
000024  f7fffffe          BL       DIO_SetOuput
;;;130    	CAP1293_Init();
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      CAP1293_Init
;;;131    }
;;;132    
                          ENDP

                  |L5.48|
                          DCD      ||.data||

                          AREA ||i.DIO_Service||, CODE, READONLY, ALIGN=2

                  DIO_Service PROC
;;;132    
;;;133    void DIO_Service(void) 
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
;;;135        uint8_t rd_reg;
;;;136        static uint8_t dout_0_7_mem = 0U;
;;;137        static uint32_t doorlock_timer = 0U;
;;;138        
;;;139    	if(eComState == COM_PACKET_RECEIVED) RS485_Service();	
000002  488e              LDR      r0,|L6.572|
000004  7800              LDRB     r0,[r0,#0]  ; eComState
000006  2802              CMP      r0,#2
000008  d101              BNE      |L6.14|
00000a  f7fffffe          BL       RS485_Service
                  |L6.14|
;;;140    	if(IsRS485_UpdateActiv()) return;
00000e  488c              LDR      r0,|L6.576|
000010  6800              LDR      r0,[r0,#0]  ; rs485_flags
000012  07c0              LSLS     r0,r0,#31
000014  d17e              BNE      |L6.276|
;;;141    	/** ============================================================================*/
;;;142    	/**		F O R C E   D I G I T A L   O U T P U T    F R O M  	C O M M A N D 	*/
;;;143    	/** ============================================================================*/
;;;144    	if(dout_0_7_remote & (1U << 8))
000016  4c8b              LDR      r4,|L6.580|
000018  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
00001a  f04f0500          MOV      r5,#0
00001e  05c0              LSLS     r0,r0,#23
000020  d533              BPL      |L6.138|
;;;145    	{
;;;146    		if(!(dout_0_7_remote & (1U << 9)))
000022  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
000024  0580              LSLS     r0,r0,#22
000026  d405              BMI      |L6.52|
;;;147    		{
;;;148    			dout_0_7_mem = dout_0_7;
000028  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
00002a  7020              STRB     r0,[r4,#0]
;;;149    			dout_0_7_remote |= (1U << 9);
00002c  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
00002e  f4407000          ORR      r0,r0,#0x200
000032  81e0              STRH     r0,[r4,#0xe]
                  |L6.52|
;;;150    		}
;;;151    		
;;;152    		dout_0_7 = (dout_0_7_remote & 0xFFU);
000034  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
000036  7320              STRB     r0,[r4,#0xc]
;;;153    		
;;;154    		if((dout_0_7_remote & (1U << 6)) && !(dout_0_7_remote & (1U << 12)))
000038  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
00003a  0640              LSLS     r0,r0,#25
00003c  d50a              BPL      |L6.84|
00003e  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
000040  04c0              LSLS     r0,r0,#19
000042  d407              BMI      |L6.84|
;;;155    		{
;;;156    			dout_0_7_remote |= (1U << 12);			
000044  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
000046  f4405080          ORR      r0,r0,#0x1000
00004a  81e0              STRH     r0,[r4,#0xe]
;;;157    			doorlock_timer = HAL_GetTick();
00004c  f7fffffe          BL       HAL_GetTick
000050  6120              STR      r0,[r4,#0x10]  ; doorlock_timer
000052  e020              B        |L6.150|
                  |L6.84|
;;;158    		}
;;;159    		else if(!(dout_0_7_remote & (1U << 6)))
000054  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
000056  0640              LSLS     r0,r0,#25
000058  d404              BMI      |L6.100|
;;;160    		{
;;;161    			dout_0_7_remote &= 0xEFFFU;
00005a  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
00005c  f4205080          BIC      r0,r0,#0x1000
000060  81e0              STRH     r0,[r4,#0xe]
000062  e018              B        |L6.150|
                  |L6.100|
;;;162    		}
;;;163    		else if((dout_0_7_remote & (1U << 6)) && (dout_0_7_remote & (1U << 12))) 
000064  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
000066  0640              LSLS     r0,r0,#25
000068  d515              BPL      |L6.150|
00006a  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
00006c  04c0              LSLS     r0,r0,#19
00006e  d512              BPL      |L6.150|
;;;164    		{
;;;165    			if((HAL_GetTick() - doorlock_timer) >= DOOR_LOCK_MAX_CYCLE_TIME) dout_0_7 &= 0xBFU;
000070  f7fffffe          BL       HAL_GetTick
000074  6921              LDR      r1,[r4,#0x10]  ; doorlock_timer
000076  1a40              SUBS     r0,r0,r1
000078  f24131f8          MOV      r1,#0x13f8
00007c  4288              CMP      r0,r1
00007e  d30a              BCC      |L6.150|
000080  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
000082  f00000bf          AND      r0,r0,#0xbf
000086  7320              STRB     r0,[r4,#0xc]
000088  e005              B        |L6.150|
                  |L6.138|
;;;166    		}
;;;167    	}
;;;168    	else if(dout_0_7_remote & (1U << 9))
00008a  89e0              LDRH     r0,[r4,#0xe]  ; dout_0_7_remote
00008c  0580              LSLS     r0,r0,#22
00008e  d502              BPL      |L6.150|
;;;169    	{
;;;170    		dout_0_7 = dout_0_7_mem;
000090  7820              LDRB     r0,[r4,#0]  ; dout_0_7_mem
000092  7320              STRB     r0,[r4,#0xc]
;;;171    		dout_0_7_remote = 0U;
000094  81e5              STRH     r5,[r4,#0xe]
                  |L6.150|
;;;172    	}	
;;;173    	/** ============================================================================*/                                                                         
;;;174    	/**		R E L O A D 	C A P A C I T I V E		S E N S O R		S T A T E    	*/                                                                           	
;;;175    	/** ============================================================================*/
;;;176    	if(IsCAP1293_Present())
000096  7ae0              LDRB     r0,[r4,#0xb]  ; din_cap_sen
000098  0600              LSLS     r0,r0,#24
00009a  d514              BPL      |L6.198|
;;;177    	{
;;;178    		rd_reg = CAP1293_ReadRegister(CAP1293_SENSOR_INPUT_SPI_FLASH);		
00009c  2003              MOVS     r0,#3
00009e  f7fffffe          BL       CAP1293_ReadRegister
;;;179    		din_cap_sen &= 0xF8U;
0000a2  7ae1              LDRB     r1,[r4,#0xb]  ; din_cap_sen
0000a4  f00101f8          AND      r1,r1,#0xf8
0000a8  72e1              STRB     r1,[r4,#0xb]
;;;180    		din_cap_sen |= (rd_reg & 0x07U);		
0000aa  7ae1              LDRB     r1,[r4,#0xb]  ; din_cap_sen
0000ac  f0000007          AND      r0,r0,#7
0000b0  4308              ORRS     r0,r0,r1
0000b2  72e0              STRB     r0,[r4,#0xb]
;;;181    		rd_reg = CAP1293_ReadRegister(CAP1293_MAIN_CONTROL_REG);
0000b4  2000              MOVS     r0,#0
0000b6  f7fffffe          BL       CAP1293_ReadRegister
;;;182    		if(rd_reg & (1U << 0)) CAP1293_WriteRegister(CAP1293_MAIN_CONTROL_REG, 0x00U);
0000ba  07c0              LSLS     r0,r0,#31
0000bc  d003              BEQ      |L6.198|
0000be  2100              MOVS     r1,#0
0000c0  4608              MOV      r0,r1
0000c2  f7fffffe          BL       CAP1293_WriteRegister
                  |L6.198|
;;;183    	}
;;;184    	/** ============================================================================*/                                                                         
;;;185    	/**		R E L O A D 	D I G I T A L		I N P U T 		R E G I S T E R    	*/                                                                           	
;;;186    	/** ============================================================================*/
;;;187    	din_state = 0U;	
0000c6  72a5              STRB     r5,[r4,#0xa]
;;;188    	if(HAL_GPIO_ReadPin(DIN_0_Port, DIN_0_Pin) == GPIO_PIN_SET) (din_state |= (1U << 0));
0000c8  4d5f              LDR      r5,|L6.584|
0000ca  2101              MOVS     r1,#1
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       HAL_GPIO_ReadPin
0000d2  2801              CMP      r0,#1
0000d4  d103              BNE      |L6.222|
0000d6  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
0000d8  f0400001          ORR      r0,r0,#1
0000dc  72a0              STRB     r0,[r4,#0xa]
                  |L6.222|
;;;189    	if(HAL_GPIO_ReadPin(DIN_1_Port, DIN_1_Pin) == GPIO_PIN_SET) (din_state |= (1U << 1));
0000de  2102              MOVS     r1,#2
0000e0  4628              MOV      r0,r5
0000e2  f7fffffe          BL       HAL_GPIO_ReadPin
0000e6  2801              CMP      r0,#1
0000e8  d103              BNE      |L6.242|
0000ea  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
0000ec  f0400002          ORR      r0,r0,#2
0000f0  72a0              STRB     r0,[r4,#0xa]
                  |L6.242|
;;;190    	if(HAL_GPIO_ReadPin(DIN_2_Port, DIN_2_Pin) == GPIO_PIN_SET) (din_state |= (1U << 2));
0000f2  2104              MOVS     r1,#4
0000f4  4628              MOV      r0,r5
0000f6  f7fffffe          BL       HAL_GPIO_ReadPin
0000fa  2801              CMP      r0,#1
0000fc  d103              BNE      |L6.262|
0000fe  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
000100  f0400004          ORR      r0,r0,#4
000104  72a0              STRB     r0,[r4,#0xa]
                  |L6.262|
;;;191    	if(HAL_GPIO_ReadPin(DIN_3_Port, DIN_3_Pin) == GPIO_PIN_SET) (din_state |= (1U << 3));
000106  2108              MOVS     r1,#8
000108  4628              MOV      r0,r5
00010a  f7fffffe          BL       HAL_GPIO_ReadPin
00010e  2801              CMP      r0,#1
000110  d105              BNE      |L6.286|
000112  e000              B        |L6.278|
                  |L6.276|
000114  e090              B        |L6.568|
                  |L6.278|
000116  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
000118  f0400008          ORR      r0,r0,#8
00011c  72a0              STRB     r0,[r4,#0xa]
                  |L6.286|
;;;192    	if(HAL_GPIO_ReadPin(DIN_4_Port, DIN_4_Pin) == GPIO_PIN_SET) (din_state |= (1U << 4));
00011e  2110              MOVS     r1,#0x10
000120  4628              MOV      r0,r5
000122  f7fffffe          BL       HAL_GPIO_ReadPin
000126  2801              CMP      r0,#1
000128  d103              BNE      |L6.306|
00012a  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
00012c  f0400010          ORR      r0,r0,#0x10
000130  72a0              STRB     r0,[r4,#0xa]
                  |L6.306|
;;;193    	if(HAL_GPIO_ReadPin(DIN_5_Port, DIN_5_Pin) == GPIO_PIN_SET) (din_state |= (1U << 5));
000132  2120              MOVS     r1,#0x20
000134  4628              MOV      r0,r5
000136  f7fffffe          BL       HAL_GPIO_ReadPin
00013a  2801              CMP      r0,#1
00013c  d103              BNE      |L6.326|
00013e  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
000140  f0400020          ORR      r0,r0,#0x20
000144  72a0              STRB     r0,[r4,#0xa]
                  |L6.326|
;;;194    	if(HAL_GPIO_ReadPin(DIN_6_Port, DIN_6_Pin) == GPIO_PIN_SET) (din_state |= (1U << 6));
000146  2140              MOVS     r1,#0x40
000148  4628              MOV      r0,r5
00014a  f7fffffe          BL       HAL_GPIO_ReadPin
00014e  2801              CMP      r0,#1
000150  d103              BNE      |L6.346|
000152  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
000154  f0400040          ORR      r0,r0,#0x40
000158  72a0              STRB     r0,[r4,#0xa]
                  |L6.346|
;;;195    	if(HAL_GPIO_ReadPin(DIN_7_Port, DIN_7_Pin) == GPIO_PIN_SET) (din_state |= (1U << 7));		
00015a  2180              MOVS     r1,#0x80
00015c  4628              MOV      r0,r5
00015e  f7fffffe          BL       HAL_GPIO_ReadPin
000162  2801              CMP      r0,#1
000164  d103              BNE      |L6.366|
000166  7aa0              LDRB     r0,[r4,#0xa]  ; din_state
000168  f0400080          ORR      r0,r0,#0x80
00016c  72a0              STRB     r0,[r4,#0xa]
                  |L6.366|
;;;196    	DIO_DebounceDigitalInput();	
00016e  f7fffffe          BL       DIO_DebounceDigitalInput
;;;197    	/** ============================================================================*/                                                                         
;;;198    	/**			S E T 		D I G I T A L	  O U T P U T 		D R I V E R   		*/                                                                           	
;;;199    	/** ============================================================================*/
;;;200    	if(dout_0_7 & (1U << 0)) HAL_GPIO_WritePin(DOUT_0_Port, DOUT_0_Pin, GPIO_PIN_SET);
000172  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
000174  4d35              LDR      r5,|L6.588|
000176  07c0              LSLS     r0,r0,#31
000178  d005              BEQ      |L6.390|
00017a  2201              MOVS     r2,#1
00017c  2110              MOVS     r1,#0x10
00017e  4628              MOV      r0,r5
000180  f7fffffe          BL       HAL_GPIO_WritePin
000184  e004              B        |L6.400|
                  |L6.390|
;;;201    	else HAL_GPIO_WritePin(DOUT_0_Port, DOUT_0_Pin, GPIO_PIN_RESET);	
000186  2200              MOVS     r2,#0
000188  2110              MOVS     r1,#0x10
00018a  4628              MOV      r0,r5
00018c  f7fffffe          BL       HAL_GPIO_WritePin
                  |L6.400|
;;;202    	if(dout_0_7 & (1U << 1)) HAL_GPIO_WritePin(DOUT_1_Port, DOUT_1_Pin, GPIO_PIN_SET);
000190  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
000192  0780              LSLS     r0,r0,#30
000194  d505              BPL      |L6.418|
000196  2201              MOVS     r2,#1
000198  2120              MOVS     r1,#0x20
00019a  4628              MOV      r0,r5
00019c  f7fffffe          BL       HAL_GPIO_WritePin
0001a0  e004              B        |L6.428|
                  |L6.418|
;;;203    	else HAL_GPIO_WritePin(DOUT_1_Port, DOUT_1_Pin, GPIO_PIN_RESET);
0001a2  2200              MOVS     r2,#0
0001a4  2120              MOVS     r1,#0x20
0001a6  4628              MOV      r0,r5
0001a8  f7fffffe          BL       HAL_GPIO_WritePin
                  |L6.428|
;;;204    	if(dout_0_7 & (1U << 3)) HAL_GPIO_WritePin(DOUT_2_Port, DOUT_2_Pin, GPIO_PIN_SET);
0001ac  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
0001ae  0700              LSLS     r0,r0,#28
0001b0  d505              BPL      |L6.446|
0001b2  2201              MOVS     r2,#1
0001b4  2180              MOVS     r1,#0x80
0001b6  4628              MOV      r0,r5
0001b8  f7fffffe          BL       HAL_GPIO_WritePin
0001bc  e004              B        |L6.456|
                  |L6.446|
;;;205    	else HAL_GPIO_WritePin(DOUT_2_Port, DOUT_2_Pin, GPIO_PIN_RESET);
0001be  2200              MOVS     r2,#0
0001c0  2180              MOVS     r1,#0x80
0001c2  4628              MOV      r0,r5
0001c4  f7fffffe          BL       HAL_GPIO_WritePin
                  |L6.456|
;;;206    	if(dout_0_7 & (1U << 4)) DOUT_3_SetHigh();
0001c8  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
0001ca  06c0              LSLS     r0,r0,#27
0001cc  d504              BPL      |L6.472|
0001ce  7b60              LDRB     r0,[r4,#0xd]  ; hc595_dout
0001d0  f0400010          ORR      r0,r0,#0x10
0001d4  7360              STRB     r0,[r4,#0xd]
0001d6  e003              B        |L6.480|
                  |L6.472|
;;;207    	else DOUT_3_SetLow();	
0001d8  7b60              LDRB     r0,[r4,#0xd]  ; hc595_dout
0001da  f0200010          BIC      r0,r0,#0x10
0001de  7360              STRB     r0,[r4,#0xd]
                  |L6.480|
;;;208    	if(dout_0_7 & (1U << 5)) DOUT_4_SetHigh();
0001e0  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
0001e2  0680              LSLS     r0,r0,#26
0001e4  d504              BPL      |L6.496|
0001e6  7b60              LDRB     r0,[r4,#0xd]  ; hc595_dout
0001e8  f0400020          ORR      r0,r0,#0x20
0001ec  7360              STRB     r0,[r4,#0xd]
0001ee  e003              B        |L6.504|
                  |L6.496|
;;;209    	else DOUT_4_SetLow();	
0001f0  7b60              LDRB     r0,[r4,#0xd]  ; hc595_dout
0001f2  f0200020          BIC      r0,r0,#0x20
0001f6  7360              STRB     r0,[r4,#0xd]
                  |L6.504|
;;;210    	
;;;211    	if(dout_0_7 & (1U << 6))
0001f8  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
0001fa  0640              LSLS     r0,r0,#25
0001fc  d505              BPL      |L6.522|
;;;212    	{
;;;213    		HAL_GPIO_WritePin(DOORLOCK_PWM_Port, DOORLOCK_PWM_Pin, GPIO_PIN_SET);
0001fe  2201              MOVS     r2,#1
000200  2140              MOVS     r1,#0x40
000202  4628              MOV      r0,r5
000204  f7fffffe          BL       HAL_GPIO_WritePin
000208  e004              B        |L6.532|
                  |L6.522|
;;;214    	}
;;;215    	else
;;;216    	{
;;;217    		HAL_GPIO_WritePin(DOORLOCK_PWM_Port, DOORLOCK_PWM_Pin, GPIO_PIN_RESET);
00020a  2200              MOVS     r2,#0
00020c  2140              MOVS     r1,#0x40
00020e  4628              MOV      r0,r5
000210  f7fffffe          BL       HAL_GPIO_WritePin
                  |L6.532|
;;;218    	}
;;;219    	
;;;220    	if(dout_0_7 & (1U << 7)) HAL_GPIO_WritePin(SOUND_PWM_Port, SOUND_PWM_Pin, GPIO_PIN_SET);
000214  7b20              LDRB     r0,[r4,#0xc]  ; dout_0_7
000216  f44f7180          MOV      r1,#0x100
00021a  0600              LSLS     r0,r0,#24
00021c  d504              BPL      |L6.552|
00021e  2201              MOVS     r2,#1
000220  4628              MOV      r0,r5
000222  f7fffffe          BL       HAL_GPIO_WritePin
000226  e003              B        |L6.560|
                  |L6.552|
;;;221    	else HAL_GPIO_WritePin(SOUND_PWM_Port, SOUND_PWM_Pin, GPIO_PIN_RESET);
000228  2200              MOVS     r2,#0
00022a  4628              MOV      r0,r5
00022c  f7fffffe          BL       HAL_GPIO_WritePin
                  |L6.560|
;;;222    	
;;;223    	DIO_SetOuput();
000230  e8bd4070          POP      {r4-r6,lr}
000234  f7ffbffe          B.W      DIO_SetOuput
                  |L6.568|
;;;224    }
000238  bd70              POP      {r4-r6,pc}
;;;225    
                          ENDP

00023a  0000              DCW      0x0000
                  |L6.572|
                          DCD      eComState
                  |L6.576|
                          DCD      rs485_flags
                  |L6.580|
                          DCD      ||.data||
                  |L6.584|
                          DCD      0x40010c00
                  |L6.588|
                          DCD      0x40010800

                          AREA ||i.DIO_SetOuput||, CODE, READONLY, ALIGN=2

                  DIO_SetOuput PROC
;;;855    
;;;856    void DIO_SetOuput(void)
000000  b570              PUSH     {r4-r6,lr}
;;;857    {	
;;;858    	HAL_SPI_Transmit(&hspi2, &hc595_dout, 1U, 10U);	
000002  230a              MOVS     r3,#0xa
000004  2201              MOVS     r2,#1
000006  4909              LDR      r1,|L7.44|
000008  4809              LDR      r0,|L7.48|
00000a  f7fffffe          BL       HAL_SPI_Transmit
;;;859    	HAL_GPIO_WritePin(SHIFT_CLK_Port, SHIFT_CLK_Pin, GPIO_PIN_RESET);
00000e  4d09              LDR      r5,|L7.52|
000010  f44f5480          MOV      r4,#0x1000
000014  2200              MOVS     r2,#0
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       HAL_GPIO_WritePin
;;;860    	HAL_GPIO_WritePin(SHIFT_CLK_Port, SHIFT_CLK_Pin, GPIO_PIN_SET);	
00001e  4621              MOV      r1,r4
000020  4628              MOV      r0,r5
000022  e8bd4070          POP      {r4-r6,lr}
000026  2201              MOVS     r2,#1
000028  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;861    }
;;;862    
                          ENDP

                  |L7.44|
                          DCD      ||.data||+0xd
                  |L7.48|
                          DCD      hspi2
                  |L7.52|
                          DCD      0x40010800

                          AREA ||.data||, DATA, ALIGN=2

                  dout_0_7_mem
000000  00                DCB      0x00
                  din_0_timer
000001  00                DCB      0x00
                  din_1_timer
000002  00                DCB      0x00
                  din_2_timer
000003  00                DCB      0x00
                  din_3_timer
000004  00                DCB      0x00
                  din_4_timer
000005  00                DCB      0x00
                  din_5_timer
000006  00                DCB      0x00
                  din_6_timer
000007  00                DCB      0x00
                  din_7_timer
000008  00                DCB      0x00
                  din_0_7
000009  00                DCB      0x00
                  din_state
00000a  00                DCB      0x00
                  din_cap_sen
00000b  00                DCB      0x00
                  dout_0_7
00000c  00                DCB      0x00
                  hc595_dout
00000d  00                DCB      0x00
                  dout_0_7_remote
00000e  0000              DCB      0x00,0x00
                  doorlock_timer
                          DCD      0x00000000
                  entry_door_pcnt
                          DCD      0x00000000
                  entry_door_timer
                          DCD      0x00000000
                  handmaid_sw_time
                          DCD      0x00000000
                  handmaid_sw_timer
                          DCD      0x00000000
                  door_bell_sw_time
                          DCD      0x00000000
                  door_bell_sw_timer
                          DCD      0x00000000
                  dio_flags
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Src\\dio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_dio_c_DIO_Init____REV16|
#line 441 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_dio_c_DIO_Init____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_dio_c_DIO_Init____REVSH|
#line 456
|__asm___5_dio_c_DIO_Init____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_dio_c_DIO_Init____RRX|
#line 643
|__asm___5_dio_c_DIO_Init____RRX| PROC
#line 644

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
