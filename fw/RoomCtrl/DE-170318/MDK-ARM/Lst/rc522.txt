; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-170318\rc522.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-170318\rc522.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I.\RTE\_DE-170318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-170318\rc522.crf ..\Src\rc522.c]
                          THUMB

                          AREA ||i.RC522_AntennaOn||, CODE, READONLY, ALIGN=1

                  RC522_AntennaOn PROC
;;;685    
;;;686    static void RC522_AntennaOn(void) 
000000  b510              PUSH     {r4,lr}
;;;687    { 
;;;688    	uint8_t temp;
;;;689    
;;;690    	temp = RC522_ReadRegister(RC522_REG_TX_CONTROL);
000002  2014              MOVS     r0,#0x14
000004  f7fffffe          BL       RC522_ReadRegister
;;;691        
;;;692    	if (!(temp & 0x03U))        
000008  0780              LSLS     r0,r0,#30
00000a  d105              BNE      |L1.24|
;;;693        {
;;;694    		RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03U);
00000c  2103              MOVS     r1,#3
00000e  e8bd4010          POP      {r4,lr}
000012  2014              MOVS     r0,#0x14
000014  f7ffbffe          B.W      RC522_SetBitMask
                  |L1.24|
;;;695    	}
;;;696    }
000018  bd10              POP      {r4,pc}
;;;697    
                          ENDP


                          AREA ||i.RC522_Anticoll||, CODE, READONLY, ALIGN=1

                  RC522_Anticoll PROC
;;;859    
;;;860    static RC522_StatusTypeDef RC522_Anticoll(uint8_t* serNum) 
000000  b57c              PUSH     {r2-r6,lr}
;;;861    {
000002  4605              MOV      r5,r0
;;;862    	RC522_StatusTypeDef status;
;;;863    	uint32_t i;
;;;864    	uint8_t serNumCheck = 0U;
000004  2400              MOVS     r4,#0
;;;865    	uint16_t unLen;
;;;866    
;;;867    	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0U);   // TxLastBists = BitFramingReg[2..0]
000006  2100              MOVS     r1,#0
000008  200d              MOVS     r0,#0xd
00000a  f7fffffe          BL       RC522_WriteRegister
;;;868    	serNum[0] = PICC_ANTICOLL;
00000e  2093              MOVS     r0,#0x93
000010  7028              STRB     r0,[r5,#0]
;;;869    	serNum[1] = 0x20U;
000012  2020              MOVS     r0,#0x20
000014  7068              STRB     r0,[r5,#1]
;;;870    	status = RC522_ToCard(PCD_TRANSCEIVE, serNum, 2U, serNum, &unLen);
000016  a801              ADD      r0,sp,#4
000018  9000              STR      r0,[sp,#0]
00001a  462b              MOV      r3,r5
00001c  2202              MOVS     r2,#2
00001e  4629              MOV      r1,r5
000020  200c              MOVS     r0,#0xc
000022  f7fffffe          BL       RC522_ToCard
;;;871    
;;;872    	if (status == MI_OK) 
000026  2801              CMP      r0,#1
000028  d109              BNE      |L2.62|
;;;873        {
;;;874    		/**
;;;875            *   Check card serial number
;;;876            */
;;;877    		for (i = 0U; i < 4U; i++) 
00002a  2200              MOVS     r2,#0
                  |L2.44|
;;;878            {
;;;879    			serNumCheck ^= serNum[i];
00002c  5ca9              LDRB     r1,[r5,r2]
00002e  404c              EORS     r4,r4,r1
000030  1c52              ADDS     r2,r2,#1              ;877
000032  2a04              CMP      r2,#4                 ;877
000034  d3fa              BCC      |L2.44|
;;;880    		}
;;;881            
;;;882    		if (serNumCheck != serNum[i])
000036  5ca9              LDRB     r1,[r5,r2]
000038  42a1              CMP      r1,r4
00003a  d000              BEQ      |L2.62|
;;;883            {
;;;884    			status = MI_ERR;
00003c  2000              MOVS     r0,#0
                  |L2.62|
;;;885    		}
;;;886    	}
;;;887        
;;;888    	return (status);
;;;889    }
00003e  bd7c              POP      {r2-r6,pc}
;;;890    
                          ENDP


                          AREA ||i.RC522_Auth||, CODE, READONLY, ALIGN=1

                  RC522_Auth PROC
;;;962    
;;;963    static RC522_StatusTypeDef RC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) 
000000  b530              PUSH     {r4,r5,lr}
;;;964    {
000002  b085              SUB      sp,sp,#0x14
;;;965        RC522_StatusTypeDef status;
;;;966    	uint16_t recvBits;
;;;967    	uint8_t i;
;;;968    	uint8_t buff[12]; 
;;;969    
;;;970    	//Verify the command block address + sector + password + card serial number
;;;971    	buff[0] = authMode;
000004  f88d0004          STRB     r0,[sp,#4]
;;;972    	buff[1] = BlockAddr;
000008  f88d1005          STRB     r1,[sp,#5]
;;;973        
;;;974    	for (i = 0U; i < 6U; i++) 
00000c  2000              MOVS     r0,#0
00000e  a901              ADD      r1,sp,#4              ;968
                  |L3.16|
;;;975        { 
;;;976    		buff[i + 2U] = *(Sectorkey + i); 
000010  180d              ADDS     r5,r1,r0
000012  5c14              LDRB     r4,[r2,r0]
000014  70ac              STRB     r4,[r5,#2]
000016  1c40              ADDS     r0,r0,#1              ;974
000018  b2c0              UXTB     r0,r0                 ;974
00001a  2806              CMP      r0,#6                 ;974
00001c  d3f8              BCC      |L3.16|
;;;977    	}
;;;978        
;;;979    	for (i = 0U; i < 4U; i++) 
00001e  2000              MOVS     r0,#0
                  |L3.32|
;;;980        {
;;;981    		buff[i + 8U] = *(serNum + i);
000020  180c              ADDS     r4,r1,r0
000022  5c1a              LDRB     r2,[r3,r0]
000024  7222              STRB     r2,[r4,#8]
000026  1c40              ADDS     r0,r0,#1              ;979
000028  b2c0              UXTB     r0,r0                 ;979
00002a  2804              CMP      r0,#4                 ;979
00002c  d3f8              BCC      |L3.32|
;;;982    	}
;;;983        
;;;984    	status = RC522_ToCard(PCD_AUTHENT, buff, 12U, buff, &recvBits);
00002e  a804              ADD      r0,sp,#0x10
000030  9000              STR      r0,[sp,#0]
000032  ab01              ADD      r3,sp,#4
000034  220c              MOVS     r2,#0xc
000036  a901              ADD      r1,sp,#4
000038  200e              MOVS     r0,#0xe
00003a  f7fffffe          BL       RC522_ToCard
00003e  4604              MOV      r4,r0
;;;985    
;;;986    	if ((status != MI_OK) || (!(RC522_ReadRegister(RC522_REG_STATUS2) & (1U << 3)))) 
000040  2c01              CMP      r4,#1
000042  d104              BNE      |L3.78|
000044  2008              MOVS     r0,#8
000046  f7fffffe          BL       RC522_ReadRegister
00004a  0700              LSLS     r0,r0,#28
00004c  d400              BMI      |L3.80|
                  |L3.78|
;;;987        {
;;;988    		status = MI_ERR;
00004e  2400              MOVS     r4,#0
                  |L3.80|
;;;989    	}
;;;990        
;;;991    	return (status);
;;;992    }
000050  b005              ADD      sp,sp,#0x14
000052  4620              MOV      r0,r4                 ;991
000054  bd30              POP      {r4,r5,pc}
;;;993    
                          ENDP


                          AREA ||i.RC522_CalculateCRC||, CODE, READONLY, ALIGN=1

                  RC522_CalculateCRC PROC
;;;891    
;;;892    static void RC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;893    { 
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;894    	uint32_t i, n;
;;;895    
;;;896    	RC522_WriteRegister(RC522_REG_COMMAND, PCD_IDLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RC522_WriteRegister
;;;897    	RC522_ClearBitMask(RC522_REG_DIV_IRQ, 0x04U);       // CRCIrq = 0
000012  2104              MOVS     r1,#4
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       RC522_ClearBitMask
;;;898    	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80U);      // Clear the FIFO pointer
00001a  2180              MOVS     r1,#0x80
00001c  200a              MOVS     r0,#0xa
00001e  f7fffffe          BL       RC522_SetBitMask
;;;899    	/**
;;;900        *   Write_RC522(CommandReg, PCD_IDLE);
;;;901        *   Writing data to the FIFO
;;;902        */
;;;903    	for (i = 0U; i < len; i++) 
000022  2400              MOVS     r4,#0
000024  e004              B        |L4.48|
                  |L4.38|
;;;904        {
;;;905    		RC522_WriteRegister(RC522_REG_FIFO_DATA, *(pIndata + i)); 
000026  5d29              LDRB     r1,[r5,r4]
000028  2009              MOVS     r0,#9
00002a  f7fffffe          BL       RC522_WriteRegister
00002e  1c64              ADDS     r4,r4,#1              ;903
                  |L4.48|
000030  42bc              CMP      r4,r7                 ;903
000032  d3f8              BCC      |L4.38|
;;;906    	}
;;;907        /**
;;;908    	*   Start CRC calculation
;;;909        */
;;;910    	RC522_WriteRegister(RC522_REG_COMMAND, PCD_CALCCRC);
000034  2103              MOVS     r1,#3
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       RC522_WriteRegister
;;;911        /**
;;;912    	*   Wait for CRC calculation to complete
;;;913        */
;;;914    	i = 0xFFU;
00003c  24ff              MOVS     r4,#0xff
                  |L4.62|
;;;915        
;;;916    	do 
;;;917        {
;;;918            n = RC522_ReadRegister(RC522_REG_DIV_IRQ);
00003e  2005              MOVS     r0,#5
000040  f7fffffe          BL       RC522_ReadRegister
;;;919    		i--;
000044  1e64              SUBS     r4,r4,#1
;;;920    	} 
;;;921        while ((i != 0U) && !(n & (1U << 2)));              // wait for CRCIrq = 1
000046  b10c              CBZ      r4,|L4.76|
000048  0740              LSLS     r0,r0,#29
00004a  d5f8              BPL      |L4.62|
                  |L4.76|
;;;922    	
;;;923    	RC522_WriteRegister(RC522_REG_COMMAND, PCD_IDLE);
00004c  2100              MOVS     r1,#0
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       RC522_WriteRegister
;;;924    	/**
;;;925        *   Read CRC calculation result
;;;926        */
;;;927    	pOutData[0] = RC522_ReadRegister(RC522_REG_CRC_RESULT_L);
000054  2022              MOVS     r0,#0x22
000056  f7fffffe          BL       RC522_ReadRegister
00005a  7030              STRB     r0,[r6,#0]
;;;928    	pOutData[1] = RC522_ReadRegister(RC522_REG_CRC_RESULT_M);
00005c  2021              MOVS     r0,#0x21
00005e  f7fffffe          BL       RC522_ReadRegister
000062  7070              STRB     r0,[r6,#1]
;;;929    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;930    
                          ENDP


                          AREA ||i.RC522_Check||, CODE, READONLY, ALIGN=1

                  RC522_Check PROC
;;;639    
;;;640    static RC522_StatusTypeDef RC522_Check(uint8_t* id) 
000000  b570              PUSH     {r4-r6,lr}
;;;641    {
000002  4605              MOV      r5,r0
;;;642    	RC522_StatusTypeDef status;
;;;643    	
;;;644    	status = RC522_Request(PICC_REQIDL, id);            // Find cards, return card type
000004  4629              MOV      r1,r5
000006  2026              MOVS     r0,#0x26
000008  f7fffffe          BL       RC522_Request
00000c  4604              MOV      r4,r0
;;;645        
;;;646    	if (status == MI_OK) 
00000e  2c01              CMP      r4,#1
000010  d103              BNE      |L5.26|
;;;647        {                                                   // Card detected
;;;648    		status = RC522_Anticoll(id);                    // Anti-collision, return card serial number 4 bytes
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       RC522_Anticoll
000018  4604              MOV      r4,r0
                  |L5.26|
;;;649    	}
;;;650        
;;;651    	RC522_Halt();                                       // Command card into hibernation 
00001a  f7fffffe          BL       RC522_Halt
;;;652    
;;;653    	return (status);
00001e  4620              MOV      r0,r4
;;;654    }
000020  bd70              POP      {r4-r6,pc}
;;;655    
                          ENDP


                          AREA ||i.RC522_ClearBitMask||, CODE, READONLY, ALIGN=1

                  RC522_ClearBitMask PROC
;;;679    
;;;680    static void RC522_ClearBitMask(uint8_t reg, uint8_t mask)
000000  b570              PUSH     {r4-r6,lr}
;;;681    {  
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;682    	RC522_WriteRegister(reg, RC522_ReadRegister(reg) & (~mask));
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       RC522_ReadRegister
00000c  ea200104          BIC      r1,r0,r4
000010  4628              MOV      r0,r5
000012  e8bd4070          POP      {r4-r6,lr}
000016  f7ffbffe          B.W      RC522_WriteRegister
;;;683    }
;;;684    
                          ENDP


                          AREA ||i.RC522_ClearData||, CODE, READONLY, ALIGN=2

                  RC522_ClearData PROC
;;;1268   
;;;1269   static void RC522_ClearData(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1270   {
;;;1271   	uint32_t i;
;;;1272   	
;;;1273   	for(i = 0U; i < 16U; i++)
000004  2000              MOVS     r0,#0
;;;1274   	{
;;;1275   		Sector_0.Block_0[i] = 0U;
000006  4b29              LDR      r3,|L7.172|
000008  2100              MOVS     r1,#0                 ;1273
;;;1276   		Sector_0.Block_1[i] = 0U;
;;;1277   		Sector_0.Block_2[i] = 0U;
;;;1278   		Sector_0.Block_3[i] = 0U;
;;;1279   		
;;;1280   		Sector_1.Block_0[i] = 0U;
00000a  f1030440          ADD      r4,r3,#0x40
;;;1281   		Sector_1.Block_1[i] = 0U;
;;;1282   		Sector_1.Block_2[i] = 0U;
;;;1283   		Sector_1.Block_3[i] = 0U;
;;;1284   		
;;;1285   		Sector_2.Block_0[i] = 0U;
00000e  f1030580          ADD      r5,r3,#0x80
;;;1286   		Sector_2.Block_1[i] = 0U;
;;;1287   		Sector_2.Block_2[i] = 0U;
;;;1288   		Sector_2.Block_3[i] = 0U;
;;;1289   		
;;;1290   		Sector_3.Block_0[i] = 0U;
000012  f10306c0          ADD      r6,r3,#0xc0
;;;1291   		Sector_3.Block_1[i] = 0U;
;;;1292   		Sector_3.Block_2[i] = 0U;
;;;1293   		Sector_3.Block_3[i] = 0U;
;;;1294   		
;;;1295   		Sector_4.Block_0[i] = 0U;
000016  f5037780          ADD      r7,r3,#0x100
;;;1296   		Sector_4.Block_1[i] = 0U;
;;;1297   		Sector_4.Block_2[i] = 0U;
;;;1298   		Sector_4.Block_3[i] = 0U;
;;;1299   		
;;;1300   		Sector_5.Block_0[i] = 0U;
00001a  f5037ca0          ADD      r12,r3,#0x140
;;;1301   		Sector_5.Block_1[i] = 0U;
;;;1302   		Sector_5.Block_2[i] = 0U;
;;;1303   		Sector_5.Block_3[i] = 0U;
;;;1304   		
;;;1305   		Sector_6.Block_0[i] = 0U;
00001e  f50378c0          ADD      r8,r3,#0x180
;;;1306   		Sector_6.Block_1[i] = 0U;
;;;1307   		Sector_6.Block_2[i] = 0U;
;;;1308   		Sector_6.Block_3[i] = 0U;
;;;1309   		
;;;1310   		Sector_7.Block_0[i] = 0U;
000022  f50379e0          ADD      r9,r3,#0x1c0
                  |L7.38|
000026  5419              STRB     r1,[r3,r0]            ;1275
000028  181a              ADDS     r2,r3,r0              ;1276
00002a  7411              STRB     r1,[r2,#0x10]         ;1276
00002c  f8821020          STRB     r1,[r2,#0x20]         ;1277
000030  f8821030          STRB     r1,[r2,#0x30]         ;1278
000034  5421              STRB     r1,[r4,r0]            ;1280
000036  1822              ADDS     r2,r4,r0              ;1281
000038  7411              STRB     r1,[r2,#0x10]         ;1281
00003a  f8821020          STRB     r1,[r2,#0x20]         ;1282
00003e  f8821030          STRB     r1,[r2,#0x30]         ;1283
000042  5429              STRB     r1,[r5,r0]            ;1285
000044  182a              ADDS     r2,r5,r0              ;1286
000046  7411              STRB     r1,[r2,#0x10]         ;1286
000048  f8821020          STRB     r1,[r2,#0x20]         ;1287
00004c  f8821030          STRB     r1,[r2,#0x30]         ;1288
000050  5431              STRB     r1,[r6,r0]            ;1290
000052  1832              ADDS     r2,r6,r0              ;1291
000054  7411              STRB     r1,[r2,#0x10]         ;1291
000056  f8821020          STRB     r1,[r2,#0x20]         ;1292
00005a  f8821030          STRB     r1,[r2,#0x30]         ;1293
00005e  5439              STRB     r1,[r7,r0]            ;1295
000060  183a              ADDS     r2,r7,r0              ;1296
000062  7411              STRB     r1,[r2,#0x10]         ;1296
000064  f8821020          STRB     r1,[r2,#0x20]         ;1297
000068  f8821030          STRB     r1,[r2,#0x30]         ;1298
00006c  f80c1000          STRB     r1,[r12,r0]           ;1300
000070  eb0c0200          ADD      r2,r12,r0             ;1301
000074  7411              STRB     r1,[r2,#0x10]         ;1301
000076  f8821020          STRB     r1,[r2,#0x20]         ;1302
00007a  f8821030          STRB     r1,[r2,#0x30]         ;1303
00007e  f8081000          STRB     r1,[r8,r0]            ;1305
000082  eb080200          ADD      r2,r8,r0              ;1306
000086  7411              STRB     r1,[r2,#0x10]         ;1306
000088  f8821020          STRB     r1,[r2,#0x20]         ;1307
00008c  f8821030          STRB     r1,[r2,#0x30]         ;1308
000090  f8091000          STRB     r1,[r9,r0]
;;;1311   		Sector_7.Block_1[i] = 0U;
000094  eb090200          ADD      r2,r9,r0
000098  7411              STRB     r1,[r2,#0x10]
;;;1312   		Sector_7.Block_2[i] = 0U;
00009a  f8821020          STRB     r1,[r2,#0x20]
;;;1313   		Sector_7.Block_3[i] = 0U;
00009e  f8821030          STRB     r1,[r2,#0x30]
0000a2  1c40              ADDS     r0,r0,#1              ;1273
0000a4  2810              CMP      r0,#0x10              ;1273
0000a6  d3be              BCC      |L7.38|
;;;1314   	}
;;;1315   }
0000a8  e8bd83f0          POP      {r4-r9,pc}
                          ENDP

                  |L7.172|
                          DCD      ||.bss||

                          AREA ||i.RC522_Halt||, CODE, READONLY, ALIGN=1

                  RC522_Halt PROC
;;;1013   
;;;1014   static void RC522_Halt(void) 
000000  b50e              PUSH     {r1-r3,lr}
;;;1015   {
;;;1016   	uint16_t unLen;
;;;1017   	uint8_t buff[4]; 
;;;1018   
;;;1019   	buff[0] = PICC_HALT;
000002  2050              MOVS     r0,#0x50
000004  f88d0004          STRB     r0,[sp,#4]
;;;1020   	buff[1] = 0U;
000008  2000              MOVS     r0,#0
00000a  f88d0005          STRB     r0,[sp,#5]
;;;1021   	RC522_CalculateCRC(buff, 2U, &buff[2]);
00000e  f10d0206          ADD      r2,sp,#6
000012  2102              MOVS     r1,#2
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       RC522_CalculateCRC
;;;1022   	RC522_ToCard(PCD_TRANSCEIVE, buff, 4U, buff, &unLen);
00001a  a802              ADD      r0,sp,#8
00001c  9000              STR      r0,[sp,#0]
00001e  ab01              ADD      r3,sp,#4
000020  2204              MOVS     r2,#4
000022  a901              ADD      r1,sp,#4
000024  200c              MOVS     r0,#0xc
000026  f7fffffe          BL       RC522_ToCard
;;;1023   }
00002a  bd0e              POP      {r1-r3,pc}
;;;1024   
                          ENDP


                          AREA ||i.RC522_Init||, CODE, READONLY, ALIGN=2

                  RC522_Init PROC
;;;247    /* Program Code  -------------------------------------------------------------*/
;;;248    void RC522_Init(void) 
000000  b510              PUSH     {r4,lr}
;;;249    {
;;;250    	RC522_RST_SetLow(); 
000002  4c1b              LDR      r4,|L9.112|
000004  7820              LDRB     r0,[r4,#0]  ; hc595_dout
000006  f0200080          BIC      r0,r0,#0x80
00000a  7020              STRB     r0,[r4,#0]
;;;251    	DIO_SetOuput();	
00000c  f7fffffe          BL       DIO_SetOuput
;;;252    	HAL_Delay(10);    
000010  200a              MOVS     r0,#0xa
000012  f7fffffe          BL       HAL_Delay
;;;253    	RC522_RST_SetHigh();
000016  7820              LDRB     r0,[r4,#0]  ; hc595_dout
000018  f0400080          ORR      r0,r0,#0x80
00001c  7020              STRB     r0,[r4,#0]
;;;254    	DIO_SetOuput();
00001e  f7fffffe          BL       DIO_SetOuput
;;;255    	HAL_Delay(50);
000022  2032              MOVS     r0,#0x32
000024  f7fffffe          BL       HAL_Delay
;;;256    	RC522_WriteRegister(RC522_REG_COMMAND, PCD_RESETPHASE);	
000028  210f              MOVS     r1,#0xf
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       RC522_WriteRegister
;;;257    	RC522_WriteRegister(RC522_REG_T_MODE, 0x8DU);
000030  218d              MOVS     r1,#0x8d
000032  202a              MOVS     r0,#0x2a
000034  f7fffffe          BL       RC522_WriteRegister
;;;258    	RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3EU);
000038  213e              MOVS     r1,#0x3e
00003a  202b              MOVS     r0,#0x2b
00003c  f7fffffe          BL       RC522_WriteRegister
;;;259    	RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0U);
000040  2100              MOVS     r1,#0
000042  202c              MOVS     r0,#0x2c
000044  f7fffffe          BL       RC522_WriteRegister
;;;260    	RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30U);		
000048  211e              MOVS     r1,#0x1e
00004a  202d              MOVS     r0,#0x2d
00004c  f7fffffe          BL       RC522_WriteRegister
;;;261    	RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40U);
000050  2140              MOVS     r1,#0x40
000052  2015              MOVS     r0,#0x15
000054  f7fffffe          BL       RC522_WriteRegister
;;;262    	RC522_WriteRegister(RC522_REG_MODE, 0x3DU);
000058  213d              MOVS     r1,#0x3d
00005a  2011              MOVS     r0,#0x11
00005c  f7fffffe          BL       RC522_WriteRegister
;;;263    	RC522_AntennaOn();
000060  f7fffffe          BL       RC522_AntennaOn
;;;264    	RC522_HandmaidReentranceDisable();
000064  4803              LDR      r0,|L9.116|
000066  6941              LDR      r1,[r0,#0x14]  ; mifare_process_flags
000068  f0210101          BIC      r1,r1,#1
00006c  6141              STR      r1,[r0,#0x14]  ; mifare_process_flags
;;;265    }
00006e  bd10              POP      {r4,pc}
;;;266    
                          ENDP

                  |L9.112|
                          DCD      hc595_dout
                  |L9.116|
                          DCD      ||.data||

                          AREA ||i.RC522_Read||, CODE, READONLY, ALIGN=1

                  RC522_Read PROC
;;;994    
;;;995    static RC522_StatusTypeDef RC522_Read(uint8_t blockAddr, uint8_t* recvData) 
000000  b51c              PUSH     {r2-r4,lr}
;;;996    {
000002  460c              MOV      r4,r1
;;;997    	RC522_StatusTypeDef status;
;;;998    	uint16_t unLen;
;;;999    
;;;1000   	recvData[0] = PICC_READ;
000004  2130              MOVS     r1,#0x30
000006  7021              STRB     r1,[r4,#0]
;;;1001   	recvData[1] = blockAddr;
000008  7060              STRB     r0,[r4,#1]
;;;1002   	RC522_CalculateCRC(recvData, 2U, &recvData[2]);
00000a  1ca2              ADDS     r2,r4,#2
00000c  2102              MOVS     r1,#2
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RC522_CalculateCRC
;;;1003   	status = RC522_ToCard(PCD_TRANSCEIVE, recvData, 4U, recvData, &unLen);
000014  a801              ADD      r0,sp,#4
000016  9000              STR      r0,[sp,#0]
000018  4623              MOV      r3,r4
00001a  2204              MOVS     r2,#4
00001c  4621              MOV      r1,r4
00001e  200c              MOVS     r0,#0xc
000020  f7fffffe          BL       RC522_ToCard
;;;1004   
;;;1005   	if ((status != MI_OK) || (unLen != 0x90U)) 
000024  2801              CMP      r0,#1
000026  d103              BNE      |L10.48|
000028  f8bd1004          LDRH     r1,[sp,#4]
00002c  2990              CMP      r1,#0x90
00002e  d000              BEQ      |L10.50|
                  |L10.48|
;;;1006       {
;;;1007   		status = MI_ERR;
000030  2000              MOVS     r0,#0
                  |L10.50|
;;;1008   	}
;;;1009   
;;;1010   	return (status);
;;;1011   }
000032  bd1c              POP      {r2-r4,pc}
;;;1012   
                          ENDP


                          AREA ||i.RC522_ReadCard||, CODE, READONLY, ALIGN=2

                  RC522_ReadCard PROC
;;;1025   
;;;1026   static RC522_StatusTypeDef RC522_ReadCard(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;1027   {
;;;1028       uint32_t i;
;;;1029       uint8_t str[RC522_BUFF_LEN];
;;;1030       RC522_StatusTypeDef status;
;;;1031   	
;;;1032       RC522_Request(PICC_REQIDL, str);	
000002  4669              MOV      r1,sp
000004  2026              MOVS     r0,#0x26
000006  f7fffffe          BL       RC522_Request
;;;1033       status = RC522_Anticoll(str);
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       RC522_Anticoll
;;;1034   
;;;1035       for(i = 0U; i < 5U; i++)
000010  2000              MOVS     r0,#0
;;;1036       {
;;;1037           card_id[i] = str[i];
000012  4a3a              LDR      r2,|L11.252|
000014  4669              MOV      r1,sp                 ;1029
                  |L11.22|
000016  5c0b              LDRB     r3,[r1,r0]
000018  5413              STRB     r3,[r2,r0]
00001a  1c40              ADDS     r0,r0,#1              ;1035
00001c  2805              CMP      r0,#5                 ;1035
00001e  d3fa              BCC      |L11.22|
;;;1038       }
;;;1039   
;;;1040       RC522_SelectTag(card_id);	
000020  4836              LDR      r0,|L11.252|
000022  f7fffffe          BL       RC522_SelectTag
;;;1041   	
;;;1042       status = RC522_Auth(PICC_AUTHENT1A, SECTOR_0, mifare_key_a, card_id);
000026  4b35              LDR      r3,|L11.252|
000028  2100              MOVS     r1,#0
00002a  f103020a          ADD      r2,r3,#0xa
00002e  2060              MOVS     r0,#0x60
000030  f7fffffe          BL       RC522_Auth
000034  4604              MOV      r4,r0
;;;1043   	
;;;1044       if(status != MI_OK)
000036  2c01              CMP      r4,#1
000038  d004              BEQ      |L11.68|
;;;1045   	{
;;;1046   		RC522_Halt();
00003a  f7fffffe          BL       RC522_Halt
;;;1047   		return (status);
00003e  4620              MOV      r0,r4
                  |L11.64|
;;;1048   	}
;;;1049   	else
;;;1050   	{    
;;;1051           RC522_Read(SECTOR_0, &Sector_0.Block_0[0]);
;;;1052           RC522_Read((SECTOR_0 + 1U), &Sector_0.Block_1[0]);
;;;1053           RC522_Read((SECTOR_0 + 2U), &Sector_0.Block_2[0]);
;;;1054           RC522_Read((SECTOR_0 + 3U), &Sector_0.Block_3[0]);
;;;1055   	}
;;;1056   	
;;;1057   	status = RC522_Auth(PICC_AUTHENT1A, SECTOR_1, mifare_key_a, card_id);
;;;1058   	
;;;1059       if(status != MI_OK)
;;;1060   	{	
;;;1061   		RC522_Halt();
;;;1062   		return (status);
;;;1063   	}
;;;1064   	else
;;;1065   	{      
;;;1066           RC522_Read(SECTOR_1, &Sector_1.Block_0[0]);
;;;1067           RC522_Read((SECTOR_1 + 1U), &Sector_1.Block_1[0]);
;;;1068           RC522_Read((SECTOR_1 + 2U), &Sector_1.Block_2[0]);
;;;1069           RC522_Read((SECTOR_1 + 3U), &Sector_1.Block_3[0]);    
;;;1070   	}
;;;1071   	
;;;1072   	status = RC522_Auth(PICC_AUTHENT1A, SECTOR_2, mifare_key_a, card_id);
;;;1073   	
;;;1074       if(status != MI_OK)
;;;1075   	{		
;;;1076   		RC522_Halt();
;;;1077   		return (status);
;;;1078   	}
;;;1079   	else
;;;1080   	{      
;;;1081           RC522_Read(SECTOR_2, &Sector_2.Block_0[0]);
;;;1082           RC522_Read((SECTOR_2 + 1U), &Sector_2.Block_1[0]);
;;;1083           RC522_Read((SECTOR_2 + 2U), &Sector_2.Block_2[0]);
;;;1084           RC522_Read((SECTOR_2 + 3U), &Sector_2.Block_3[0]); 	
;;;1085   	}
;;;1086   
;;;1087       RC522_Halt();
;;;1088   	return (status);
;;;1089   }
000040  b004              ADD      sp,sp,#0x10
000042  bd10              POP      {r4,pc}
                  |L11.68|
000044  492e              LDR      r1,|L11.256|
000046  2000              MOVS     r0,#0                 ;1051
000048  f7fffffe          BL       RC522_Read
00004c  492c              LDR      r1,|L11.256|
00004e  2001              MOVS     r0,#1                 ;1052
000050  3110              ADDS     r1,r1,#0x10           ;1052
000052  f7fffffe          BL       RC522_Read
000056  492a              LDR      r1,|L11.256|
000058  2002              MOVS     r0,#2                 ;1053
00005a  3120              ADDS     r1,r1,#0x20           ;1053
00005c  f7fffffe          BL       RC522_Read
000060  4927              LDR      r1,|L11.256|
000062  2003              MOVS     r0,#3                 ;1054
000064  3130              ADDS     r1,r1,#0x30           ;1054
000066  f7fffffe          BL       RC522_Read
00006a  4b24              LDR      r3,|L11.252|
00006c  2104              MOVS     r1,#4                 ;1057
00006e  f103020a          ADD      r2,r3,#0xa            ;1057
000072  2060              MOVS     r0,#0x60              ;1057
000074  f7fffffe          BL       RC522_Auth
000078  4604              MOV      r4,r0                 ;1057
00007a  2c01              CMP      r4,#1                 ;1059
00007c  d003              BEQ      |L11.134|
00007e  f7fffffe          BL       RC522_Halt
000082  4620              MOV      r0,r4                 ;1062
000084  e7dc              B        |L11.64|
                  |L11.134|
000086  491e              LDR      r1,|L11.256|
000088  2004              MOVS     r0,#4                 ;1066
00008a  3140              ADDS     r1,r1,#0x40           ;1066
00008c  f7fffffe          BL       RC522_Read
000090  491b              LDR      r1,|L11.256|
000092  2005              MOVS     r0,#5                 ;1067
000094  3150              ADDS     r1,r1,#0x50           ;1067
000096  f7fffffe          BL       RC522_Read
00009a  4919              LDR      r1,|L11.256|
00009c  2006              MOVS     r0,#6                 ;1068
00009e  3160              ADDS     r1,r1,#0x60           ;1068
0000a0  f7fffffe          BL       RC522_Read
0000a4  4916              LDR      r1,|L11.256|
0000a6  2007              MOVS     r0,#7                 ;1069
0000a8  3170              ADDS     r1,r1,#0x70           ;1069
0000aa  f7fffffe          BL       RC522_Read
0000ae  4b13              LDR      r3,|L11.252|
0000b0  2108              MOVS     r1,#8                 ;1072
0000b2  f103020a          ADD      r2,r3,#0xa            ;1072
0000b6  2060              MOVS     r0,#0x60              ;1072
0000b8  f7fffffe          BL       RC522_Auth
0000bc  4604              MOV      r4,r0                 ;1072
0000be  2c01              CMP      r4,#1                 ;1074
0000c0  d003              BEQ      |L11.202|
0000c2  f7fffffe          BL       RC522_Halt
0000c6  4620              MOV      r0,r4                 ;1077
0000c8  e7ba              B        |L11.64|
                  |L11.202|
0000ca  490d              LDR      r1,|L11.256|
0000cc  2008              MOVS     r0,#8                 ;1081
0000ce  3180              ADDS     r1,r1,#0x80           ;1081
0000d0  f7fffffe          BL       RC522_Read
0000d4  490a              LDR      r1,|L11.256|
0000d6  2009              MOVS     r0,#9                 ;1082
0000d8  3190              ADDS     r1,r1,#0x90           ;1082
0000da  f7fffffe          BL       RC522_Read
0000de  4908              LDR      r1,|L11.256|
0000e0  200a              MOVS     r0,#0xa               ;1083
0000e2  31a0              ADDS     r1,r1,#0xa0           ;1083
0000e4  f7fffffe          BL       RC522_Read
0000e8  4905              LDR      r1,|L11.256|
0000ea  200b              MOVS     r0,#0xb               ;1084
0000ec  31b0              ADDS     r1,r1,#0xb0           ;1084
0000ee  f7fffffe          BL       RC522_Read
0000f2  f7fffffe          BL       RC522_Halt
0000f6  4620              MOV      r0,r4                 ;1088
0000f8  e7a2              B        |L11.64|
;;;1090   
                          ENDP

0000fa  0000              DCW      0x0000
                  |L11.252|
                          DCD      ||.data||+0x1d
                  |L11.256|
                          DCD      ||.bss||

                          AREA ||i.RC522_ReadRegister||, CODE, READONLY, ALIGN=2

                  RC522_ReadRegister PROC
;;;664    
;;;665    static uint8_t RC522_ReadRegister(uint8_t addr) 
000000  b538              PUSH     {r3-r5,lr}
;;;666    {
;;;667    	rc522_tx_buff[0] = addr;
000002  490e              LDR      r1,|L12.60|
000004  7008              STRB     r0,[r1,#0]
;;;668    	if(HAL_I2C_Master_Transmit(&hi2c1, RC522_WRITE, rc522_tx_buff, 1U, RC522_TIMEOUT) != HAL_OK) Error_Handler();
000006  2405              MOVS     r4,#5
000008  460a              MOV      r2,r1
00000a  2301              MOVS     r3,#1
00000c  217e              MOVS     r1,#0x7e
00000e  480c              LDR      r0,|L12.64|
000010  9400              STR      r4,[sp,#0]
000012  f7fffffe          BL       HAL_I2C_Master_Transmit
000016  b108              CBZ      r0,|L12.28|
000018  f7fffffe          BL       Error_Handler
                  |L12.28|
;;;669    	if(HAL_I2C_Master_Receive(&hi2c1, RC522_READ, rc522_rx_buff, 1U, RC522_TIMEOUT) != HAL_OK) Error_Handler();
00001c  4a07              LDR      r2,|L12.60|
00001e  2301              MOVS     r3,#1
000020  3a10              SUBS     r2,r2,#0x10
000022  217f              MOVS     r1,#0x7f
000024  4806              LDR      r0,|L12.64|
000026  9400              STR      r4,[sp,#0]
000028  f7fffffe          BL       HAL_I2C_Master_Receive
00002c  b108              CBZ      r0,|L12.50|
00002e  f7fffffe          BL       Error_Handler
                  |L12.50|
;;;670        return (rc522_rx_buff[0]);
000032  4802              LDR      r0,|L12.60|
000034  3810              SUBS     r0,r0,#0x10
000036  7800              LDRB     r0,[r0,#0]  ; rc522_rx_buff
;;;671    }
000038  bd38              POP      {r3-r5,pc}
;;;672    
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      ||.bss||+0x222
                  |L12.64|
                          DCD      hi2c1

                          AREA ||i.RC522_Request||, CODE, READONLY, ALIGN=1

                  RC522_Request PROC
;;;741    
;;;742    static RC522_StatusTypeDef RC522_Request(uint8_t reqMode, uint8_t* TagType) 
000000  b57c              PUSH     {r2-r6,lr}
;;;743    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;744    	RC522_StatusTypeDef status;  
;;;745    	uint16_t backBits;                                  //The received data bits
;;;746    
;;;747    	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x07U);	// TxLastBits = BitFramingReg[2..0]	???
000006  2107              MOVS     r1,#7
000008  200d              MOVS     r0,#0xd
00000a  f7fffffe          BL       RC522_WriteRegister
;;;748    
;;;749    	TagType[0] = reqMode;
00000e  7025              STRB     r5,[r4,#0]
;;;750    	status = RC522_ToCard(PCD_TRANSCEIVE, TagType, 1U, TagType, &backBits);
000010  a801              ADD      r0,sp,#4
000012  9000              STR      r0,[sp,#0]
000014  4623              MOV      r3,r4
000016  2201              MOVS     r2,#1
000018  4621              MOV      r1,r4
00001a  200c              MOVS     r0,#0xc
00001c  f7fffffe          BL       RC522_ToCard
;;;751    
;;;752    	if ((status != MI_OK) || (backBits != (1U << 4))) 
000020  2801              CMP      r0,#1
000022  d103              BNE      |L13.44|
000024  f8bd1004          LDRH     r1,[sp,#4]
000028  2910              CMP      r1,#0x10
00002a  d000              BEQ      |L13.46|
                  |L13.44|
;;;753        {
;;;754    		status = MI_ERR;
00002c  2000              MOVS     r0,#0
                  |L13.46|
;;;755    	}
;;;756    
;;;757    	return (status);
;;;758    }
00002e  bd7c              POP      {r2-r6,pc}
;;;759    
                          ENDP


                          AREA ||i.RC522_Reset||, CODE, READONLY, ALIGN=2

                  RC522_Reset PROC
;;;698    
;;;699    static RC522_StatusTypeDef RC522_Reset(void) 
000000  b570              PUSH     {r4-r6,lr}
;;;700    {  
;;;701        uint32_t delay;
;;;702        /**
;;;703        *   Issue the SoftReset command.
;;;704        */
;;;705    	RC522_WriteRegister(RC522_REG_COMMAND, PCD_RESETPHASE);
000002  210f              MOVS     r1,#0xf
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       RC522_WriteRegister
;;;706        /**
;;;707        *   The datasheet does not mention how long the SoftRest command takes to complete.
;;;708        *   But the RC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg)
;;;709        *   Section 8.8.2 in the datasheet says the oscillator start-up time_m is the start up time_m of the crystal + 37,74us. Let us be generous: 50ms.
;;;710        */
;;;711        HAL_Delay(5);
00000a  2005              MOVS     r0,#5
00000c  f7fffffe          BL       HAL_Delay
;;;712    
;;;713    	delay = 500U;
000010  f44f74fa          MOV      r4,#0x1f4
;;;714        /**
;;;715        *   Wait for the PowerDown bit in CommandReg to be cleared
;;;716        */	
;;;717        while (RC522_ReadRegister(RC522_REG_COMMAND) & (1U << 4))
;;;718        {
;;;719    		if(eComState != COM_PACKET_PENDING) RS485_Service();
000014  4d0a              LDR      r5,|L14.64|
000016  e009              B        |L14.44|
                  |L14.24|
000018  7828              LDRB     r0,[r5,#0]  ; eComState
00001a  2801              CMP      r0,#1
00001c  d001              BEQ      |L14.34|
00001e  f7fffffe          BL       RS485_Service
                  |L14.34|
;;;720            /**
;;;721            *   RC522 still restarting - unlikely after waiting 50ms and more
;;;722            *   mifare modul is unresponsive so return error status
;;;723            */
;;;724            --delay;
000022  1e64              SUBS     r4,r4,#1
;;;725            
;;;726            if(delay == 0U)
000024  b14c              CBZ      r4,|L14.58|
;;;727    		{			
;;;728                return (MI_ERR);
;;;729            }
;;;730    		else
;;;731    		{
;;;732    			HAL_Delay(1);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       HAL_Delay
                  |L14.44|
00002c  2001              MOVS     r0,#1                 ;717
00002e  f7fffffe          BL       RC522_ReadRegister
000032  06c0              LSLS     r0,r0,#27             ;717
000034  d4f0              BMI      |L14.24|
;;;733    		}
;;;734        }
;;;735        /**
;;;736        *   reset finished - return OK flag
;;;737        */
;;;738        return (MI_OK);
000036  2001              MOVS     r0,#1
;;;739    }
000038  bd70              POP      {r4-r6,pc}
                  |L14.58|
00003a  2000              MOVS     r0,#0                 ;728
00003c  bd70              POP      {r4-r6,pc}
;;;740    
                          ENDP

00003e  0000              DCW      0x0000
                  |L14.64|
                          DCD      eComState

                          AREA ||i.RC522_SelectTag||, CODE, READONLY, ALIGN=1

                  RC522_SelectTag PROC
;;;931    
;;;932    static uint8_t RC522_SelectTag(uint8_t* serNum) 
000000  b510              PUSH     {r4,lr}
;;;933    {
000002  b086              SUB      sp,sp,#0x18
;;;934        RC522_StatusTypeDef status;
;;;935    	uint32_t i;
;;;936    	uint16_t recvBits;
;;;937    	uint8_t buffer[9], size; 
;;;938    
;;;939    	buffer[0] = PICC_SELECTTAG;
000004  2193              MOVS     r1,#0x93
000006  f88d1008          STRB     r1,[sp,#8]
;;;940    	buffer[1] = 0x70U;
00000a  2170              MOVS     r1,#0x70
00000c  f88d1009          STRB     r1,[sp,#9]
;;;941        
;;;942    	for (i = 0U; i < 5U; i++) 
000010  2100              MOVS     r1,#0
000012  aa02              ADD      r2,sp,#8              ;937
                  |L15.20|
;;;943        {
;;;944    		buffer[i + 2U] = *(serNum + i);
000014  1854              ADDS     r4,r2,r1
000016  5c43              LDRB     r3,[r0,r1]
000018  70a3              STRB     r3,[r4,#2]
00001a  1c49              ADDS     r1,r1,#1              ;942
00001c  2905              CMP      r1,#5                 ;942
00001e  d3f9              BCC      |L15.20|
;;;945    	}
;;;946        
;;;947    	RC522_CalculateCRC(buffer, 7U, &buffer[7]);		//??
000020  1dd2              ADDS     r2,r2,#7
000022  2107              MOVS     r1,#7
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       RC522_CalculateCRC
;;;948    	status = RC522_ToCard(PCD_TRANSCEIVE, buffer, 9U, buffer, &recvBits);
00002a  a805              ADD      r0,sp,#0x14
00002c  9000              STR      r0,[sp,#0]
00002e  ab02              ADD      r3,sp,#8
000030  2209              MOVS     r2,#9
000032  a902              ADD      r1,sp,#8
000034  200c              MOVS     r0,#0xc
000036  f7fffffe          BL       RC522_ToCard
;;;949    
;;;950    	if ((status == MI_OK) && (recvBits == 0x18U)) 
00003a  2801              CMP      r0,#1
00003c  d103              BNE      |L15.70|
00003e  f8bd0014          LDRH     r0,[sp,#0x14]
000042  2818              CMP      r0,#0x18
000044  d002              BEQ      |L15.76|
                  |L15.70|
;;;951        {
;;;952    		size = buffer[0]; 
;;;953    	} 
;;;954        else 
;;;955        {
;;;956    		size = 0U;
000046  2000              MOVS     r0,#0
                  |L15.72|
;;;957    	}
;;;958    
;;;959    	return (size);
;;;960    }
000048  b006              ADD      sp,sp,#0x18
00004a  bd10              POP      {r4,pc}
                  |L15.76|
00004c  f89d0008          LDRB     r0,[sp,#8]            ;952
000050  e7fa              B        |L15.72|
;;;961    
                          ENDP


                          AREA ||i.RC522_Service||, CODE, READONLY, ALIGN=2

                  RC522_Service PROC
;;;267    
;;;268    void RC522_Service(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;269    {	
000004  b085              SUB      sp,sp,#0x14
;;;270        uint8_t ee_buff[8];
;;;271        uint32_t i;
;;;272        RTC_TimeTypeDef time_m;
;;;273        RTC_DateTypeDef date_m;
;;;274        static uint32_t mifare_time = 0U;    
;;;275    	static uint32_t mifare_timer = 0U;
;;;276        static uint32_t handmaid_card_time = 0U;    
;;;277        static uint32_t handmaid_card_timer = 0;
;;;278    	static uint8_t handmaid_card_cycles = 0U;
;;;279        
;;;280        if(eComState == COM_PACKET_RECEIVED) RS485_Service();
000006  4ffe              LDR      r7,|L16.1024|
000008  7838              LDRB     r0,[r7,#0]  ; eComState
00000a  2802              CMP      r0,#2
00000c  d101              BNE      |L16.18|
00000e  f7fffffe          BL       RS485_Service
                  |L16.18|
;;;281        
;;;282        if(IsRC522_ExtendDoorlockTimeActiv())
000012  4cfc              LDR      r4,|L16.1028|
000014  6960              LDR      r0,[r4,#0x14]  ; mifare_process_flags
000016  0780              LSLS     r0,r0,#30
000018  d509              BPL      |L16.46|
;;;283        {
;;;284            RC522_ExtendDoorlockTimeReset();
00001a  6960              LDR      r0,[r4,#0x14]  ; mifare_process_flags
00001c  f0200002          BIC      r0,r0,#2
000020  6160              STR      r0,[r4,#0x14]  ; mifare_process_flags
;;;285            mifare_timer = HAL_GetTick(); 
000022  f7fffffe          BL       HAL_GetTick
000026  60a0              STR      r0,[r4,#8]  ; mifare_timer
;;;286            mifare_time = RC522_CARD_VALID_EVENT_TIME;
000028  f640408a          MOV      r0,#0xc8a
00002c  6060              STR      r0,[r4,#4]  ; mifare_time
                  |L16.46|
;;;287        }
;;;288        
;;;289    	if((HAL_GetTick() - handmaid_card_timer) >= handmaid_card_time)
00002e  f7fffffe          BL       HAL_GetTick
000032  6921              LDR      r1,[r4,#0x10]  ; handmaid_card_timer
000034  f04f0a00          MOV      r10,#0
000038  1a40              SUBS     r0,r0,r1
00003a  68e1              LDR      r1,[r4,#0xc]  ; handmaid_card_time
00003c  4288              CMP      r0,r1
00003e  d30c              BCC      |L16.90|
;;;290    	{
;;;291    		if ((handmaid_card_cycles == 1U) && (ROOM_Status == ROOM_HANDMAID_IN)) RC522_HandmaidReentranceEnable();
000040  7820              LDRB     r0,[r4,#0]  ; handmaid_card_cycles
000042  2801              CMP      r0,#1
000044  d107              BNE      |L16.86|
000046  48f0              LDR      r0,|L16.1032|
000048  7800              LDRB     r0,[r0,#0]  ; ROOM_Status
00004a  2808              CMP      r0,#8
00004c  d103              BNE      |L16.86|
00004e  6960              LDR      r0,[r4,#0x14]  ; mifare_process_flags
000050  f0400001          ORR      r0,r0,#1
000054  6160              STR      r0,[r4,#0x14]  ; mifare_process_flags
                  |L16.86|
;;;292    		handmaid_card_cycles = 0U;
000056  f884a000          STRB     r10,[r4,#0]
                  |L16.90|
;;;293    	}
;;;294    
;;;295        if(((HAL_GetTick() - mifare_timer) < mifare_time) || IsRS485_UpdateActiv()) return;
00005a  f7fffffe          BL       HAL_GetTick
00005e  68a1              LDR      r1,[r4,#8]  ; mifare_timer
000060  1a40              SUBS     r0,r0,r1
000062  6861              LDR      r1,[r4,#4]  ; mifare_time
000064  4288              CMP      r0,r1
000066  d37d              BCC      |L16.356|
000068  48e8              LDR      r0,|L16.1036|
00006a  6800              LDR      r0,[r0,#0]  ; rs485_flags
00006c  07c0              LSLS     r0,r0,#31
00006e  d179              BNE      |L16.356|
;;;296        else mifare_timer = HAL_GetTick();
000070  f7fffffe          BL       HAL_GetTick
000074  60a0              STR      r0,[r4,#8]  ; mifare_timer
;;;297        
;;;298    	if (RC522_Check(card_serial) == MI_OK)
000076  48e3              LDR      r0,|L16.1028|
000078  3022              ADDS     r0,r0,#0x22
00007a  f7fffffe          BL       RC522_Check
;;;299    	{
;;;300    		RC522_ClearData();
;;;301    		RC522_ReadCard();
;;;302    		RC522_VerifyData();
;;;303    		
;;;304            HAL_RTC_GetTime(&hrtc, &time_m, RTC_FORMAT_BCD);
;;;305            HAL_RTC_GetDate(&hrtc, &date_m, RTC_FORMAT_BCD);
;;;306            
;;;307    		if ((sCard.system_id != SYSTEM_ID_INVALID) && \
;;;308    			(sCard.system_id != SYSTEM_ID_DATA_INVALID) && \
;;;309    			((sCard.card_status == CARD_VALID) || \
;;;310    			(sCard.user_group == CARD_USER_GROUP_MANAGER) || \
;;;311    			(sCard.user_group == CARD_USER_GROUP_SERVICE) || \
;;;312    			(sCard.user_group == CARD_USER_GROUP_HANDMAID)))
;;;313    		{	
;;;314    			if(sCard.user_group == CARD_USER_GROUP_GUEST)
;;;315    			{
;;;316    				if(ROOM_Status == ROOM_OUT_OF_ORDER)
;;;317    				{
;;;318    					handmaid_card_cycles = 1U;
;;;319    					DISPLAY_RoomOutOfServiceImage();
00007e  4de4              LDR      r5,|L16.1040|
;;;320    					SignalBuzzer = BUZZ_CARD_INVALID;
000080  4ee4              LDR      r6,|L16.1044|
;;;321                        mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;322    				}
;;;323    				else
;;;324    				{
;;;325    					ee_buff[0] = EE_ROOM_POWER_TIMEOUT >> 8U;
;;;326    					ee_buff[1] = EE_ROOM_POWER_TIMEOUT & 0xFFU;
;;;327    					ee_buff[2] = sCard.aExpiryTime[0];
;;;328    					ee_buff[3] = sCard.aExpiryTime[1];
;;;329    					ee_buff[4] = sCard.aExpiryTime[2];
;;;330    					ee_buff[5] = sCard.aExpiryTime[3];
;;;331    					ee_buff[6] = sCard.aExpiryTime[4];
;;;332    					SIGNAL_ExpiryTimeFromGuestCardSet();
;;;333    					if((ROOM_Status == ROOM_IDLE) || (ROOM_Status == ROOM_READY)) ROOM_Status = ROOM_BUSY;
;;;334    					if (HAL_I2C_Master_Transmit(&hi2c1, I2C_EE_WRITE, ee_buff, 7U, I2C_EE_TIMEOUT) != HAL_OK) Error_Handler();
;;;335    					if (HAL_I2C_IsDeviceReady(&hi2c1, I2C_EE_READ, I2C_EE_TRIALS, I2C_EE_WRITE_DELAY) != HAL_OK) Error_Handler();	
;;;336    					
;;;337    					i = 6U;
;;;338    
;;;339    					do
;;;340    					{
;;;341                            --i;
;;;342    						aRoomPowerExpiryDateTime[i] = sCard.aExpiryTime[i];
000082  f8dfb394          LDR      r11,|L16.1048|
000086  f04f0902          MOV      r9,#2                 ;280
00008a  2801              CMP      r0,#1                 ;298
00008c  d029              BEQ      |L16.226|
;;;343    					}
;;;344                        while(i != 0U);
;;;345    				}	
;;;346    			}
;;;347    			else if(((sCard.user_group == CARD_USER_GROUP_HANDMAID) && !IsIndorCardReaderActiv() && !IsDonNotDisturbActiv()) || \
;;;348    					(sCard.user_group == CARD_USER_GROUP_MANAGER) || \
;;;349    					(sCard.user_group == CARD_USER_GROUP_SERVICE))
;;;350    			{
;;;351    				if((sCard.user_group == CARD_USER_GROUP_MANAGER) || \
;;;352    					(sCard.user_group == CARD_USER_GROUP_SERVICE))
;;;353    				{
;;;354    					aRoomPowerExpiryDateTime[0] = date_m.Date;
;;;355    					aRoomPowerExpiryDateTime[1] = date_m.Month;
;;;356    					aRoomPowerExpiryDateTime[2] = date_m.Year;
;;;357    					aRoomPowerExpiryDateTime[4] = time_m.Minutes;
;;;358    					SIGNAL_ExpiryTimeFromGuestCardReset();
;;;359    					
;;;360    					if((time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED) < 0x24U)
;;;361    					{
;;;362    						aRoomPowerExpiryDateTime[3] = (time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED);
;;;363    					}
;;;364    					else
;;;365    					{
;;;366    						aRoomPowerExpiryDateTime[3] = 0x24U;
;;;367    					}
;;;368    				}
;;;369    				else if (sCard.user_group == CARD_USER_GROUP_HANDMAID)
;;;370    				{
;;;371    					if(ROOM_Status == ROOM_OUT_OF_ORDER)
;;;372    					{
;;;373    						handmaid_card_cycles = 1U;
;;;374    						DISPLAY_RoomOutOfServiceImage();
;;;375    						SignalBuzzer = BUZZ_CARD_INVALID;
;;;376                            mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;377    					}
;;;378    					else if ((sCard.aExpiryTime[0] == EXPIRY_TIME_INVALID) ||	\
;;;379    						(sCard.aExpiryTime[1] == EXPIRY_TIME_INVALID) ||	\
;;;380    						(sCard.aExpiryTime[2] == EXPIRY_TIME_INVALID) || 	\
;;;381    						(sCard.aExpiryTime[3] == EXPIRY_TIME_INVALID) || 	\
;;;382    						(sCard.aExpiryTime[4] == EXPIRY_TIME_INVALID) ||	\
;;;383    						(sCard.aExpiryTime[5] == EXPIRY_TIME_INVALID))
;;;384    					{
;;;385    						handmaid_card_cycles = 1U;
;;;386    						DISPLAY_TimeExpiredImage();
;;;387    						SignalBuzzer = BUZZ_CARD_INVALID;
;;;388                            mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;389    					}
;;;390    					else
;;;391    					{
;;;392    						++handmaid_card_cycles;
;;;393    						SignalBuzzer = BUZZ_CARD_VALID;
;;;394                            mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;395                            handmaid_card_time = RC522_HANDMAID_CARD_DELAY;
;;;396    						handmaid_card_timer = HAL_GetTick();
;;;397                            
;;;398    						if ((ROOM_Status == ROOM_CLEANING) || (ROOM_Status == ROOM_BEDDING_REPLACEMENT) ||(ROOM_Status == ROOM_GENERAL_CLEANING))
;;;399    						{
;;;400    							handmaid_card_cycles = 0U;
;;;401    							ROOM_Status = ROOM_HANDMAID_IN;						
;;;402    							aRoomPowerExpiryDateTime[0] = date_m.Date;
;;;403    							aRoomPowerExpiryDateTime[1] = date_m.Month;
;;;404    							aRoomPowerExpiryDateTime[2] = date_m.Year;
;;;405    							aRoomPowerExpiryDateTime[4] = time_m.Minutes;
;;;406    							SIGNAL_ExpiryTimeFromGuestCardReset();
;;;407    							
;;;408    							if((time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED) < 0x24U)
;;;409    							{
;;;410    								aRoomPowerExpiryDateTime[3] = (time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED);
;;;411    							}
;;;412    							else
;;;413    							{
;;;414    								aRoomPowerExpiryDateTime[3] = 0x24U;
;;;415    							}
;;;416    						}
;;;417    						else if(handmaid_card_cycles == 3U)
;;;418    						{
;;;419    							ROOM_Status = ROOM_READY;
;;;420    							SignalBuzzer = BUZZ_HANDMAID_FINISH;
;;;421                                mifare_time = RC522_CARD_VALID_EVENT_TIME;
;;;422                            }
;;;423    						else if (ROOM_Status != ROOM_HANDMAID_IN)
;;;424    						{
;;;425    							handmaid_card_cycles = 0U;	
;;;426    								
;;;427    							if(IsHandmaidRequested())
;;;428    							{
;;;429    								ROOM_OldStatus = ROOM_BUSY;
;;;430    								ROOM_Status = ROOM_FORCING_DND;
;;;431    							}
;;;432    							else
;;;433    							{
;;;434    								ROOM_Status = ROOM_READY;
;;;435    								aRoomPowerExpiryDateTime[0] = date_m.Date;
;;;436    								aRoomPowerExpiryDateTime[1] = date_m.Month;
;;;437    								aRoomPowerExpiryDateTime[2] = date_m.Year;
;;;438    								aRoomPowerExpiryDateTime[4] = time_m.Minutes;
;;;439    								SIGNAL_ExpiryTimeFromGuestCardReset();
;;;440    								
;;;441    								if((time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED) < 0x24U)
;;;442    								{
;;;443    									aRoomPowerExpiryDateTime[3] = (time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED);
;;;444    								}
;;;445    								else
;;;446    								{
;;;447    									aRoomPowerExpiryDateTime[3] = 0x24U;
;;;448    								}								
;;;449    							}
;;;450    						}
;;;451    					}	
;;;452    				}
;;;453    			}
;;;454    			
;;;455    			if((sCard.user_group == CARD_USER_GROUP_HANDMAID) && \
;;;456    				(IsIndorCardReaderActiv() || IsDonNotDisturbActiv()))
;;;457    			{
;;;458                    
;;;459    				if(ROOM_Status == ROOM_OUT_OF_ORDER)
;;;460    				{
;;;461    					handmaid_card_cycles = 1U;
;;;462    					DISPLAY_RoomOutOfServiceImage();
;;;463    					SignalBuzzer = BUZZ_CARD_INVALID;
;;;464                        mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;465    				}
;;;466    				else if ((sCard.aExpiryTime[0] == EXPIRY_TIME_INVALID) ||	\
;;;467    						(sCard.aExpiryTime[1] == EXPIRY_TIME_INVALID) ||	\
;;;468    						(sCard.aExpiryTime[2] == EXPIRY_TIME_INVALID) || 	\
;;;469    						(sCard.aExpiryTime[3] == EXPIRY_TIME_INVALID) || 	\
;;;470    						(sCard.aExpiryTime[4] == EXPIRY_TIME_INVALID) ||	\
;;;471    						(sCard.aExpiryTime[5] == EXPIRY_TIME_INVALID))					
;;;472    				{						
;;;473    					handmaid_card_cycles = 1U;						
;;;474    					DISPLAY_TimeExpiredImage();						
;;;475    					SignalBuzzer = BUZZ_CARD_INVALID;
;;;476                        mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;477    				}					
;;;478    				else					
;;;479    				{						
;;;480                        handmaid_card_time = RC522_HANDMAID_CARD_DELAY;
;;;481                        handmaid_card_timer = HAL_GetTick();
;;;482                        
;;;483    					if(++handmaid_card_cycles == 3U)
;;;484    					{
;;;485    						handmaid_card_cycles = 0U;
;;;486    						SignalBuzzer = BUZZ_HANDMAID_FINISH;
;;;487                            mifare_time = RC522_CARD_VALID_EVENT_TIME;
;;;488                            
;;;489    						if(IsHandmaidRequested())
;;;490    						{
;;;491    							ROOM_OldStatus = ROOM_BUSY;
;;;492    							ROOM_Status = ROOM_FORCING_DND;
;;;493    						}
;;;494    						else
;;;495    						{
;;;496    							ROOM_Status = ROOM_BUSY;
;;;497    						}
;;;498    					}
;;;499    					else
;;;500    					{
;;;501    						SignalBuzzer = BUZZ_CARD_VALID;
;;;502                            mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;503    					}
;;;504    				}
;;;505    			}
;;;506    			else if(handmaid_card_cycles == 0U)
;;;507    			{
;;;508    #ifdef DISPLAY_CARD_USER_NAME
;;;509    				/**
;;;510    				*	will use rc522 rx and tx buffer as temp for displaying user data
;;;511    				*/
;;;512    				ClearBuffer(rc522_rx_buff, sizeof(rc522_rx_buff));
;;;513                    ClearBuffer(rc522_tx_buff, sizeof(rc522_tx_buff));
;;;514                    
;;;515    				i = 0U;
;;;516    
;;;517    				while((i < 16U) && (Sector_0.Block_1[i] != 0xFFU))	// copy user data from card to display buffer
;;;518    				{	
;;;519    					rc522_rx_buff[i] = Sector_0.Block_1[i];
;;;520    					++i;
;;;521    				}
;;;522    
;;;523    				if((rc522_rx_buff[0] != 0U) && (Sector_2.Block_0[11] == 'M'))
;;;524    				{
;;;525    					rc522_rx_buff[0] |= (1U << 7);
;;;526    				}
;;;527    
;;;528    				i = 0U;
;;;529    
;;;530    				while((i < 16U) && (Sector_0.Block_2[i] != 0xff))	// copy user data from card to display buffer
;;;531    				{	
;;;532    					rc522_tx_buff[i] = Sector_0.Block_2[i];
;;;533    					++i;
;;;534    				}
;;;535    #endif
;;;536    				DoorLockCoil_On();
;;;537    				PowerContactor_On();
;;;538    				DISPLAY_CardValidImage();			
;;;539    				SignalBuzzer = BUZZ_CARD_VALID;
;;;540                    mifare_time = RC522_CARD_VALID_EVENT_TIME;
;;;541    			}
;;;542    			else if(handmaid_card_cycles == 3U)
;;;543    			{
;;;544    				handmaid_card_cycles = 0U;
;;;545    			}
;;;546    		}
;;;547    		else
;;;548    		{
;;;549    			handmaid_card_cycles = 0U;
;;;550    			SignalBuzzer = BUZZ_CARD_INVALID;
;;;551                mifare_time = RC522_CARD_INVALID_EVENT_TIME;
;;;552    			
;;;553    			if (sCard.system_id == SYSTEM_ID_INVALID) 
;;;554    			{
;;;555    				DISPLAY_WrongRoomImage();
;;;556    			}
;;;557    			else if(sCard.user_group == CARD_USER_GROUP_GUEST) 
;;;558    			{
;;;559    				if (sCard.controller_id == CONTROLLER_ID_INVALID) 
;;;560    				{
;;;561    					DISPLAY_WrongRoomImage();
;;;562    				}
;;;563    				else if((sCard.aExpiryTime[0] == EXPIRY_TIME_INVALID) || \
;;;564    						(sCard.aExpiryTime[1] == EXPIRY_TIME_INVALID) || \
;;;565    						(sCard.aExpiryTime[2] == EXPIRY_TIME_INVALID) || \
;;;566    						(sCard.aExpiryTime[3] == EXPIRY_TIME_INVALID) || \
;;;567    						(sCard.aExpiryTime[4] == EXPIRY_TIME_INVALID) || \
;;;568    						(sCard.aExpiryTime[5] == EXPIRY_TIME_INVALID))
;;;569    				{
;;;570    					DISPLAY_TimeExpiredImage();
;;;571    				}
;;;572    				else
;;;573    				{
;;;574    					DISPLAY_CardInvalidImage();
;;;575    				}
;;;576    			}
;;;577    		}		
;;;578    	}
;;;579    	else if (IsRC522_HandmaidReentranceActiv())
00008e  6960              LDR      r0,[r4,#0x14]  ; mifare_process_flags
000090  07c0              LSLS     r0,r0,#31
000092  d068              BEQ      |L16.358|
;;;580    	{
;;;581    		HAL_RTC_GetTime(&hrtc, &time_m, RTC_FORMAT_BCD);
000094  2201              MOVS     r2,#1
000096  a902              ADD      r1,sp,#8
000098  48e0              LDR      r0,|L16.1052|
00009a  f7fffffe          BL       HAL_RTC_GetTime
;;;582    		HAL_RTC_GetDate(&hrtc, &date_m, RTC_FORMAT_BCD);
00009e  2201              MOVS     r2,#1
0000a0  a901              ADD      r1,sp,#4
0000a2  48de              LDR      r0,|L16.1052|
0000a4  f7fffffe          BL       HAL_RTC_GetDate
;;;583    							
;;;584    		aRoomPowerExpiryDateTime[0] = date_m.Date;
0000a8  f89d0006          LDRB     r0,[sp,#6]
0000ac  f88b0000          STRB     r0,[r11,#0]
;;;585    		aRoomPowerExpiryDateTime[1] = date_m.Month;
0000b0  f89d0005          LDRB     r0,[sp,#5]
0000b4  f88b0001          STRB     r0,[r11,#1]
;;;586    		aRoomPowerExpiryDateTime[2] = date_m.Year;
0000b8  f89d0007          LDRB     r0,[sp,#7]
0000bc  f88b0002          STRB     r0,[r11,#2]
;;;587    		aRoomPowerExpiryDateTime[4] = time_m.Minutes;
0000c0  f89d0009          LDRB     r0,[sp,#9]
0000c4  f88b0004          STRB     r0,[r11,#4]
;;;588    		SIGNAL_ExpiryTimeFromGuestCardReset();
0000c8  48d5              LDR      r0,|L16.1056|
0000ca  6801              LDR      r1,[r0,#0]  ; signal_flags
0000cc  f0210101          BIC      r1,r1,#1
0000d0  6001              STR      r1,[r0,#0]  ; signal_flags
;;;589    		
;;;590    		if((time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED) < 0x24U)
0000d2  f89d0008          LDRB     r0,[sp,#8]
0000d6  1c80              ADDS     r0,r0,#2
0000d8  2824              CMP      r0,#0x24
0000da  d278              BCS      |L16.462|
;;;591    		{
;;;592    			aRoomPowerExpiryDateTime[3] = (time_m.Hours + RC522_POWER_VALID_GROUP_PERMITED);
0000dc  f88b0003          STRB     r0,[r11,#3]
0000e0  e237              B        |L16.1362|
                  |L16.226|
0000e2  f7fffffe          BL       RC522_ClearData
0000e6  f7fffffe          BL       RC522_ReadCard
0000ea  f7fffffe          BL       RC522_VerifyData
0000ee  2201              MOVS     r2,#1                 ;304
0000f0  a902              ADD      r1,sp,#8              ;304
0000f2  48ca              LDR      r0,|L16.1052|
0000f4  f7fffffe          BL       HAL_RTC_GetTime
0000f8  2201              MOVS     r2,#1                 ;305
0000fa  a901              ADD      r1,sp,#4              ;305
0000fc  48c7              LDR      r0,|L16.1052|
0000fe  f7fffffe          BL       HAL_RTC_GetDate
000102  4ac8              LDR      r2,|L16.1060|
000104  2701              MOVS     r7,#1                 ;291
000106  f24038db          MOV      r8,#0x3db             ;321
00010a  8a10              LDRH     r0,[r2,#0x10]         ;307  ; sCard
00010c  287b              CMP      r0,#0x7b              ;307
00010e  d00b              BEQ      |L16.296|
000110  287d              CMP      r0,#0x7d              ;308
000112  d009              BEQ      |L16.296|
000114  7811              LDRB     r1,[r2,#0]            ;309  ; sCard
000116  2906              CMP      r1,#6                 ;309
000118  d02f              BEQ      |L16.378|
00011a  7991              LDRB     r1,[r2,#6]            ;310  ; sCard
00011c  294d              CMP      r1,#0x4d              ;310
00011e  d02c              BEQ      |L16.378|
000120  2953              CMP      r1,#0x53              ;311
000122  d02a              BEQ      |L16.378|
000124  2948              CMP      r1,#0x48              ;312
000126  d028              BEQ      |L16.378|
                  |L16.296|
000128  f884a000          STRB     r10,[r4,#0]           ;549
00012c  7037              STRB     r7,[r6,#0]            ;550
00012e  f8c48004          STR      r8,[r4,#4]            ;551  ; mifare_time
000132  287b              CMP      r0,#0x7b              ;553
000134  d079              BEQ      |L16.554|
000136  7990              LDRB     r0,[r2,#6]            ;557  ; sCard
000138  2847              CMP      r0,#0x47              ;557
00013a  d11b              BNE      |L16.372|
00013c  89d0              LDRH     r0,[r2,#0xe]          ;559  ; sCard
00013e  282e              CMP      r0,#0x2e              ;559
000140  d074              BEQ      |L16.556|
000142  79d0              LDRB     r0,[r2,#7]            ;563  ; sCard
000144  283e              CMP      r0,#0x3e              ;563
                  |L16.326|
000146  d072              BEQ      |L16.558|
000148  7a10              LDRB     r0,[r2,#8]            ;564  ; sCard
00014a  283e              CMP      r0,#0x3e              ;564
00014c  d0fb              BEQ      |L16.326|
00014e  7a50              LDRB     r0,[r2,#9]            ;565  ; sCard
000150  283e              CMP      r0,#0x3e              ;565
000152  d0f8              BEQ      |L16.326|
000154  7a90              LDRB     r0,[r2,#0xa]          ;566  ; sCard
000156  283e              CMP      r0,#0x3e              ;566
000158  d0f5              BEQ      |L16.326|
00015a  7ad0              LDRB     r0,[r2,#0xb]          ;567  ; sCard
00015c  283e              CMP      r0,#0x3e              ;567
00015e  d0f2              BEQ      |L16.326|
000160  7b10              LDRB     r0,[r2,#0xc]          ;568  ; sCard
000162  e001              B        |L16.360|
                  |L16.356|
000164  e006              B        |L16.372|
                  |L16.358|
000166  e20b              B        |L16.1408|
                  |L16.360|
000168  283e              CMP      r0,#0x3e              ;568
00016a  d0ec              BEQ      |L16.326|
00016c  6828              LDR      r0,[r5,#0]            ;574  ; display_flags
00016e  f4407000          ORR      r0,r0,#0x200          ;574
000172  6028              STR      r0,[r5,#0]            ;574  ; display_flags
                  |L16.372|
;;;593    		}
;;;594    		else
;;;595    		{
;;;596    			aRoomPowerExpiryDateTime[3] = 0x24U;
;;;597    		}
;;;598    		
;;;599    		DoorLockCoil_On();
;;;600    		PowerContactor_On();
;;;601    		DISPLAY_CardValidImage();			
;;;602    		SignalBuzzer = BUZZ_CARD_VALID;
;;;603            mifare_time = RC522_CARD_VALID_EVENT_TIME;
;;;604    		RC522_HandmaidReentranceDisable();
;;;605    	}
;;;606    	else
;;;607    	{
;;;608    		if(!(dout_0_7_remote & (1U << 6))) DoorLockCoil_Off();
;;;609    		RC522_RST_SetLow(); 
;;;610    		DIO_SetOuput();
;;;611    		
;;;612    		for (i = 10U; i != 0U; i--)
;;;613    		{
;;;614    			HAL_Delay(1);
;;;615    			if(eComState == COM_PACKET_RECEIVED) RS485_Service();
;;;616    		}
;;;617    		    
;;;618    		RC522_RST_SetHigh(); 
;;;619    		DIO_SetOuput();
;;;620    		
;;;621    		for (i = 10U; i != 0U; i--)
;;;622    		{
;;;623    			HAL_Delay(1);
;;;624    			if(eComState == COM_PACKET_RECEIVED) RS485_Service();
;;;625    		}
;;;626    		
;;;627    		RC522_Reset();
;;;628    		RC522_WriteRegister(RC522_REG_T_MODE, 0x8DU);
;;;629    		RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3EU);
;;;630    		RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30U);           
;;;631    		RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0U);
;;;632    		RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40U);
;;;633    		RC522_WriteRegister(RC522_REG_MODE, 0x3DU);
;;;634    		RC522_AntennaOn();
;;;635            mifare_time = RC522_PROCESS_TIME;
;;;636    	}
;;;637    }
000174  b005              ADD      sp,sp,#0x14
000176  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.378|
00017a  48aa              LDR      r0,|L16.1060|
00017c  7980              LDRB     r0,[r0,#6]            ;314  ; sCard
00017e  2847              CMP      r0,#0x47              ;314
000180  d003              BEQ      |L16.394|
000182  49a8              LDR      r1,|L16.1060|
000184  2848              CMP      r0,#0x48              ;347
000186  d053              BEQ      |L16.560|
000188  e05a              B        |L16.576|
                  |L16.394|
00018a  4a9f              LDR      r2,|L16.1032|
00018c  7811              LDRB     r1,[r2,#0]            ;316  ; ROOM_Status
00018e  2906              CMP      r1,#6                 ;316
000190  d01e              BEQ      |L16.464|
000192  f88da00c          STRB     r10,[sp,#0xc]         ;325
000196  2030              MOVS     r0,#0x30              ;326
000198  f88d000d          STRB     r0,[sp,#0xd]          ;326
00019c  48a1              LDR      r0,|L16.1060|
00019e  79c3              LDRB     r3,[r0,#7]            ;327  ; sCard
0001a0  f88d300e          STRB     r3,[sp,#0xe]          ;327
0001a4  7a03              LDRB     r3,[r0,#8]            ;328  ; sCard
0001a6  f88d300f          STRB     r3,[sp,#0xf]          ;328
0001aa  7a43              LDRB     r3,[r0,#9]            ;329  ; sCard
0001ac  f88d3010          STRB     r3,[sp,#0x10]         ;329
0001b0  7a83              LDRB     r3,[r0,#0xa]          ;330  ; sCard
0001b2  f88d3011          STRB     r3,[sp,#0x11]         ;330
0001b6  7ac0              LDRB     r0,[r0,#0xb]          ;331  ; sCard
0001b8  f88d0012          STRB     r0,[sp,#0x12]         ;331
0001bc  4898              LDR      r0,|L16.1056|
0001be  6803              LDR      r3,[r0,#0]            ;332  ; signal_flags
0001c0  f0430301          ORR      r3,r3,#1              ;332
0001c4  6003              STR      r3,[r0,#0]            ;332  ; signal_flags
0001c6  b181              CBZ      r1,|L16.490|
0001c8  2901              CMP      r1,#1                 ;333
0001ca  d00e              BEQ      |L16.490|
0001cc  e00f              B        |L16.494|
                  |L16.462|
0001ce  e1bd              B        |L16.1356|
                  |L16.464|
0001d0  7027              STRB     r7,[r4,#0]            ;318
0001d2  6828              LDR      r0,[r5,#0]            ;319  ; display_flags
0001d4  f4405080          ORR      r0,r0,#0x1000         ;319
0001d8  6028              STR      r0,[r5,#0]            ;319  ; display_flags
0001da  6828              LDR      r0,[r5,#0]            ;319  ; display_flags
0001dc  f0404000          ORR      r0,r0,#0x80000000     ;319
0001e0  6028              STR      r0,[r5,#0]            ;319  ; display_flags
0001e2  7037              STRB     r7,[r6,#0]            ;320
0001e4  f8c48004          STR      r8,[r4,#4]            ;321  ; mifare_time
0001e8  e0f9              B        |L16.990|
                  |L16.490|
0001ea  f8829000          STRB     r9,[r2,#0]            ;333
                  |L16.494|
0001ee  2005              MOVS     r0,#5                 ;334
0001f0  9000              STR      r0,[sp,#0]            ;334
0001f2  2307              MOVS     r3,#7                 ;334
0001f4  aa03              ADD      r2,sp,#0xc            ;334
0001f6  21a0              MOVS     r1,#0xa0              ;334
0001f8  488b              LDR      r0,|L16.1064|
0001fa  f7fffffe          BL       HAL_I2C_Master_Transmit
0001fe  b108              CBZ      r0,|L16.516|
000200  f7fffffe          BL       Error_Handler
                  |L16.516|
000204  230f              MOVS     r3,#0xf               ;335
000206  2264              MOVS     r2,#0x64              ;335
000208  21a1              MOVS     r1,#0xa1              ;335
00020a  4887              LDR      r0,|L16.1064|
00020c  f7fffffe          BL       HAL_I2C_IsDeviceReady
000210  b108              CBZ      r0,|L16.534|
000212  f7fffffe          BL       Error_Handler
                  |L16.534|
000216  2006              MOVS     r0,#6                 ;337
000218  4982              LDR      r1,|L16.1060|
                  |L16.538|
00021a  1e40              SUBS     r0,r0,#1              ;341
00021c  180a              ADDS     r2,r1,r0              ;342
00021e  79d2              LDRB     r2,[r2,#7]            ;342
000220  f80b2000          STRB     r2,[r11,r0]           ;342
000224  2800              CMP      r0,#0                 ;344
000226  d1f8              BNE      |L16.538|
000228  e0d9              B        |L16.990|
                  |L16.554|
00022a  e174              B        |L16.1302|
                  |L16.556|
00022c  e17c              B        |L16.1320|
                  |L16.558|
00022e  e184              B        |L16.1338|
                  |L16.560|
000230  4a7e              LDR      r2,|L16.1068|
000232  7812              LDRB     r2,[r2,#0]            ;347  ; din_0_7
000234  07d2              LSLS     r2,r2,#31             ;347
000236  d103              BNE      |L16.576|
000238  4a7d              LDR      r2,|L16.1072|
00023a  6812              LDR      r2,[r2,#0]            ;347  ; dio_flags
00023c  07d2              LSLS     r2,r2,#31             ;347
00023e  d003              BEQ      |L16.584|
                  |L16.576|
000240  284d              CMP      r0,#0x4d              ;348
000242  d001              BEQ      |L16.584|
000244  2853              CMP      r0,#0x53              ;349
000246  d105              BNE      |L16.596|
                  |L16.584|
000248  284d              CMP      r0,#0x4d              ;351
00024a  d004              BEQ      |L16.598|
00024c  2853              CMP      r0,#0x53              ;352
00024e  d002              BEQ      |L16.598|
000250  2848              CMP      r0,#0x48              ;369
000252  d021              BEQ      |L16.664|
                  |L16.596|
000254  e0c3              B        |L16.990|
                  |L16.598|
000256  f89d0006          LDRB     r0,[sp,#6]            ;354
00025a  f88b0000          STRB     r0,[r11,#0]           ;354
00025e  f89d0005          LDRB     r0,[sp,#5]            ;355
000262  f88b0001          STRB     r0,[r11,#1]           ;355
000266  f89d0007          LDRB     r0,[sp,#7]            ;356
00026a  f88b0002          STRB     r0,[r11,#2]           ;356
00026e  f89d0009          LDRB     r0,[sp,#9]            ;357
000272  f88b0004          STRB     r0,[r11,#4]           ;357
000276  486a              LDR      r0,|L16.1056|
000278  6801              LDR      r1,[r0,#0]            ;358  ; signal_flags
00027a  f0210101          BIC      r1,r1,#1              ;358
00027e  6001              STR      r1,[r0,#0]            ;358  ; signal_flags
000280  f89d0008          LDRB     r0,[sp,#8]            ;360
000284  1c80              ADDS     r0,r0,#2              ;360
000286  2824              CMP      r0,#0x24              ;360
000288  d202              BCS      |L16.656|
00028a  f88b0003          STRB     r0,[r11,#3]           ;362
00028e  e0a6              B        |L16.990|
                  |L16.656|
000290  2024              MOVS     r0,#0x24              ;366
000292  f88b0003          STRB     r0,[r11,#3]           ;366
000296  e0a2              B        |L16.990|
                  |L16.664|
000298  485b              LDR      r0,|L16.1032|
00029a  7800              LDRB     r0,[r0,#0]            ;371  ; ROOM_Status
00029c  2806              CMP      r0,#6                 ;371
00029e  d037              BEQ      |L16.784|
0002a0  79c8              LDRB     r0,[r1,#7]            ;378  ; sCard
0002a2  283e              CMP      r0,#0x3e              ;378
0002a4  d041              BEQ      |L16.810|
0002a6  7a08              LDRB     r0,[r1,#8]            ;379  ; sCard
0002a8  283e              CMP      r0,#0x3e              ;379
0002aa  d03e              BEQ      |L16.810|
0002ac  7a48              LDRB     r0,[r1,#9]            ;380  ; sCard
0002ae  283e              CMP      r0,#0x3e              ;380
0002b0  d03b              BEQ      |L16.810|
0002b2  7a88              LDRB     r0,[r1,#0xa]          ;381  ; sCard
0002b4  283e              CMP      r0,#0x3e              ;381
0002b6  d038              BEQ      |L16.810|
0002b8  7ac8              LDRB     r0,[r1,#0xb]          ;382  ; sCard
0002ba  283e              CMP      r0,#0x3e              ;382
0002bc  d035              BEQ      |L16.810|
0002be  7b08              LDRB     r0,[r1,#0xc]          ;383  ; sCard
0002c0  283e              CMP      r0,#0x3e              ;383
0002c2  d032              BEQ      |L16.810|
0002c4  7820              LDRB     r0,[r4,#0]            ;392  ; handmaid_card_cycles
0002c6  1c40              ADDS     r0,r0,#1              ;392
0002c8  7020              STRB     r0,[r4,#0]            ;392
0002ca  f8869000          STRB     r9,[r6,#0]            ;393
0002ce  f8c48004          STR      r8,[r4,#4]            ;394  ; mifare_time
0002d2  f6401029          MOV      r0,#0x929             ;395
0002d6  60e0              STR      r0,[r4,#0xc]          ;395  ; handmaid_card_time
0002d8  f7fffffe          BL       HAL_GetTick
0002dc  6120              STR      r0,[r4,#0x10]         ;396  ; handmaid_card_timer
0002de  494a              LDR      r1,|L16.1032|
0002e0  7808              LDRB     r0,[r1,#0]            ;398  ; ROOM_Status
0002e2  2803              CMP      r0,#3                 ;398
0002e4  d02e              BEQ      |L16.836|
0002e6  2804              CMP      r0,#4                 ;398
0002e8  d02c              BEQ      |L16.836|
0002ea  2805              CMP      r0,#5                 ;398
0002ec  d02a              BEQ      |L16.836|
0002ee  7822              LDRB     r2,[r4,#0]            ;417  ; handmaid_card_cycles
0002f0  2a03              CMP      r2,#3                 ;417
0002f2  d04c              BEQ      |L16.910|
0002f4  2808              CMP      r0,#8                 ;423
0002f6  d072              BEQ      |L16.990|
0002f8  f884a000          STRB     r10,[r4,#0]           ;425
0002fc  484b              LDR      r0,|L16.1068|
0002fe  7800              LDRB     r0,[r0,#0]            ;427  ; din_0_7
000300  0700              LSLS     r0,r0,#28             ;427
000302  d44b              BMI      |L16.924|
000304  484b              LDR      r0,|L16.1076|
000306  f8809000          STRB     r9,[r0,#0]            ;429
00030a  2009              MOVS     r0,#9                 ;430
00030c  7008              STRB     r0,[r1,#0]            ;430
00030e  e066              B        |L16.990|
                  |L16.784|
000310  7027              STRB     r7,[r4,#0]            ;373
000312  6828              LDR      r0,[r5,#0]            ;374  ; display_flags
000314  f4405080          ORR      r0,r0,#0x1000         ;374
000318  6028              STR      r0,[r5,#0]            ;374  ; display_flags
00031a  6828              LDR      r0,[r5,#0]            ;374  ; display_flags
00031c  f0404000          ORR      r0,r0,#0x80000000     ;374
000320  6028              STR      r0,[r5,#0]            ;374  ; display_flags
000322  7037              STRB     r7,[r6,#0]            ;375
000324  f8c48004          STR      r8,[r4,#4]            ;376  ; mifare_time
000328  e059              B        |L16.990|
                  |L16.810|
00032a  7027              STRB     r7,[r4,#0]            ;385
00032c  6828              LDR      r0,[r5,#0]            ;386  ; display_flags
00032e  f4406000          ORR      r0,r0,#0x800          ;386
000332  6028              STR      r0,[r5,#0]            ;386  ; display_flags
000334  6828              LDR      r0,[r5,#0]            ;386  ; display_flags
000336  f0404000          ORR      r0,r0,#0x80000000     ;386
00033a  6028              STR      r0,[r5,#0]            ;386  ; display_flags
00033c  7037              STRB     r7,[r6,#0]            ;387
00033e  f8c48004          STR      r8,[r4,#4]            ;388  ; mifare_time
000342  e04c              B        |L16.990|
                  |L16.836|
000344  f884a000          STRB     r10,[r4,#0]           ;400
000348  2008              MOVS     r0,#8                 ;401
00034a  7008              STRB     r0,[r1,#0]            ;401
00034c  f89d0006          LDRB     r0,[sp,#6]            ;402
000350  f88b0000          STRB     r0,[r11,#0]           ;402
000354  f89d0005          LDRB     r0,[sp,#5]            ;403
000358  f88b0001          STRB     r0,[r11,#1]           ;403
00035c  f89d0007          LDRB     r0,[sp,#7]            ;404
000360  f88b0002          STRB     r0,[r11,#2]           ;404
000364  f89d0009          LDRB     r0,[sp,#9]            ;405
000368  f88b0004          STRB     r0,[r11,#4]           ;405
00036c  482c              LDR      r0,|L16.1056|
00036e  6801              LDR      r1,[r0,#0]            ;406  ; signal_flags
000370  f0210101          BIC      r1,r1,#1              ;406
000374  6001              STR      r1,[r0,#0]            ;406  ; signal_flags
000376  f89d0008          LDRB     r0,[sp,#8]            ;408
00037a  1c80              ADDS     r0,r0,#2              ;408
00037c  2824              CMP      r0,#0x24              ;408
00037e  d202              BCS      |L16.902|
000380  f88b0003          STRB     r0,[r11,#3]           ;410
000384  e02b              B        |L16.990|
                  |L16.902|
000386  2024              MOVS     r0,#0x24              ;414
000388  f88b0003          STRB     r0,[r11,#3]           ;414
00038c  e027              B        |L16.990|
                  |L16.910|
00038e  700f              STRB     r7,[r1,#0]            ;419
000390  2004              MOVS     r0,#4                 ;420
000392  7030              STRB     r0,[r6,#0]            ;420
000394  f640408a          MOV      r0,#0xc8a             ;421
000398  6060              STR      r0,[r4,#4]            ;421  ; mifare_time
00039a  e020              B        |L16.990|
                  |L16.924|
00039c  700f              STRB     r7,[r1,#0]            ;434
00039e  f89d0006          LDRB     r0,[sp,#6]            ;435
0003a2  f88b0000          STRB     r0,[r11,#0]           ;435
0003a6  f89d0005          LDRB     r0,[sp,#5]            ;436
0003aa  f88b0001          STRB     r0,[r11,#1]           ;436
0003ae  f89d0007          LDRB     r0,[sp,#7]            ;437
0003b2  f88b0002          STRB     r0,[r11,#2]           ;437
0003b6  f89d0009          LDRB     r0,[sp,#9]            ;438
0003ba  f88b0004          STRB     r0,[r11,#4]           ;438
0003be  4818              LDR      r0,|L16.1056|
0003c0  6801              LDR      r1,[r0,#0]            ;439  ; signal_flags
0003c2  f0210101          BIC      r1,r1,#1              ;439
0003c6  6001              STR      r1,[r0,#0]            ;439  ; signal_flags
0003c8  f89d0008          LDRB     r0,[sp,#8]            ;441
0003cc  1c80              ADDS     r0,r0,#2              ;441
0003ce  2824              CMP      r0,#0x24              ;441
0003d0  d202              BCS      |L16.984|
0003d2  f88b0003          STRB     r0,[r11,#3]           ;443
0003d6  e002              B        |L16.990|
                  |L16.984|
0003d8  2024              MOVS     r0,#0x24              ;447
0003da  f88b0003          STRB     r0,[r11,#3]           ;447
                  |L16.990|
0003de  4811              LDR      r0,|L16.1060|
0003e0  7981              LDRB     r1,[r0,#6]            ;455  ; sCard
0003e2  2948              CMP      r1,#0x48              ;455
0003e4  d17d              BNE      |L16.1250|
0003e6  4911              LDR      r1,|L16.1068|
0003e8  7809              LDRB     r1,[r1,#0]            ;456  ; din_0_7
0003ea  07c9              LSLS     r1,r1,#31             ;456
0003ec  d103              BNE      |L16.1014|
0003ee  4910              LDR      r1,|L16.1072|
0003f0  6809              LDR      r1,[r1,#0]            ;456  ; dio_flags
0003f2  07c9              LSLS     r1,r1,#31             ;456
0003f4  d075              BEQ      |L16.1250|
                  |L16.1014|
0003f6  f8dfb010          LDR      r11,|L16.1032|
0003fa  f89b1000          LDRB     r1,[r11,#0]           ;459  ; ROOM_Status
0003fe  e01b              B        |L16.1080|
                  |L16.1024|
                          DCD      eComState
                  |L16.1028|
                          DCD      ||.data||
                  |L16.1032|
                          DCD      ROOM_Status
                  |L16.1036|
                          DCD      rs485_flags
                  |L16.1040|
                          DCD      display_flags
                  |L16.1044|
                          DCD      SignalBuzzer
                  |L16.1048|
                          DCD      aRoomPowerExpiryDateTime
                  |L16.1052|
                          DCD      hrtc
                  |L16.1056|
                          DCD      signal_flags
                  |L16.1060|
                          DCD      ||.bss||+0x200
                  |L16.1064|
                          DCD      hi2c1
                  |L16.1068|
                          DCD      din_0_7
                  |L16.1072|
                          DCD      dio_flags
                  |L16.1076|
                          DCD      ROOM_OldStatus
                  |L16.1080|
000438  2906              CMP      r1,#6                 ;459
00043a  d022              BEQ      |L16.1154|
00043c  79c1              LDRB     r1,[r0,#7]            ;466  ; sCard
00043e  293e              CMP      r1,#0x3e              ;466
000440  d02c              BEQ      |L16.1180|
000442  7a01              LDRB     r1,[r0,#8]            ;467  ; sCard
000444  293e              CMP      r1,#0x3e              ;467
000446  d029              BEQ      |L16.1180|
000448  7a41              LDRB     r1,[r0,#9]            ;468  ; sCard
00044a  293e              CMP      r1,#0x3e              ;468
00044c  d026              BEQ      |L16.1180|
00044e  7a81              LDRB     r1,[r0,#0xa]          ;469  ; sCard
000450  293e              CMP      r1,#0x3e              ;469
000452  d023              BEQ      |L16.1180|
000454  7ac1              LDRB     r1,[r0,#0xb]          ;470  ; sCard
000456  293e              CMP      r1,#0x3e              ;470
000458  d020              BEQ      |L16.1180|
00045a  7b00              LDRB     r0,[r0,#0xc]          ;471  ; sCard
00045c  283e              CMP      r0,#0x3e              ;471
00045e  d01d              BEQ      |L16.1180|
000460  f6401029          MOV      r0,#0x929             ;480
000464  60e0              STR      r0,[r4,#0xc]          ;480  ; handmaid_card_time
000466  f7fffffe          BL       HAL_GetTick
00046a  6120              STR      r0,[r4,#0x10]         ;481  ; handmaid_card_timer
00046c  7820              LDRB     r0,[r4,#0]            ;483  ; handmaid_card_cycles
00046e  1c40              ADDS     r0,r0,#1              ;483
000470  b2c0              UXTB     r0,r0                 ;483
000472  7020              STRB     r0,[r4,#0]            ;483
000474  2803              CMP      r0,#3                 ;483
000476  d01e              BEQ      |L16.1206|
000478  f8869000          STRB     r9,[r6,#0]            ;501
00047c  f8c48004          STR      r8,[r4,#4]            ;502  ; mifare_time
                  |L16.1152|
000480  e678              B        |L16.372|
                  |L16.1154|
000482  7027              STRB     r7,[r4,#0]            ;461
000484  6828              LDR      r0,[r5,#0]            ;462  ; display_flags
000486  f4405080          ORR      r0,r0,#0x1000         ;462
00048a  6028              STR      r0,[r5,#0]            ;462  ; display_flags
00048c  6828              LDR      r0,[r5,#0]            ;462  ; display_flags
00048e  f0404000          ORR      r0,r0,#0x80000000     ;462
000492  6028              STR      r0,[r5,#0]            ;462  ; display_flags
000494  7037              STRB     r7,[r6,#0]            ;463
000496  f8c48004          STR      r8,[r4,#4]            ;464  ; mifare_time
00049a  e66b              B        |L16.372|
                  |L16.1180|
00049c  7027              STRB     r7,[r4,#0]            ;473
00049e  6828              LDR      r0,[r5,#0]            ;474  ; display_flags
0004a0  f4406000          ORR      r0,r0,#0x800          ;474
0004a4  6028              STR      r0,[r5,#0]            ;474  ; display_flags
0004a6  6828              LDR      r0,[r5,#0]            ;474  ; display_flags
0004a8  f0404000          ORR      r0,r0,#0x80000000     ;474
0004ac  6028              STR      r0,[r5,#0]            ;474  ; display_flags
0004ae  7037              STRB     r7,[r6,#0]            ;475
0004b0  f8c48004          STR      r8,[r4,#4]            ;476  ; mifare_time
0004b4  e65e              B        |L16.372|
                  |L16.1206|
0004b6  f884a000          STRB     r10,[r4,#0]           ;485
0004ba  2004              MOVS     r0,#4                 ;486
0004bc  7030              STRB     r0,[r6,#0]            ;486
0004be  f640408a          MOV      r0,#0xc8a             ;487
0004c2  6060              STR      r0,[r4,#4]            ;487  ; mifare_time
0004c4  4855              LDR      r0,|L16.1564|
0004c6  7800              LDRB     r0,[r0,#0]            ;489  ; din_0_7
0004c8  0700              LSLS     r0,r0,#28             ;489
0004ca  d407              BMI      |L16.1244|
0004cc  4854              LDR      r0,|L16.1568|
0004ce  f8809000          STRB     r9,[r0,#0]            ;491
0004d2  2009              MOVS     r0,#9                 ;492
0004d4  f88b0000          STRB     r0,[r11,#0]           ;492
0004d8  e64c              B        |L16.372|
0004da  e002              B        |L16.1250|
                  |L16.1244|
0004dc  f88b9000          STRB     r9,[r11,#0]           ;496
0004e0  e648              B        |L16.372|
                  |L16.1250|
0004e2  7820              LDRB     r0,[r4,#0]            ;506  ; handmaid_card_cycles
0004e4  b120              CBZ      r0,|L16.1264|
0004e6  2803              CMP      r0,#3                 ;542
0004e8  d1ca              BNE      |L16.1152|
0004ea  f884a000          STRB     r10,[r4,#0]           ;544
0004ee  e641              B        |L16.372|
                  |L16.1264|
0004f0  484c              LDR      r0,|L16.1572|
0004f2  7801              LDRB     r1,[r0,#0]            ;536  ; dout_0_7
0004f4  f0410140          ORR      r1,r1,#0x40           ;536
0004f8  7001              STRB     r1,[r0,#0]            ;536
0004fa  7801              LDRB     r1,[r0,#0]            ;537  ; dout_0_7
0004fc  f0210101          BIC      r1,r1,#1              ;537
000500  7001              STRB     r1,[r0,#0]            ;537
000502  6828              LDR      r0,[r5,#0]            ;538  ; display_flags
000504  f4407080          ORR      r0,r0,#0x100          ;538
000508  6028              STR      r0,[r5,#0]            ;538  ; display_flags
00050a  f8869000          STRB     r9,[r6,#0]            ;539
00050e  f640408a          MOV      r0,#0xc8a             ;540
000512  6060              STR      r0,[r4,#4]            ;540  ; mifare_time
000514  e62e              B        |L16.372|
                  |L16.1302|
000516  6828              LDR      r0,[r5,#0]            ;555  ; display_flags
000518  f4406080          ORR      r0,r0,#0x400          ;555
00051c  6028              STR      r0,[r5,#0]            ;555  ; display_flags
00051e  6828              LDR      r0,[r5,#0]            ;555  ; display_flags
000520  f0404000          ORR      r0,r0,#0x80000000     ;555
000524  6028              STR      r0,[r5,#0]            ;555  ; display_flags
000526  e625              B        |L16.372|
                  |L16.1320|
000528  6828              LDR      r0,[r5,#0]            ;561  ; display_flags
00052a  f4406080          ORR      r0,r0,#0x400          ;561
00052e  6028              STR      r0,[r5,#0]            ;561  ; display_flags
000530  6828              LDR      r0,[r5,#0]            ;561  ; display_flags
000532  f0404000          ORR      r0,r0,#0x80000000     ;561
000536  6028              STR      r0,[r5,#0]            ;561  ; display_flags
000538  e61c              B        |L16.372|
                  |L16.1338|
00053a  6828              LDR      r0,[r5,#0]            ;570  ; display_flags
00053c  f4406000          ORR      r0,r0,#0x800          ;570
000540  6028              STR      r0,[r5,#0]            ;570  ; display_flags
000542  6828              LDR      r0,[r5,#0]            ;570  ; display_flags
000544  f0404000          ORR      r0,r0,#0x80000000     ;570
000548  6028              STR      r0,[r5,#0]            ;570  ; display_flags
00054a  e613              B        |L16.372|
                  |L16.1356|
00054c  2024              MOVS     r0,#0x24              ;596
00054e  f88b0003          STRB     r0,[r11,#3]           ;596
                  |L16.1362|
000552  4834              LDR      r0,|L16.1572|
000554  7801              LDRB     r1,[r0,#0]            ;599  ; dout_0_7
000556  f0410140          ORR      r1,r1,#0x40           ;599
00055a  7001              STRB     r1,[r0,#0]            ;599
00055c  7801              LDRB     r1,[r0,#0]            ;600  ; dout_0_7
00055e  f0210101          BIC      r1,r1,#1              ;600
000562  7001              STRB     r1,[r0,#0]            ;600
000564  6828              LDR      r0,[r5,#0]            ;601  ; display_flags
000566  f4407080          ORR      r0,r0,#0x100          ;601
00056a  6028              STR      r0,[r5,#0]            ;601  ; display_flags
00056c  f8869000          STRB     r9,[r6,#0]            ;602
000570  f640408a          MOV      r0,#0xc8a             ;603
000574  6060              STR      r0,[r4,#4]            ;603  ; mifare_time
000576  6960              LDR      r0,[r4,#0x14]         ;604  ; mifare_process_flags
000578  f0200001          BIC      r0,r0,#1              ;604
00057c  6160              STR      r0,[r4,#0x14]         ;604  ; mifare_process_flags
00057e  e5f9              B        |L16.372|
                  |L16.1408|
000580  4829              LDR      r0,|L16.1576|
000582  8800              LDRH     r0,[r0,#0]            ;608  ; dout_0_7_remote
000584  0640              LSLS     r0,r0,#25             ;608
000586  d404              BMI      |L16.1426|
000588  4826              LDR      r0,|L16.1572|
00058a  7801              LDRB     r1,[r0,#0]            ;608  ; dout_0_7
00058c  f0210140          BIC      r1,r1,#0x40           ;608
000590  7001              STRB     r1,[r0,#0]            ;608
                  |L16.1426|
000592  4e26              LDR      r6,|L16.1580|
000594  7830              LDRB     r0,[r6,#0]            ;609  ; hc595_dout
000596  f0200080          BIC      r0,r0,#0x80           ;609
00059a  7030              STRB     r0,[r6,#0]            ;609
00059c  f7fffffe          BL       DIO_SetOuput
0005a0  250a              MOVS     r5,#0xa               ;612
                  |L16.1442|
0005a2  2001              MOVS     r0,#1                 ;614
0005a4  f7fffffe          BL       HAL_Delay
0005a8  7838              LDRB     r0,[r7,#0]            ;615  ; eComState
0005aa  2802              CMP      r0,#2                 ;615
0005ac  d101              BNE      |L16.1458|
0005ae  f7fffffe          BL       RS485_Service
                  |L16.1458|
0005b2  1e6d              SUBS     r5,r5,#1              ;612
0005b4  2d00              CMP      r5,#0                 ;612
0005b6  d1f4              BNE      |L16.1442|
0005b8  7830              LDRB     r0,[r6,#0]            ;618  ; hc595_dout
0005ba  f0400080          ORR      r0,r0,#0x80           ;618
0005be  7030              STRB     r0,[r6,#0]            ;618
0005c0  f7fffffe          BL       DIO_SetOuput
0005c4  250a              MOVS     r5,#0xa               ;621
                  |L16.1478|
0005c6  2001              MOVS     r0,#1                 ;623
0005c8  f7fffffe          BL       HAL_Delay
0005cc  7838              LDRB     r0,[r7,#0]            ;624  ; eComState
0005ce  2802              CMP      r0,#2                 ;624
0005d0  d101              BNE      |L16.1494|
0005d2  f7fffffe          BL       RS485_Service
                  |L16.1494|
0005d6  1e6d              SUBS     r5,r5,#1              ;621
0005d8  2d00              CMP      r5,#0                 ;621
0005da  d1f4              BNE      |L16.1478|
0005dc  f7fffffe          BL       RC522_Reset
0005e0  218d              MOVS     r1,#0x8d              ;628
0005e2  202a              MOVS     r0,#0x2a              ;628
0005e4  f7fffffe          BL       RC522_WriteRegister
0005e8  213e              MOVS     r1,#0x3e              ;629
0005ea  202b              MOVS     r0,#0x2b              ;629
0005ec  f7fffffe          BL       RC522_WriteRegister
0005f0  211e              MOVS     r1,#0x1e              ;630
0005f2  202d              MOVS     r0,#0x2d              ;630
0005f4  f7fffffe          BL       RC522_WriteRegister
0005f8  2100              MOVS     r1,#0                 ;631
0005fa  202c              MOVS     r0,#0x2c              ;631
0005fc  f7fffffe          BL       RC522_WriteRegister
000600  2140              MOVS     r1,#0x40              ;632
000602  2015              MOVS     r0,#0x15              ;632
000604  f7fffffe          BL       RC522_WriteRegister
000608  213d              MOVS     r1,#0x3d              ;633
00060a  2011              MOVS     r0,#0x11              ;633
00060c  f7fffffe          BL       RC522_WriteRegister
000610  f7fffffe          BL       RC522_AntennaOn
000614  20ea              MOVS     r0,#0xea              ;635
000616  6060              STR      r0,[r4,#4]            ;635  ; mifare_time
000618  e5ac              B        |L16.372|
;;;638    
                          ENDP

00061a  0000              DCW      0x0000
                  |L16.1564|
                          DCD      din_0_7
                  |L16.1568|
                          DCD      ROOM_OldStatus
                  |L16.1572|
                          DCD      dout_0_7
                  |L16.1576|
                          DCD      dout_0_7_remote
                  |L16.1580|
                          DCD      hc595_dout

                          AREA ||i.RC522_SetBitMask||, CODE, READONLY, ALIGN=1

                  RC522_SetBitMask PROC
;;;673    
;;;674    static void RC522_SetBitMask(uint8_t reg, uint8_t mask) 
000000  b570              PUSH     {r4-r6,lr}
;;;675    {   
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;676    	RC522_WriteRegister(reg, RC522_ReadRegister(reg) | mask);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       RC522_ReadRegister
00000c  ea400104          ORR      r1,r0,r4
000010  4628              MOV      r0,r5
000012  e8bd4070          POP      {r4-r6,lr}
000016  f7ffbffe          B.W      RC522_WriteRegister
;;;677    }
;;;678    
                          ENDP


                          AREA ||i.RC522_ToCard||, CODE, READONLY, ALIGN=1

                  RC522_ToCard PROC
;;;760    
;;;761    static RC522_StatusTypeDef RC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;762    {
000004  4682              MOV      r10,r0
000006  f8dd9038          LDR      r9,[sp,#0x38]
00000a  460d              MOV      r5,r1
00000c  4693              MOV      r11,r2
;;;763        RC522_StatusTypeDef status = MI_ERR;
00000e  f04f0800          MOV      r8,#0
;;;764    	uint8_t irqEn = 0U;
000012  2600              MOVS     r6,#0
;;;765    	uint8_t waitIRq = 0U;
000014  2700              MOVS     r7,#0
;;;766    	uint32_t n, i, lastBits; 
;;;767    
;;;768    	switch (command) 
000016  f1ba0f0c          CMP      r10,#0xc
00001a  d005              BEQ      |L18.40|
00001c  f1ba0f0e          CMP      r10,#0xe
000020  d104              BNE      |L18.44|
;;;769    	{
;;;770    		case PCD_AUTHENT:
;;;771    			irqEn = 0x12U;
000022  2612              MOVS     r6,#0x12
;;;772    			waitIRq = 0x10U;            
000024  2710              MOVS     r7,#0x10
;;;773    			break;
000026  e001              B        |L18.44|
                  |L18.40|
;;;774            
;;;775    		case PCD_TRANSCEIVE:            
;;;776    			irqEn = 0x77U;
000028  2677              MOVS     r6,#0x77
;;;777    			waitIRq = 0x30U;            
00002a  2730              MOVS     r7,#0x30
                  |L18.44|
;;;778    			break;
;;;779            
;;;780    		default:
;;;781    			break;
;;;782    	}
;;;783    	
;;;784    	RC522_WriteRegister(RC522_REG_COMM_IE_N, (irqEn | (1U << 7)));
00002c  f0460180          ORR      r1,r6,#0x80
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       RC522_WriteRegister
;;;785    	RC522_ClearBitMask(RC522_REG_COMM_IRQ, (1U << 7));
000036  2180              MOVS     r1,#0x80
000038  2004              MOVS     r0,#4
00003a  f7fffffe          BL       RC522_ClearBitMask
;;;786    	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, (1U << 7));
00003e  2180              MOVS     r1,#0x80
000040  200a              MOVS     r0,#0xa
000042  f7fffffe          BL       RC522_SetBitMask
;;;787    	RC522_WriteRegister(RC522_REG_COMMAND, PCD_IDLE);
000046  2100              MOVS     r1,#0
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       RC522_WriteRegister
;;;788    
;;;789    	for (i = 0U; i < sendLen; i++) 
00004e  2400              MOVS     r4,#0
000050  e004              B        |L18.92|
                  |L18.82|
;;;790        {   
;;;791    		RC522_WriteRegister(RC522_REG_FIFO_DATA, sendData[i]);   //Writing data to the FIFO
000052  5d29              LDRB     r1,[r5,r4]
000054  2009              MOVS     r0,#9
000056  f7fffffe          BL       RC522_WriteRegister
00005a  1c64              ADDS     r4,r4,#1              ;789
                  |L18.92|
00005c  455c              CMP      r4,r11                ;789
00005e  d3f8              BCC      |L18.82|
;;;792    	}
;;;793    
;;;794    	RC522_WriteRegister(RC522_REG_COMMAND, command);            //Execute the command
000060  4651              MOV      r1,r10
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       RC522_WriteRegister
;;;795        
;;;796    	if (command == PCD_TRANSCEIVE) 
000068  f1ba0f0c          CMP      r10,#0xc
00006c  d103              BNE      |L18.118|
;;;797        {    
;;;798    		RC522_SetBitMask(RC522_REG_BIT_FRAMING, (1U << 7));     //StartSend=1,transmission of data starts  
00006e  2180              MOVS     r1,#0x80
000070  200d              MOVS     r0,#0xd
000072  f7fffffe          BL       RC522_SetBitMask
                  |L18.118|
;;;799        }
;;;800        /**
;;;801        *   Waiting to receive data to complete
;;;802        */
;;;803    	i = 2000U;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time_m 25ms???
000076  f44f64fa          MOV      r4,#0x7d0
                  |L18.122|
;;;804        
;;;805    	do {
;;;806            /**
;;;807            *   CommIrqReg[7..0]
;;;808            *   Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
;;;809            */
;;;810    		n = RC522_ReadRegister(RC522_REG_COMM_IRQ);
00007a  2004              MOVS     r0,#4
00007c  f7fffffe          BL       RC522_ReadRegister
000080  4605              MOV      r5,r0
;;;811    		i--;
000082  1e64              SUBS     r4,r4,#1
;;;812    	} 
;;;813        while ((i != 0U) && !(n & (1U << 0)) && !(n & waitIRq));          // End of do...while loop            
000084  b11c              CBZ      r4,|L18.142|
000086  07e8              LSLS     r0,r5,#31
000088  d101              BNE      |L18.142|
00008a  423d              TST      r5,r7
00008c  d0f5              BEQ      |L18.122|
                  |L18.142|
;;;814        /**
;;;815        *   StartSend=0
;;;816        */
;;;817    	RC522_ClearBitMask(RC522_REG_BIT_FRAMING, (1U << 7));
00008e  2180              MOVS     r1,#0x80
000090  200d              MOVS     r0,#0xd
000092  f7fffffe          BL       RC522_ClearBitMask
;;;818    
;;;819    	if (i != 0U)  
000096  b13c              CBZ      r4,|L18.168|
;;;820        {
;;;821    		if (!(RC522_ReadRegister(RC522_REG_ERROR) & 0x1BU)) 
000098  2006              MOVS     r0,#6
00009a  f7fffffe          BL       RC522_ReadRegister
00009e  f0100f1b          TST      r0,#0x1b
0000a2  d005              BEQ      |L18.176|
;;;822            {
;;;823    			status = MI_OK;
;;;824                
;;;825    			if (n & irqEn & (1U << 0)) 
;;;826                {
;;;827    				status = MI_NOTAGERR;
;;;828    			}
;;;829    
;;;830    			if (command == PCD_TRANSCEIVE) 
;;;831                {
;;;832    				n = RC522_ReadRegister(RC522_REG_FIFO_LEVEL);
;;;833    				lastBits = (RC522_ReadRegister(RC522_REG_CONTROL) & 0x07U);
;;;834                    
;;;835    				if (lastBits != 0U) *backLen = ((n - 1U) * 8U + lastBits);  
;;;836                    else *backLen = (n * 8U);  
;;;837    
;;;838    				if (n == 0U) n = 1U;
;;;839                    
;;;840    				if (n > RC522_BUFF_LEN) n = RC522_BUFF_LEN;   
;;;841    				/**
;;;842                    *   Reading the received data in FIFO
;;;843                    */
;;;844    				for (i = 0U; i < n; i++) 
;;;845                    {
;;;846    					backData[i] = RC522_ReadRegister(RC522_REG_FIFO_DATA);
;;;847    				}
;;;848    			}
;;;849    		} 
;;;850            else 
;;;851            {
;;;852    			status = MI_ERR;
0000a4  f04f0800          MOV      r8,#0
                  |L18.168|
;;;853    		}
;;;854    	}
;;;855    
;;;856    	return (status);
;;;857    }
0000a8  b004              ADD      sp,sp,#0x10
0000aa  4640              MOV      r0,r8                 ;856
0000ac  e8bd9ff0          POP      {r4-r12,pc}
                  |L18.176|
0000b0  f04f0801          MOV      r8,#1                 ;823
0000b4  4035              ANDS     r5,r5,r6              ;825
0000b6  07e8              LSLS     r0,r5,#31             ;825
0000b8  d001              BEQ      |L18.190|
0000ba  f04f0802          MOV      r8,#2                 ;827
                  |L18.190|
0000be  f1ba0f0c          CMP      r10,#0xc              ;830
0000c2  d1f1              BNE      |L18.168|
0000c4  200a              MOVS     r0,#0xa               ;832
0000c6  f7fffffe          BL       RC522_ReadRegister
0000ca  4605              MOV      r5,r0                 ;832
0000cc  200c              MOVS     r0,#0xc               ;833
0000ce  f7fffffe          BL       RC522_ReadRegister
0000d2  f0000007          AND      r0,r0,#7              ;833
0000d6  b128              CBZ      r0,|L18.228|
0000d8  1e69              SUBS     r1,r5,#1              ;835
0000da  eb0000c1          ADD      r0,r0,r1,LSL #3       ;835
0000de  f8a90000          STRH     r0,[r9,#0]            ;835
0000e2  e005              B        |L18.240|
                  |L18.228|
0000e4  f64f70ff          MOV      r0,#0xffff            ;836
0000e8  ea0000c5          AND      r0,r0,r5,LSL #3       ;836
0000ec  f8a90000          STRH     r0,[r9,#0]            ;836
                  |L18.240|
0000f0  b905              CBNZ     r5,|L18.244|
0000f2  2501              MOVS     r5,#1                 ;838
                  |L18.244|
0000f4  2d10              CMP      r5,#0x10              ;840
0000f6  d900              BLS      |L18.250|
0000f8  2510              MOVS     r5,#0x10              ;840
                  |L18.250|
0000fa  2400              MOVS     r4,#0                 ;844
0000fc  e005              B        |L18.266|
                  |L18.254|
0000fe  2009              MOVS     r0,#9                 ;846
000100  f7fffffe          BL       RC522_ReadRegister
000104  9903              LDR      r1,[sp,#0xc]          ;846
000106  5508              STRB     r0,[r1,r4]            ;846
000108  1c64              ADDS     r4,r4,#1              ;844
                  |L18.266|
00010a  42ac              CMP      r4,r5                 ;844
00010c  d3f7              BCC      |L18.254|
00010e  e7cb              B        |L18.168|
;;;858    
                          ENDP


                          AREA ||i.RC522_VerifyData||, CODE, READONLY, ALIGN=2

                  RC522_VerifyData PROC
;;;1091   
;;;1092   static RC522_StatusTypeDef RC522_VerifyData(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1093   {
000004  b088              SUB      sp,sp,#0x20
;;;1094       RTC_TimeTypeDef time_m;
;;;1095       RTC_DateTypeDef date_m;
;;;1096   	uint8_t b_cnt, m_cnt;
;;;1097   	uint32_t temp_address;
;;;1098   	uint8_t ee_buf[16];
;;;1099       
;;;1100   	sCard.card_status = 0U;
000006  4de1              LDR      r5,|L19.908|
000008  2600              MOVS     r6,#0
00000a  702e              STRB     r6,[r5,#0]
;;;1101   	ClearBuffer(sCard.card_id, 5U);
00000c  2105              MOVS     r1,#5
00000e  1c68              ADDS     r0,r5,#1
000010  f7fffffe          BL       ClearBuffer
;;;1102   	ClearBuffer(sCard.aExpiryTime, 6U);
000014  2106              MOVS     r1,#6
000016  1de8              ADDS     r0,r5,#7
000018  f7fffffe          BL       ClearBuffer
;;;1103   	sCard.controller_id = 0U;
00001c  81ee              STRH     r6,[r5,#0xe]
;;;1104   	sCard.system_id = 0U;
00001e  822e              STRH     r6,[r5,#0x10]
;;;1105   	
;;;1106   
;;;1107   	for(b_cnt = 0U; b_cnt < 5U; b_cnt++)
000020  2100              MOVS     r1,#0
;;;1108   	{
;;;1109   		sCard.card_id[b_cnt] = card_serial[b_cnt];
000022  4cdb              LDR      r4,|L19.912|
                  |L19.36|
000024  186a              ADDS     r2,r5,r1
000026  5c60              LDRB     r0,[r4,r1]
000028  7050              STRB     r0,[r2,#1]
00002a  1c49              ADDS     r1,r1,#1              ;1107
00002c  b2c9              UXTB     r1,r1                 ;1107
00002e  2905              CMP      r1,#5                 ;1107
000030  d3f8              BCC      |L19.36|
;;;1110   	}
;;;1111   		
;;;1112   	ee_buf[0] = EE_PERMITED_GROUP_ADDRESS >> 8;
000032  f88d6008          STRB     r6,[sp,#8]
;;;1113   	ee_buf[1] = EE_PERMITED_GROUP_ADDRESS;
000036  2050              MOVS     r0,#0x50
000038  f88d0009          STRB     r0,[sp,#9]
;;;1114   	if(HAL_I2C_Master_Transmit(&hi2c1, I2C_EE_WRITE, ee_buf, 2U, I2C_EE_TIMEOUT) != HAL_OK) Error_Handler();
00003c  2605              MOVS     r6,#5
00003e  2302              MOVS     r3,#2
000040  aa02              ADD      r2,sp,#8
000042  21a0              MOVS     r1,#0xa0
000044  48d3              LDR      r0,|L19.916|
000046  9600              STR      r6,[sp,#0]
000048  f7fffffe          BL       HAL_I2C_Master_Transmit
00004c  b108              CBZ      r0,|L19.82|
00004e  f7fffffe          BL       Error_Handler
                  |L19.82|
;;;1115   	if(HAL_I2C_Master_Receive(&hi2c1, I2C_EE_READ, ee_buf, 16U, I2C_EE_TIMEOUT) != HAL_OK) Error_Handler();
000052  2310              MOVS     r3,#0x10
000054  aa02              ADD      r2,sp,#8
000056  21a1              MOVS     r1,#0xa1
000058  48ce              LDR      r0,|L19.916|
00005a  9600              STR      r6,[sp,#0]
00005c  f7fffffe          BL       HAL_I2C_Master_Receive
000060  b108              CBZ      r0,|L19.102|
000062  f7fffffe          BL       Error_Handler
                  |L19.102|
;;;1116   	
;;;1117   	for(b_cnt = 0U; b_cnt < 16U; b_cnt++)
000066  2200              MOVS     r2,#0
;;;1118   	{
;;;1119   		for(m_cnt = 0U; m_cnt < 16U; m_cnt++)
;;;1120   		{
;;;1121   			if((Sector_1.Block_0[b_cnt] == ee_buf[m_cnt]) && (ee_buf[m_cnt] != 0U) \
000068  4fcb              LDR      r7,|L19.920|
00006a  f10d0c08          ADD      r12,sp,#8             ;1098
                  |L19.110|
00006e  2100              MOVS     r1,#0                 ;1119
                  |L19.112|
000070  5cb8              LDRB     r0,[r7,r2]
000072  f81c3001          LDRB     r3,[r12,r1]
000076  4298              CMP      r0,r3
000078  d106              BNE      |L19.136|
00007a  b12b              CBZ      r3,|L19.136|
;;;1122   				&& (ee_buf[m_cnt] != CARD_DATA_FORMATED))
00007c  2b7f              CMP      r3,#0x7f
00007e  d003              BEQ      |L19.136|
;;;1123   			{				
;;;1124   				sCard.user_group = ee_buf[m_cnt];
000080  71ab              STRB     r3,[r5,#6]
;;;1125   				m_cnt = 16U;
000082  2110              MOVS     r1,#0x10
;;;1126   				b_cnt = 16U;
000084  2210              MOVS     r2,#0x10
000086  e004              B        |L19.146|
                  |L19.136|
;;;1127   			}
;;;1128   			else if((Sector_1.Block_0[b_cnt] == 0U) || (Sector_1.Block_0[b_cnt] == CARD_DATA_FORMATED))
000088  b3f0              CBZ      r0,|L19.264|
00008a  287f              CMP      r0,#0x7f
00008c  d056              BEQ      |L19.316|
;;;1129   			{
;;;1130   				sCard.user_group = USER_GROUP_INVALID;
;;;1131   			}
;;;1132   			else
;;;1133   			{
;;;1134   				sCard.user_group = USER_GROUP_DATA_INVALID;
00008e  203d              MOVS     r0,#0x3d
000090  71a8              STRB     r0,[r5,#6]
                  |L19.146|
000092  1c49              ADDS     r1,r1,#1              ;1119
000094  b2c9              UXTB     r1,r1                 ;1119
000096  2910              CMP      r1,#0x10              ;1119
000098  d3ea              BCC      |L19.112|
00009a  1c52              ADDS     r2,r2,#1              ;1117
00009c  b2d2              UXTB     r2,r2                 ;1117
00009e  2a10              CMP      r2,#0x10              ;1117
0000a0  d3e5              BCC      |L19.110|
;;;1135   			}
;;;1136   		}
;;;1137   	}
;;;1138   	/**
;;;1139   	*			S Y S T E M   I D   C H E C K
;;;1140   	**/
;;;1141   	temp_address = 0U;
0000a2  2100              MOVS     r1,#0
;;;1142   	
;;;1143   	if(((Sector_1.Block_1[0] - 48U) > 0x00U) && ((Sector_1.Block_1[0] - 48U) < 0x0AU)) temp_address = (Sector_1.Block_1[0] - 48U) * 10000U;
0000a4  7c38              LDRB     r0,[r7,#0x10]  ; Sector_1
0000a6  f1a00231          SUB      r2,r0,#0x31
0000aa  2a09              CMP      r2,#9
0000ac  d203              BCS      |L19.182|
0000ae  1c51              ADDS     r1,r2,#1
0000b0  f2427210          MOV      r2,#0x2710
0000b4  4351              MULS     r1,r2,r1
                  |L19.182|
;;;1144   	if(((Sector_1.Block_1[1] - 48U) > 0x00U) && ((Sector_1.Block_1[1] - 48U) < 0x0AU)) temp_address +=(Sector_1.Block_1[1] - 48U) * 1000U;
0000b6  7c7a              LDRB     r2,[r7,#0x11]  ; Sector_1
0000b8  f1a20331          SUB      r3,r2,#0x31
0000bc  2b09              CMP      r3,#9
0000be  d206              BCS      |L19.206|
0000c0  1c5b              ADDS     r3,r3,#1
0000c2  eb030c43          ADD      r12,r3,r3,LSL #1
0000c6  ebcc13c3          RSB      r3,r12,r3,LSL #7
0000ca  eb0101c3          ADD      r1,r1,r3,LSL #3
                  |L19.206|
;;;1145   	if(((Sector_1.Block_1[2] - 48U) > 0x00U) && ((Sector_1.Block_1[2] - 48U) < 0x0AU)) temp_address +=(Sector_1.Block_1[2] - 48U) * 100U;
0000ce  7cbb              LDRB     r3,[r7,#0x12]  ; Sector_1
0000d0  f1a30c31          SUB      r12,r3,#0x31
0000d4  f1bc0f09          CMP      r12,#9
0000d8  d207              BCS      |L19.234|
0000da  f1a30c30          SUB      r12,r3,#0x30
0000de  eb0c08cc          ADD      r8,r12,r12,LSL #3
0000e2  eb081c0c          ADD      r12,r8,r12,LSL #4
0000e6  eb01018c          ADD      r1,r1,r12,LSL #2
                  |L19.234|
;;;1146   	if(((Sector_1.Block_1[3] - 48U) > 0x00U) && ((Sector_1.Block_1[3] - 48U) < 0x0AU)) temp_address +=(Sector_1.Block_1[3] - 48U) * 10U;
0000ea  f897c013          LDRB     r12,[r7,#0x13]  ; Sector_1
0000ee  f1ac0831          SUB      r8,r12,#0x31
0000f2  f1b80f09          CMP      r8,#9
0000f6  d205              BCS      |L19.260|
0000f8  f1ac0830          SUB      r8,r12,#0x30
0000fc  eb080888          ADD      r8,r8,r8,LSL #2
000100  eb010148          ADD      r1,r1,r8,LSL #1
                  |L19.260|
;;;1147   	if(((Sector_1.Block_1[4] - 48U) > 0x00U) && ((Sector_1.Block_1[4] - 48U) < 0x0AU)) temp_address += Sector_1.Block_1[4] - 48U;
000104  7d3f              LDRB     r7,[r7,#0x14]  ; Sector_1
000106  e000              B        |L19.266|
                  |L19.264|
000108  e018              B        |L19.316|
                  |L19.266|
00010a  f1a70831          SUB      r8,r7,#0x31
00010e  f1b80f09          CMP      r8,#9
000112  d201              BCS      |L19.280|
000114  3930              SUBS     r1,r1,#0x30
000116  4439              ADD      r1,r1,r7
                  |L19.280|
;;;1148   
;;;1149   	if((((temp_address >> 8) & 0xffU) == system_id[0]) && ((temp_address & 0xffU) == system_id[1]))
000118  f8df8274          LDR      r8,|L19.912|
00011c  f3c12a07          UBFX     r10,r1,#8,#8
000120  f1a80821          SUB      r8,r8,#0x21
000124  f8989000          LDRB     r9,[r8,#0]  ; system_id
000128  45d1              CMP      r9,r10
00012a  d10a              BNE      |L19.322|
00012c  f8988001          LDRB     r8,[r8,#1]  ; system_id
000130  f00109ff          AND      r9,r1,#0xff
000134  45c1              CMP      r9,r8
000136  d104              BNE      |L19.322|
;;;1150   	{
;;;1151   		sCard.system_id = temp_address & 0xFFFFU;
000138  8229              STRH     r1,[r5,#0x10]
00013a  e016              B        |L19.362|
                  |L19.316|
00013c  203c              MOVS     r0,#0x3c              ;1130
00013e  71a8              STRB     r0,[r5,#6]            ;1130
000140  e7a7              B        |L19.146|
                  |L19.322|
;;;1152   	}
;;;1153   	else if((Sector_1.Block_1[0] == 0U) || \
000142  b308              CBZ      r0,|L19.392|
;;;1154   			(Sector_1.Block_1[1] == 0U) || \
000144  b302              CBZ      r2,|L19.392|
;;;1155   			(Sector_1.Block_1[2] == 0U) || \
000146  b1fb              CBZ      r3,|L19.392|
;;;1156   			(Sector_1.Block_1[3] == 0U) || \
000148  f1bc0f00          CMP      r12,#0
00014c  d01c              BEQ      |L19.392|
;;;1157   			(Sector_1.Block_1[4] == 0U) || \
00014e  b1df              CBZ      r7,|L19.392|
;;;1158   			(Sector_1.Block_1[0] == CARD_DATA_FORMATED) || \
000150  287f              CMP      r0,#0x7f
000152  d019              BEQ      |L19.392|
;;;1159   			(Sector_1.Block_1[1] == CARD_DATA_FORMATED) || \
000154  2a7f              CMP      r2,#0x7f
000156  d017              BEQ      |L19.392|
;;;1160   			(Sector_1.Block_1[2] == CARD_DATA_FORMATED) || \
000158  2b7f              CMP      r3,#0x7f
00015a  d015              BEQ      |L19.392|
;;;1161   			(Sector_1.Block_1[3] == CARD_DATA_FORMATED) || \
00015c  f1bc0f7f          CMP      r12,#0x7f
000160  d012              BEQ      |L19.392|
;;;1162   			(Sector_1.Block_1[4] == CARD_DATA_FORMATED))
000162  2f7f              CMP      r7,#0x7f
000164  d010              BEQ      |L19.392|
;;;1163   	{
;;;1164   		sCard.system_id = SYSTEM_ID_DATA_INVALID;
;;;1165   	}
;;;1166   	else
;;;1167   	{
;;;1168   		sCard.system_id = SYSTEM_ID_INVALID;
000166  217b              MOVS     r1,#0x7b
000168  8229              STRH     r1,[r5,#0x10]
                  |L19.362|
;;;1169   	}
;;;1170   	
;;;1171   	if ((Sector_2.Block_0[6] == rs485_interface_address[0]) && (Sector_2.Block_0[7] == rs485_interface_address[1])) 
00016a  4f8b              LDR      r7,|L19.920|
00016c  4a8b              LDR      r2,|L19.924|
00016e  3740              ADDS     r7,r7,#0x40
000170  79b8              LDRB     r0,[r7,#6]  ; Sector_2
000172  7811              LDRB     r1,[r2,#0]  ; rs485_interface_address
000174  4288              CMP      r0,r1
000176  d10a              BNE      |L19.398|
000178  79fb              LDRB     r3,[r7,#7]  ; Sector_2
00017a  7852              LDRB     r2,[r2,#1]  ; rs485_interface_address
00017c  4293              CMP      r3,r2
00017e  d106              BNE      |L19.398|
;;;1172   	{
;;;1173   		sCard.controller_id = (rs485_interface_address[0] << 8) + rs485_interface_address[1];
000180  eb022001          ADD      r0,r2,r1,LSL #8
000184  81e8              STRH     r0,[r5,#0xe]
000186  e00c              B        |L19.418|
                  |L19.392|
000188  217d              MOVS     r1,#0x7d              ;1164
00018a  8229              STRH     r1,[r5,#0x10]         ;1164
00018c  e7ed              B        |L19.362|
                  |L19.398|
;;;1174   	}	
;;;1175   	else if(((Sector_2.Block_0[6] == 0U) && (Sector_2.Block_0[7] == 0U)) || 
00018e  b908              CBNZ     r0,|L19.404|
000190  79f9              LDRB     r1,[r7,#7]  ; Sector_2
000192  b1e1              CBZ      r1,|L19.462|
                  |L19.404|
;;;1176               ((Sector_2.Block_0[6] == CARD_DATA_FORMATED) && (Sector_2.Block_0[7] == CARD_DATA_FORMATED)))
000194  287f              CMP      r0,#0x7f
000196  d102              BNE      |L19.414|
000198  79f8              LDRB     r0,[r7,#7]  ; Sector_2
00019a  287f              CMP      r0,#0x7f
00019c  d017              BEQ      |L19.462|
                  |L19.414|
;;;1177   	{
;;;1178   		sCard.controller_id = CONTROLLER_ID_DATA_INVALID;
;;;1179   	}
;;;1180   	else
;;;1181   	{
;;;1182   		sCard.controller_id = CONTROLLER_ID_INVALID;
00019e  212e              MOVS     r1,#0x2e
0001a0  81e9              STRH     r1,[r5,#0xe]
                  |L19.418|
;;;1183   	}
;;;1184   
;;;1185   	HAL_RTC_GetTime(&hrtc, &time_m, RTC_FORMAT_BCD);
0001a2  2201              MOVS     r2,#1
0001a4  a907              ADD      r1,sp,#0x1c
0001a6  487e              LDR      r0,|L19.928|
0001a8  f7fffffe          BL       HAL_RTC_GetTime
;;;1186   	HAL_RTC_GetDate(&hrtc, &date_m, RTC_FORMAT_BCD);
0001ac  2201              MOVS     r2,#1
0001ae  a906              ADD      r1,sp,#0x18
0001b0  487b              LDR      r0,|L19.928|
0001b2  f7fffffe          BL       HAL_RTC_GetDate
;;;1187   			
;;;1188   	if (((Sector_2.Block_0[0] >> 4) > 3U) || (((Sector_2.Block_0[0] >> 4) ==  0U) && \
0001b6  7839              LDRB     r1,[r7,#0]  ; Sector_2
0001b8  2003              MOVS     r0,#3
;;;1189   		((Sector_2.Block_0[0] & 0x0FU) == 0U)) || ((Sector_2.Block_0[0] & 0x0FU) > 9U))
;;;1190   	{
;;;1191   		sCard.aExpiryTime[0] = EXPIRY_TIME_DATA_INVALID;
0001ba  f04f083f          MOV      r8,#0x3f
;;;1192   	}
;;;1193   	else if (((Sector_2.Block_0[1] >> 4) > 1U) || (((Sector_2.Block_0[1] >> 4) == 0U) && \
;;;1194   			((Sector_2.Block_0[1] & 0x0FU) == 0U)) || ((Sector_2.Block_0[1] & 0x0FU) > 9U))
;;;1195   	{
;;;1196   		sCard.aExpiryTime[1] = EXPIRY_TIME_DATA_INVALID;
;;;1197   	}
;;;1198   	else if (((Sector_2.Block_0[2] >> 4) > 9U) || ((Sector_2.Block_0[2] & 0x0FU) > 9U))
;;;1199   	{
;;;1200   		sCard.aExpiryTime[2] = EXPIRY_TIME_DATA_INVALID;
;;;1201   	}
;;;1202   	else if (((Sector_2.Block_0[3] >> 4) > 2U) || ((Sector_2.Block_0[3] & 0x0FU) > 9U))
;;;1203   	{
;;;1204   		sCard.aExpiryTime[3] = EXPIRY_TIME_DATA_INVALID;
;;;1205   	}
;;;1206   	else if (((Sector_2.Block_0[4] >> 4) > 5U) || ((Sector_2.Block_0[4] & 0x0FU) > 9U))
;;;1207   	{
;;;1208   		sCard.aExpiryTime[4] = EXPIRY_TIME_DATA_INVALID;
;;;1209   	}
;;;1210   	else
;;;1211   	{
;;;1212   		if((Sector_2.Block_0[2] > date_m.Year) \
;;;1213   			|| ((Sector_2.Block_0[2] == date_m.Year) && (Sector_2.Block_0[1] > date_m.Month))	\
;;;1214   			|| ((Sector_2.Block_0[2] == date_m.Year) && (Sector_2.Block_0[1] == date_m.Month) && (Sector_2.Block_0[0] > date_m.Date))	\
;;;1215   			|| ((Sector_2.Block_0[2] == date_m.Year) && (Sector_2.Block_0[1] == date_m.Month) && (Sector_2.Block_0[0] == date_m.Date) && (Sector_2.Block_0[3] > time_m.Hours))	\
;;;1216   			|| ((Sector_2.Block_0[2] == date_m.Year) && (Sector_2.Block_0[1] == date_m.Month) && (Sector_2.Block_0[0] == date_m.Date) && (Sector_2.Block_0[3] == time_m.Hours) 	\
;;;1217   			&& (Sector_2.Block_0[4] >= time_m.Minutes)))
;;;1218   		{
;;;1219   			for(b_cnt = 0U; b_cnt < 6U; b_cnt++)
;;;1220   			{
;;;1221   				sCard.aExpiryTime[b_cnt] = Sector_2.Block_0[b_cnt];	
;;;1222   			}	
;;;1223   		}
;;;1224   		else
;;;1225   		{
;;;1226   			for(b_cnt = 0U; b_cnt < 6U; b_cnt++)
;;;1227   			{
;;;1228   				sCard.aExpiryTime[b_cnt] = EXPIRY_TIME_INVALID;		
0001be  f04f0c3e          MOV      r12,#0x3e
0001c2  ebb01f11          CMP      r0,r1,LSR #4          ;1188
0001c6  d30b              BCC      |L19.480|
0001c8  0908              LSRS     r0,r1,#4              ;1188
0001ca  d003              BEQ      |L19.468|
0001cc  e004              B        |L19.472|
                  |L19.462|
0001ce  212f              MOVS     r1,#0x2f              ;1178
0001d0  81e9              STRH     r1,[r5,#0xe]          ;1178
0001d2  e7e6              B        |L19.418|
                  |L19.468|
0001d4  0708              LSLS     r0,r1,#28             ;1189
0001d6  d003              BEQ      |L19.480|
                  |L19.472|
0001d8  f001000f          AND      r0,r1,#0xf            ;1189
0001dc  2809              CMP      r0,#9                 ;1189
0001de  d902              BLS      |L19.486|
                  |L19.480|
0001e0  f8858007          STRB     r8,[r5,#7]            ;1191
0001e4  e079              B        |L19.730|
                  |L19.486|
0001e6  7878              LDRB     r0,[r7,#1]            ;1193  ; Sector_2
0001e8  2201              MOVS     r2,#1                 ;1193
0001ea  ebb21f10          CMP      r2,r0,LSR #4          ;1193
0001ee  d307              BCC      |L19.512|
0001f0  0902              LSRS     r2,r0,#4              ;1193
0001f2  d101              BNE      |L19.504|
0001f4  0702              LSLS     r2,r0,#28             ;1194
0001f6  d003              BEQ      |L19.512|
                  |L19.504|
0001f8  f000020f          AND      r2,r0,#0xf            ;1194
0001fc  2a09              CMP      r2,#9                 ;1194
0001fe  d902              BLS      |L19.518|
                  |L19.512|
000200  f8858008          STRB     r8,[r5,#8]            ;1196
000204  e069              B        |L19.730|
                  |L19.518|
000206  78ba              LDRB     r2,[r7,#2]            ;1198  ; Sector_2
000208  2309              MOVS     r3,#9                 ;1198
00020a  ebb31f12          CMP      r3,r2,LSR #4          ;1198
00020e  d303              BCC      |L19.536|
000210  f002030f          AND      r3,r2,#0xf            ;1198
000214  2b09              CMP      r3,#9                 ;1198
000216  d902              BLS      |L19.542|
                  |L19.536|
000218  f8858009          STRB     r8,[r5,#9]            ;1200
00021c  e05d              B        |L19.730|
                  |L19.542|
00021e  78fb              LDRB     r3,[r7,#3]            ;1202  ; Sector_2
000220  f04f0902          MOV      r9,#2                 ;1202
000224  ebb91f13          CMP      r9,r3,LSR #4          ;1202
000228  d304              BCC      |L19.564|
00022a  f003090f          AND      r9,r3,#0xf            ;1202
00022e  f1b90f09          CMP      r9,#9                 ;1202
000232  d902              BLS      |L19.570|
                  |L19.564|
000234  f885800a          STRB     r8,[r5,#0xa]          ;1204
000238  e04f              B        |L19.730|
                  |L19.570|
00023a  f8979004          LDRB     r9,[r7,#4]            ;1206  ; Sector_2
00023e  ebb61f19          CMP      r6,r9,LSR #4          ;1206
000242  d303              BCC      |L19.588|
000244  f009060f          AND      r6,r9,#0xf            ;1206
000248  2e09              CMP      r6,#9                 ;1206
00024a  d902              BLS      |L19.594|
                  |L19.588|
00024c  f885800b          STRB     r8,[r5,#0xb]          ;1208
000250  e043              B        |L19.730|
                  |L19.594|
000252  f89d601b          LDRB     r6,[sp,#0x1b]         ;1212
000256  42b2              CMP      r2,r6                 ;1212
000258  d82e              BHI      |L19.696|
00025a  d103              BNE      |L19.612|
00025c  f89d8019          LDRB     r8,[sp,#0x19]         ;1213
000260  4540              CMP      r0,r8                 ;1213
000262  d829              BHI      |L19.696|
                  |L19.612|
000264  42b2              CMP      r2,r6                 ;1214
000266  d107              BNE      |L19.632|
000268  f89d8019          LDRB     r8,[sp,#0x19]         ;1214
00026c  4540              CMP      r0,r8                 ;1214
00026e  d103              BNE      |L19.632|
000270  f89d801a          LDRB     r8,[sp,#0x1a]         ;1214
000274  4541              CMP      r1,r8                 ;1214
000276  d81f              BHI      |L19.696|
                  |L19.632|
000278  42b2              CMP      r2,r6                 ;1215
00027a  d10b              BNE      |L19.660|
00027c  f89d8019          LDRB     r8,[sp,#0x19]         ;1215
000280  4540              CMP      r0,r8                 ;1215
000282  d107              BNE      |L19.660|
000284  f89d801a          LDRB     r8,[sp,#0x1a]         ;1215
000288  4541              CMP      r1,r8                 ;1215
00028a  d103              BNE      |L19.660|
00028c  f89d801c          LDRB     r8,[sp,#0x1c]         ;1215
000290  4543              CMP      r3,r8                 ;1215
000292  d811              BHI      |L19.696|
                  |L19.660|
000294  42b2              CMP      r2,r6                 ;1216
000296  d118              BNE      |L19.714|
000298  f89d2019          LDRB     r2,[sp,#0x19]         ;1216
00029c  4290              CMP      r0,r2                 ;1216
00029e  d114              BNE      |L19.714|
0002a0  f89d001a          LDRB     r0,[sp,#0x1a]         ;1216
0002a4  4281              CMP      r1,r0                 ;1216
0002a6  d110              BNE      |L19.714|
0002a8  f89d001c          LDRB     r0,[sp,#0x1c]         ;1216
0002ac  4283              CMP      r3,r0                 ;1216
0002ae  d10c              BNE      |L19.714|
0002b0  f89d001d          LDRB     r0,[sp,#0x1d]         ;1217
0002b4  4581              CMP      r9,r0                 ;1217
0002b6  d308              BCC      |L19.714|
                  |L19.696|
0002b8  2100              MOVS     r1,#0                 ;1219
                  |L19.698|
0002ba  186a              ADDS     r2,r5,r1              ;1221
0002bc  5c78              LDRB     r0,[r7,r1]            ;1221
0002be  71d0              STRB     r0,[r2,#7]            ;1221
0002c0  1c49              ADDS     r1,r1,#1              ;1219
0002c2  b2c9              UXTB     r1,r1                 ;1219
0002c4  2906              CMP      r1,#6                 ;1219
0002c6  d3f8              BCC      |L19.698|
0002c8  e007              B        |L19.730|
                  |L19.714|
0002ca  2000              MOVS     r0,#0                 ;1226
                  |L19.716|
0002cc  1829              ADDS     r1,r5,r0
0002ce  f881c007          STRB     r12,[r1,#7]
0002d2  1c40              ADDS     r0,r0,#1              ;1226
0002d4  b2c0              UXTB     r0,r0                 ;1226
0002d6  2806              CMP      r0,#6                 ;1226
0002d8  d3f8              BCC      |L19.716|
                  |L19.730|
;;;1229   			}
;;;1230   		}
;;;1231   	}		
;;;1232   	
;;;1233   	if ((sCard.user_group == USER_GROUP_INVALID) || (sCard.user_group == USER_GROUP_DATA_INVALID)			\
0002da  79a8              LDRB     r0,[r5,#6]  ; sCard
0002dc  283c              CMP      r0,#0x3c
0002de  d04d              BEQ      |L19.892|
0002e0  283d              CMP      r0,#0x3d
0002e2  d04b              BEQ      |L19.892|
;;;1234   		|| (sCard.aExpiryTime[0] == EXPIRY_TIME_DATA_INVALID) || (sCard.aExpiryTime[1] == EXPIRY_TIME_DATA_INVALID) 	\
0002e4  79ef              LDRB     r7,[r5,#7]  ; sCard
0002e6  2f3f              CMP      r7,#0x3f
0002e8  d048              BEQ      |L19.892|
0002ea  7a2a              LDRB     r2,[r5,#8]  ; sCard
0002ec  2a3f              CMP      r2,#0x3f
0002ee  d045              BEQ      |L19.892|
;;;1235   		|| (sCard.aExpiryTime[2] == EXPIRY_TIME_DATA_INVALID) || (sCard.aExpiryTime[3] == EXPIRY_TIME_DATA_INVALID) 	\
0002f0  7a6e              LDRB     r6,[r5,#9]  ; sCard
0002f2  46a9              MOV      r9,r5
0002f4  2e3f              CMP      r6,#0x3f
0002f6  d041              BEQ      |L19.892|
0002f8  f899300a          LDRB     r3,[r9,#0xa]  ; sCard
0002fc  2b3f              CMP      r3,#0x3f
0002fe  d03d              BEQ      |L19.892|
;;;1236   		|| (sCard.aExpiryTime[4] == EXPIRY_TIME_DATA_INVALID) || (sCard.aExpiryTime[5] == EXPIRY_TIME_DATA_INVALID) 	\
000300  f899100b          LDRB     r1,[r9,#0xb]  ; sCard
000304  293f              CMP      r1,#0x3f
000306  d039              BEQ      |L19.892|
000308  f899800c          LDRB     r8,[r9,#0xc]  ; sCard
00030c  f1b80f3f          CMP      r8,#0x3f
000310  d034              BEQ      |L19.892|
;;;1237   		|| (sCard.controller_id == CONTROLLER_ID_INVALID) || (sCard.controller_id == CONTROLLER_ID_DATA_INVALID)	\
000312  f8b9000e          LDRH     r0,[r9,#0xe]  ; sCard
000316  282e              CMP      r0,#0x2e
000318  d030              BEQ      |L19.892|
00031a  282f              CMP      r0,#0x2f
00031c  d02e              BEQ      |L19.892|
;;;1238   		|| (sCard.system_id == SYSTEM_ID_INVALID) || (sCard.system_id == SYSTEM_ID_DATA_INVALID))
00031e  f8b90010          LDRH     r0,[r9,#0x10]  ; sCard
000322  287b              CMP      r0,#0x7b
000324  d02a              BEQ      |L19.892|
000326  287d              CMP      r0,#0x7d
000328  d028              BEQ      |L19.892|
;;;1239   	 {
;;;1240   		 sCard.card_status = CARD_INVALID;
;;;1241   	 }
;;;1242   	 else if ((sCard.aExpiryTime[0] == EXPIRY_TIME_INVALID) || (sCard.aExpiryTime[1] == EXPIRY_TIME_INVALID) ||	\
00032a  2f3e              CMP      r7,#0x3e
00032c  d029              BEQ      |L19.898|
00032e  2a3e              CMP      r2,#0x3e
000330  d027              BEQ      |L19.898|
;;;1243   			  (sCard.aExpiryTime[2] == EXPIRY_TIME_INVALID) || (sCard.aExpiryTime[3] == EXPIRY_TIME_INVALID) || \
000332  2e3e              CMP      r6,#0x3e
000334  d025              BEQ      |L19.898|
000336  2b3e              CMP      r3,#0x3e
000338  d023              BEQ      |L19.898|
;;;1244   			  (sCard.aExpiryTime[4] == EXPIRY_TIME_INVALID) || (sCard.aExpiryTime[5] == EXPIRY_TIME_INVALID))
00033a  293e              CMP      r1,#0x3e
00033c  d021              BEQ      |L19.898|
00033e  f1b80f3e          CMP      r8,#0x3e
000342  d01e              BEQ      |L19.898|
;;;1245   	 {
;;;1246   		 sCard.card_status = EXPIRY_TIME_INVALID;
;;;1247   	 }
;;;1248   	 else
;;;1249   	 {
;;;1250   		 sCard.card_status = CARD_VALID;
000344  2006              MOVS     r0,#6
000346  f8890000          STRB     r0,[r9,#0]
                  |L19.842|
;;;1251   	 }
;;;1252   	
;;;1253   	if(sCard.card_status == CARD_VALID) return (MI_OK);
00034a  7828              LDRB     r0,[r5,#0]  ; sCard
00034c  2806              CMP      r0,#6
00034e  d01b              BEQ      |L19.904|
;;;1254   	m_cnt = 0U;
000350  2100              MOVS     r1,#0
;;;1255   	
;;;1256   	for(b_cnt = 0U; b_cnt < 5U; b_cnt++)
000352  2000              MOVS     r0,#0
;;;1257   	{
;;;1258   		if(card_serial[b_cnt] == reset_card_serial[b_cnt]) ++m_cnt;
000354  4a0e              LDR      r2,|L19.912|
000356  3a0a              SUBS     r2,r2,#0xa
                  |L19.856|
000358  5c23              LDRB     r3,[r4,r0]
00035a  5c15              LDRB     r5,[r2,r0]
00035c  42ab              CMP      r3,r5
00035e  d101              BNE      |L19.868|
000360  1c49              ADDS     r1,r1,#1
000362  b2c9              UXTB     r1,r1
                  |L19.868|
000364  1c40              ADDS     r0,r0,#1              ;1256
000366  b2c0              UXTB     r0,r0                 ;1256
000368  2805              CMP      r0,#5                 ;1256
00036a  d3f5              BCC      |L19.856|
;;;1259   	}
;;;1260   
;;;1261   	if(m_cnt > 4U)
00036c  2904              CMP      r1,#4
00036e  d901              BLS      |L19.884|
;;;1262       {
;;;1263           Error_Handler();
000370  f7fffffe          BL       Error_Handler
                  |L19.884|
;;;1264       }
;;;1265       
;;;1266   	return (MI_OK);
000374  2001              MOVS     r0,#1
                  |L19.886|
;;;1267   }
000376  b008              ADD      sp,sp,#0x20
000378  e8bd87f0          POP      {r4-r10,pc}
                  |L19.892|
00037c  2015              MOVS     r0,#0x15              ;1240
00037e  7028              STRB     r0,[r5,#0]            ;1240
000380  e7e3              B        |L19.842|
                  |L19.898|
000382  f889c000          STRB     r12,[r9,#0]           ;1246
000386  e7e0              B        |L19.842|
                  |L19.904|
000388  2001              MOVS     r0,#1                 ;1253
00038a  e7f4              B        |L19.886|
;;;1268   
                          ENDP

                  |L19.908|
                          DCD      ||.bss||+0x200
                  |L19.912|
                          DCD      ||.data||+0x22
                  |L19.916|
                          DCD      hi2c1
                  |L19.920|
                          DCD      ||.bss||+0x40
                  |L19.924|
                          DCD      rs485_interface_address
                  |L19.928|
                          DCD      hrtc

                          AREA ||i.RC522_WriteRegister||, CODE, READONLY, ALIGN=2

                  RC522_WriteRegister PROC
;;;656    
;;;657    static void RC522_WriteRegister(uint8_t addr, uint8_t val) 
000000  b508              PUSH     {r3,lr}
;;;658    {
;;;659    	rc522_tx_buff[0] = addr;
000002  4a08              LDR      r2,|L20.36|
000004  7010              STRB     r0,[r2,#0]
;;;660        rc522_tx_buff[1] = val;     // set value
000006  7051              STRB     r1,[r2,#1]
;;;661    	if(HAL_I2C_Master_Transmit(&hi2c1, RC522_WRITE, rc522_tx_buff, 2U, RC522_TIMEOUT) != HAL_OK) Error_Handler();
000008  2005              MOVS     r0,#5
00000a  9000              STR      r0,[sp,#0]
00000c  2302              MOVS     r3,#2
00000e  217e              MOVS     r1,#0x7e
000010  4805              LDR      r0,|L20.40|
000012  f7fffffe          BL       HAL_I2C_Master_Transmit
000016  2800              CMP      r0,#0
000018  d003              BEQ      |L20.34|
00001a  e8bd4008          POP      {r3,lr}
00001e  f7ffbffe          B.W      Error_Handler
                  |L20.34|
;;;662    }
000022  bd08              POP      {r3,pc}
;;;663    
                          ENDP

                  |L20.36|
                          DCD      ||.bss||+0x222
                  |L20.40|
                          DCD      hi2c1

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  Sector_0
                          %        64
                  Sector_1
                          %        64
                  Sector_2
                          %        64
                  Sector_3
                          %        64
                  Sector_4
                          %        64
                  Sector_5
                          %        64
                  Sector_6
                          %        64
                  Sector_7
                          %        64
                  sCard
                          %        18
                  rc522_rx_buff
                          %        16
                  rc522_tx_buff
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  handmaid_card_cycles
000000  00                DCB      0x00
                  system_id
000001  000000            DCB      0x00,0x00,0x00
                  mifare_time
                          DCD      0x00000000
                  mifare_timer
                          DCD      0x00000000
                  handmaid_card_time
                          DCD      0x00000000
                  handmaid_card_timer
                          DCD      0x00000000
                  mifare_process_flags
                          DCD      0x00000000
                  reset_card_serial
000018  3475a6a7          DCB      0x34,0x75,0xa6,0xa7
00001c  40                DCB      0x40
                  card_id
00001d  000000            DCB      0x00,0x00,0x00
000020  0000              DCB      0x00,0x00
                  card_serial
000022  0000              DCB      0x00,0x00
000024  000000            DCB      0x00,0x00,0x00
                  mifare_key_a
000027  00                DCB      0x00
                          DCD      0x00000000
00002c  00                DCB      0x00

                          AREA ||area_number.25||, DATA, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.data||
                  mifare_key_b
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\Src\\rc522.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_rc522_c_db4e5622____REV16|
#line 441 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_rc522_c_db4e5622____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_rc522_c_db4e5622____REVSH|
#line 456
|__asm___7_rc522_c_db4e5622____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_rc522_c_db4e5622____RRX|
#line 643
|__asm___7_rc522_c_db4e5622____RRX| PROC
#line 644

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
