; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-170318\stm32f1xx_hal_rtc_ex.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-170318\stm32f1xx_hal_rtc_ex.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I.\RTE\_DE-170318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-170318\stm32f1xx_hal_rtc_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc_ex.c]
                          THUMB

                          AREA ||i.HAL_RTCEx_BKUPRead||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_BKUPRead PROC
;;;512      */
;;;513    uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
000000  4802              LDR      r0,|L1.12|
;;;514    {
;;;515      uint32_t backupregister = 0U;
;;;516      uint32_t pvalue = 0U;
;;;517    
;;;518      /* Prevent unused argument(s) compilation warning */
;;;519      UNUSED(hrtc);
;;;520    
;;;521      /* Check the parameters */
;;;522      assert_param(IS_RTC_BKP(BackupRegister));
;;;523    
;;;524      backupregister = (uint32_t)BKP_BASE; 
;;;525      backupregister += (BackupRegister * 4U);
000002  eb000081          ADD      r0,r0,r1,LSL #2
;;;526      
;;;527      pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
000006  6800              LDR      r0,[r0,#0]
000008  b280              UXTH     r0,r0
;;;528    
;;;529      /* Read the specified register */
;;;530      return pvalue;
;;;531    }
00000a  4770              BX       lr
;;;532    
                          ENDP

                  |L1.12|
                          DCD      0x40006c00

                          AREA ||i.HAL_RTCEx_BKUPWrite||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_BKUPWrite PROC
;;;487      */
;;;488    void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
000000  4802              LDR      r0,|L2.12|
;;;489    {
;;;490      uint32_t tmp = 0U;
;;;491    
;;;492      /* Prevent unused argument(s) compilation warning */
;;;493      UNUSED(hrtc);
;;;494    
;;;495      /* Check the parameters */
;;;496      assert_param(IS_RTC_BKP(BackupRegister));
;;;497      
;;;498      tmp = (uint32_t)BKP_BASE; 
;;;499      tmp += (BackupRegister * 4U);
000002  eb000081          ADD      r0,r0,r1,LSL #2
;;;500    
;;;501      *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
000006  b291              UXTH     r1,r2
000008  6001              STR      r1,[r0,#0]
;;;502    }
00000a  4770              BX       lr
;;;503    
                          ENDP

                  |L2.12|
                          DCD      0x40006c00

                          AREA ||i.HAL_RTCEx_DeactivateSecond||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_DeactivateSecond PROC
;;;362      */
;;;363    HAL_StatusTypeDef HAL_RTCEx_DeactivateSecond(RTC_HandleTypeDef *hrtc)
000000  2800              CMP      r0,#0
;;;364    {
000002  d010              BEQ      |L3.38|
;;;365      /* Check input parameters */
;;;366      if(hrtc == NULL)
;;;367      {
;;;368         return HAL_ERROR;
;;;369      }
;;;370      
;;;371      /* Process Locked */
;;;372      __HAL_LOCK(hrtc);
000004  7c01              LDRB     r1,[r0,#0x10]
000006  2901              CMP      r1,#1
000008  d00f              BEQ      |L3.42|
00000a  2201              MOVS     r2,#1
00000c  7402              STRB     r2,[r0,#0x10]
;;;373    
;;;374      hrtc->State = HAL_RTC_STATE_BUSY;
00000e  2102              MOVS     r1,#2
000010  7441              STRB     r1,[r0,#0x11]
;;;375    
;;;376      /* Deactivate Second interuption*/ 
;;;377      __HAL_RTC_SECOND_DISABLE_IT(hrtc, RTC_IT_SEC);
000012  6801              LDR      r1,[r0,#0]
000014  680b              LDR      r3,[r1,#0]
000016  f0230301          BIC      r3,r3,#1
00001a  600b              STR      r3,[r1,#0]
;;;378      
;;;379      hrtc->State = HAL_RTC_STATE_READY;
00001c  7442              STRB     r2,[r0,#0x11]
;;;380    
;;;381      /* Process Unlocked */
;;;382      __HAL_UNLOCK(hrtc);
00001e  2100              MOVS     r1,#0
000020  7401              STRB     r1,[r0,#0x10]
;;;383    
;;;384      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;385    }
000024  4770              BX       lr
                  |L3.38|
000026  2001              MOVS     r0,#1                 ;368
000028  4770              BX       lr
                  |L3.42|
00002a  2002              MOVS     r0,#2                 ;372
00002c  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.HAL_RTCEx_DeactivateTamper||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_DeactivateTamper PROC
;;;192      */
;;;193    HAL_StatusTypeDef HAL_RTCEx_DeactivateTamper(RTC_HandleTypeDef *hrtc, uint32_t Tamper)
000000  2800              CMP      r0,#0
;;;194    {
000002  d01d              BEQ      |L4.64|
;;;195      /* Check input parameters */
;;;196      if(hrtc == NULL)
;;;197      {
;;;198         return HAL_ERROR;
;;;199      }
;;;200      /* Prevent unused argument(s) compilation warning */
;;;201      UNUSED(Tamper);
;;;202    
;;;203      assert_param(IS_RTC_TAMPER(Tamper));
;;;204    
;;;205      /* Process Locked */
;;;206      __HAL_LOCK(hrtc);
000004  7c01              LDRB     r1,[r0,#0x10]
000006  2901              CMP      r1,#1
000008  d01c              BEQ      |L4.68|
00000a  2201              MOVS     r2,#1
00000c  7402              STRB     r2,[r0,#0x10]
;;;207    
;;;208      hrtc->State = HAL_RTC_STATE_BUSY;
00000e  2102              MOVS     r1,#2
000010  7441              STRB     r1,[r0,#0x11]
;;;209    
;;;210      /* Disable the selected Tamper pin */
;;;211      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
000012  490d              LDR      r1,|L4.72|
000014  680b              LDR      r3,[r1,#0]
000016  f0230301          BIC      r3,r3,#1
00001a  600b              STR      r3,[r1,#0]
;;;212      
;;;213      /* Disable the Tamper Interrupt in the BKP->CSR */
;;;214      /* Configure the Tamper Interrupt in the BKP->CSR */
;;;215      __HAL_RTC_TAMPER_DISABLE_IT(hrtc, RTC_IT_TAMP1);
00001c  1d09              ADDS     r1,r1,#4
00001e  680b              LDR      r3,[r1,#0]
000020  f0230304          BIC      r3,r3,#4
000024  600b              STR      r3,[r1,#0]
;;;216      
;;;217      /* Clear the Tamper interrupt pending bit */
;;;218      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
000026  680b              LDR      r3,[r1,#0]
000028  f0430303          ORR      r3,r3,#3
00002c  600b              STR      r3,[r1,#0]
;;;219      SET_BIT(BKP->CSR, BKP_CSR_CTE);
00002e  680b              LDR      r3,[r1,#0]
000030  f0430301          ORR      r3,r3,#1
000034  600b              STR      r3,[r1,#0]
;;;220      
;;;221      hrtc->State = HAL_RTC_STATE_READY;
000036  7442              STRB     r2,[r0,#0x11]
;;;222    
;;;223      /* Process Unlocked */
;;;224      __HAL_UNLOCK(hrtc);
000038  2100              MOVS     r1,#0
00003a  7401              STRB     r1,[r0,#0x10]
;;;225    
;;;226      return HAL_OK;
00003c  2000              MOVS     r0,#0
;;;227    }
00003e  4770              BX       lr
                  |L4.64|
000040  2001              MOVS     r0,#1                 ;198
000042  4770              BX       lr
                  |L4.68|
000044  2002              MOVS     r0,#2                 ;206
000046  4770              BX       lr
;;;228    
                          ENDP

                  |L4.72|
                          DCD      0x40006c30

                          AREA ||i.HAL_RTCEx_PollForTamper1Event||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_PollForTamper1Event PROC
;;;276      */
;;;277    HAL_StatusTypeDef HAL_RTCEx_PollForTamper1Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;278    {  
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;279      uint32_t tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4605              MOV      r5,r0
;;;280    
;;;281      /* Check input parameters */
;;;282      if(hrtc == NULL)
00000e  b10e              CBZ      r6,|L5.20|
;;;283      {
;;;284         return HAL_ERROR;
;;;285      }
;;;286      
;;;287      /* Get the status of the Interrupt */
;;;288      while(__HAL_RTC_TAMPER_GET_FLAG(hrtc,RTC_FLAG_TAMP1F)== RESET)
000010  4f0d              LDR      r7,|L5.72|
000012  e00d              B        |L5.48|
                  |L5.20|
000014  2001              MOVS     r0,#1                 ;284
                  |L5.22|
;;;289      {
;;;290        if(Timeout != HAL_MAX_DELAY)
;;;291        {
;;;292          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
;;;293          {
;;;294            hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;295            return HAL_TIMEOUT;
;;;296          }
;;;297        }
;;;298      }
;;;299    
;;;300      /* Clear the Tamper Flag */
;;;301      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
;;;302    
;;;303      /* Change RTC state */
;;;304      hrtc->State = HAL_RTC_STATE_READY;
;;;305    
;;;306      return HAL_OK;
;;;307    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L5.26|
00001a  1c60              ADDS     r0,r4,#1              ;290
00001c  d008              BEQ      |L5.48|
00001e  b124              CBZ      r4,|L5.42|
000020  f7fffffe          BL       HAL_GetTick
000024  1b40              SUBS     r0,r0,r5              ;292
000026  42a0              CMP      r0,r4                 ;292
000028  d902              BLS      |L5.48|
                  |L5.42|
00002a  2003              MOVS     r0,#3                 ;294
00002c  7470              STRB     r0,[r6,#0x11]         ;294
00002e  e7f2              B        |L5.22|
                  |L5.48|
000030  6838              LDR      r0,[r7,#0]            ;288
000032  05c0              LSLS     r0,r0,#23             ;288
000034  d5f1              BPL      |L5.26|
000036  6838              LDR      r0,[r7,#0]            ;301
000038  f0400003          ORR      r0,r0,#3              ;301
00003c  6038              STR      r0,[r7,#0]            ;301
00003e  2001              MOVS     r0,#1                 ;304
000040  7470              STRB     r0,[r6,#0x11]         ;304
000042  2000              MOVS     r0,#0                 ;306
000044  e7e7              B        |L5.22|
;;;308    
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
                          DCD      0x40006c34

                          AREA ||i.HAL_RTCEx_RTCEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_RTCEventCallback PROC
;;;432      */
;;;433    __WEAK void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;434    {
;;;435      /* Prevent unused argument(s) compilation warning */
;;;436      UNUSED(hrtc);
;;;437      /* NOTE : This function Should not be modified, when the callback is needed,
;;;438                the HAL_RTCEx_RTCEventCallback could be implemented in the user file
;;;439       */
;;;440    }
;;;441    
                          ENDP


                          AREA ||i.HAL_RTCEx_RTCEventErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_RTCEventErrorCallback PROC
;;;447      */
;;;448    __WEAK void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;449    {
;;;450      /* Prevent unused argument(s) compilation warning */
;;;451      UNUSED(hrtc);
;;;452      /* NOTE : This function Should not be modified, when the callback is needed,
;;;453                the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
;;;454       */
;;;455    }
;;;456    
                          ENDP


                          AREA ||i.HAL_RTCEx_RTCIRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_RTCIRQHandler PROC
;;;392      */
;;;393    void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef* hrtc)
000000  b510              PUSH     {r4,lr}
;;;394    {
000002  4604              MOV      r4,r0
;;;395      if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
000004  6820              LDR      r0,[r4,#0]
000006  6801              LDR      r1,[r0,#0]
000008  07c9              LSLS     r1,r1,#31
00000a  d018              BEQ      |L8.62|
;;;396      {
;;;397        /* Get the status of the Interrupt */
;;;398        if(__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
00000c  6841              LDR      r1,[r0,#4]
00000e  07c9              LSLS     r1,r1,#31
000010  d015              BEQ      |L8.62|
;;;399        {
;;;400          /* Check if Overrun occurred */
;;;401          if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
000012  6840              LDR      r0,[r0,#4]
000014  0740              LSLS     r0,r0,#29
000016  d509              BPL      |L8.44|
;;;402          {
;;;403            /* Second error callback */ 
;;;404            HAL_RTCEx_RTCEventErrorCallback(hrtc);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       HAL_RTCEx_RTCEventErrorCallback
;;;405            
;;;406            /* Clear flag Second */
;;;407            __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
00001e  6821              LDR      r1,[r4,#0]
000020  f06f0004          MVN      r0,#4
000024  6048              STR      r0,[r1,#4]
;;;408            
;;;409            /* Change RTC state */
;;;410            hrtc->State = HAL_RTC_STATE_ERROR; 
000026  2004              MOVS     r0,#4
000028  7460              STRB     r0,[r4,#0x11]
00002a  e004              B        |L8.54|
                  |L8.44|
;;;411          }
;;;412          else 
;;;413          {
;;;414            /* Second callback */ 
;;;415            HAL_RTCEx_RTCEventCallback(hrtc);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       HAL_RTCEx_RTCEventCallback
;;;416            
;;;417            /* Change RTC state */
;;;418            hrtc->State = HAL_RTC_STATE_READY; 
000032  2001              MOVS     r0,#1
000034  7460              STRB     r0,[r4,#0x11]
                  |L8.54|
;;;419          }
;;;420          
;;;421          /* Clear flag Second */
;;;422          __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
000036  6821              LDR      r1,[r4,#0]
000038  f06f0001          MVN      r0,#1
00003c  6048              STR      r0,[r1,#4]
                  |L8.62|
;;;423        }
;;;424      }
;;;425    }
00003e  bd10              POP      {r4,pc}
;;;426    
                          ENDP


                          AREA ||i.HAL_RTCEx_SetSecond_IT||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_SetSecond_IT PROC
;;;332      */
;;;333    HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
000000  2800              CMP      r0,#0
;;;334    {
000002  d010              BEQ      |L9.38|
;;;335      /* Check input parameters */
;;;336      if(hrtc == NULL)
;;;337      {
;;;338         return HAL_ERROR;
;;;339      }
;;;340      
;;;341      /* Process Locked */
;;;342      __HAL_LOCK(hrtc);
000004  7c01              LDRB     r1,[r0,#0x10]
000006  2901              CMP      r1,#1
000008  d00f              BEQ      |L9.42|
00000a  2201              MOVS     r2,#1
00000c  7402              STRB     r2,[r0,#0x10]
;;;343    
;;;344      hrtc->State = HAL_RTC_STATE_BUSY;
00000e  2102              MOVS     r1,#2
000010  7441              STRB     r1,[r0,#0x11]
;;;345    
;;;346      /* Enable Second interuption */
;;;347      __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
000012  6801              LDR      r1,[r0,#0]
000014  680b              LDR      r3,[r1,#0]
000016  f0430301          ORR      r3,r3,#1
00001a  600b              STR      r3,[r1,#0]
;;;348      
;;;349      hrtc->State = HAL_RTC_STATE_READY;
00001c  7442              STRB     r2,[r0,#0x11]
;;;350    
;;;351      /* Process Unlocked */
;;;352      __HAL_UNLOCK(hrtc);
00001e  2100              MOVS     r1,#0
000020  7401              STRB     r1,[r0,#0x10]
;;;353    
;;;354      return HAL_OK;
000022  2000              MOVS     r0,#0
;;;355    }
000024  4770              BX       lr
                  |L9.38|
000026  2001              MOVS     r0,#1                 ;338
000028  4770              BX       lr
                  |L9.42|
00002a  2002              MOVS     r0,#2                 ;342
00002c  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.HAL_RTCEx_SetSmoothCalib||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetSmoothCalib PROC
;;;542      */
;;;543    HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmouthCalibMinusPulsesValue)
000000  b510              PUSH     {r4,lr}
;;;544    {
;;;545      /* Check input parameters */
;;;546      if(hrtc == NULL)
000002  2800              CMP      r0,#0
000004  d011              BEQ      |L10.42|
;;;547      {
;;;548         return HAL_ERROR;
;;;549      }
;;;550      /* Prevent unused argument(s) compilation warning */
;;;551      UNUSED(SmoothCalibPeriod);
;;;552      UNUSED(SmoothCalibPlusPulses);
;;;553    
;;;554      /* Check the parameters */
;;;555      assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmouthCalibMinusPulsesValue));
;;;556      
;;;557      /* Process Locked */
;;;558      __HAL_LOCK(hrtc);
000006  7c01              LDRB     r1,[r0,#0x10]
000008  2901              CMP      r1,#1
00000a  d010              BEQ      |L10.46|
00000c  2101              MOVS     r1,#1
00000e  7401              STRB     r1,[r0,#0x10]
;;;559    
;;;560      hrtc->State = HAL_RTC_STATE_BUSY;
000010  2202              MOVS     r2,#2
000012  7442              STRB     r2,[r0,#0x11]
;;;561    
;;;562      /* Sets RTC Clock Calibration value.*/
;;;563      MODIFY_REG(BKP->RTCCR, BKP_RTCCR_CAL, SmouthCalibMinusPulsesValue);
000014  4a07              LDR      r2,|L10.52|
000016  6814              LDR      r4,[r2,#0]
000018  f024047f          BIC      r4,r4,#0x7f
00001c  431c              ORRS     r4,r4,r3
00001e  6014              STR      r4,[r2,#0]
;;;564    
;;;565      /* Change RTC state */
;;;566      hrtc->State = HAL_RTC_STATE_READY;
000020  7441              STRB     r1,[r0,#0x11]
;;;567    
;;;568      /* Process Unlocked */
;;;569      __HAL_UNLOCK(hrtc);
000022  2100              MOVS     r1,#0
000024  7401              STRB     r1,[r0,#0x10]
;;;570    
;;;571      return HAL_OK;
000026  2000              MOVS     r0,#0
;;;572    }
000028  bd10              POP      {r4,pc}
                  |L10.42|
00002a  2001              MOVS     r0,#1                 ;548
00002c  bd10              POP      {r4,pc}
                  |L10.46|
00002e  2002              MOVS     r0,#2                 ;558
000030  bd10              POP      {r4,pc}
;;;573    
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      0x40006c2c

                          AREA ||i.HAL_RTCEx_SetTamper||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetTamper PROC
;;;98       */
;;;99     HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
000000  b530              PUSH     {r4,r5,lr}
;;;100    {
;;;101      /* Check input parameters */
;;;102      if((hrtc == NULL) || (sTamper == NULL))
000002  2800              CMP      r0,#0
000004  d013              BEQ      |L11.46|
000006  b191              CBZ      r1,|L11.46|
;;;103      {
;;;104         return HAL_ERROR;
;;;105      }
;;;106      
;;;107      /* Check the parameters */
;;;108      assert_param(IS_RTC_TAMPER(sTamper->Tamper));
;;;109      assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));
;;;110    
;;;111      /* Process Locked */
;;;112      __HAL_LOCK(hrtc);
000008  7c02              LDRB     r2,[r0,#0x10]
00000a  2a01              CMP      r2,#1
00000c  d011              BEQ      |L11.50|
00000e  2201              MOVS     r2,#1
000010  7402              STRB     r2,[r0,#0x10]
;;;113    
;;;114      hrtc->State = HAL_RTC_STATE_BUSY;
000012  2302              MOVS     r3,#2
000014  7443              STRB     r3,[r0,#0x11]
;;;115      
;;;116      if (HAL_IS_BIT_SET(BKP->RTCCR,(BKP_RTCCR_CCO | BKP_RTCCR_ASOE)))
000016  4b0f              LDR      r3,|L11.84|
000018  681b              LDR      r3,[r3,#0]
00001a  f4137fc0          TST      r3,#0x180
00001e  f04f0300          MOV      r3,#0
000022  d008              BEQ      |L11.54|
;;;117      {
;;;118        hrtc->State = HAL_RTC_STATE_ERROR;
000024  2104              MOVS     r1,#4
000026  7441              STRB     r1,[r0,#0x11]
;;;119        
;;;120        /* Process Unlocked */
;;;121        __HAL_UNLOCK(hrtc);
000028  7403              STRB     r3,[r0,#0x10]
;;;122        
;;;123        return HAL_ERROR;
00002a  2001              MOVS     r0,#1
;;;124      }
;;;125    
;;;126      MODIFY_REG(BKP->CR, (BKP_CR_TPE | BKP_CR_TPAL), (sTamper->Tamper | (sTamper->Trigger)));
;;;127    
;;;128      hrtc->State = HAL_RTC_STATE_READY; 
;;;129    
;;;130      /* Process Unlocked */
;;;131      __HAL_UNLOCK(hrtc);
;;;132    
;;;133      return HAL_OK;
;;;134    }
00002c  bd30              POP      {r4,r5,pc}
                  |L11.46|
00002e  2001              MOVS     r0,#1                 ;104
000030  bd30              POP      {r4,r5,pc}
                  |L11.50|
000032  2002              MOVS     r0,#2                 ;112
000034  bd30              POP      {r4,r5,pc}
                  |L11.54|
000036  e9d14100          LDRD     r4,r1,[r1,#0]         ;126
00003a  430c              ORRS     r4,r4,r1              ;126
00003c  4905              LDR      r1,|L11.84|
00003e  1d09              ADDS     r1,r1,#4              ;126
000040  680d              LDR      r5,[r1,#0]            ;126
000042  f0250503          BIC      r5,r5,#3              ;126
000046  432c              ORRS     r4,r4,r5              ;126
000048  600c              STR      r4,[r1,#0]            ;126
00004a  7442              STRB     r2,[r0,#0x11]         ;128
00004c  7403              STRB     r3,[r0,#0x10]         ;131
00004e  2000              MOVS     r0,#0                 ;133
000050  bd30              POP      {r4,r5,pc}
;;;135    
                          ENDP

000052  0000              DCW      0x0000
                  |L11.84|
                          DCD      0x40006c2c

                          AREA ||i.HAL_RTCEx_SetTamper_IT||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetTamper_IT PROC
;;;144      */
;;;145    HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
000000  b530              PUSH     {r4,r5,lr}
;;;146    {
;;;147      /* Check input parameters */
;;;148      if((hrtc == NULL) || (sTamper == NULL))
000002  2800              CMP      r0,#0
000004  d013              BEQ      |L12.46|
000006  b191              CBZ      r1,|L12.46|
;;;149      {
;;;150         return HAL_ERROR;
;;;151      }
;;;152      
;;;153      /* Check the parameters */
;;;154      assert_param(IS_RTC_TAMPER(sTamper->Tamper)); 
;;;155      assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));
;;;156    
;;;157      /* Process Locked */
;;;158      __HAL_LOCK(hrtc);
000008  7c02              LDRB     r2,[r0,#0x10]
00000a  2a01              CMP      r2,#1
00000c  d011              BEQ      |L12.50|
00000e  2301              MOVS     r3,#1
000010  7403              STRB     r3,[r0,#0x10]
;;;159    
;;;160      hrtc->State = HAL_RTC_STATE_BUSY;
000012  2202              MOVS     r2,#2
000014  7442              STRB     r2,[r0,#0x11]
;;;161    
;;;162      if (HAL_IS_BIT_SET(BKP->RTCCR,(BKP_RTCCR_CCO | BKP_RTCCR_ASOE)))
000016  4a11              LDR      r2,|L12.92|
000018  6812              LDR      r2,[r2,#0]
00001a  f04f0400          MOV      r4,#0
00001e  f4127fc0          TST      r2,#0x180
000022  d008              BEQ      |L12.54|
;;;163      {
;;;164        hrtc->State = HAL_RTC_STATE_ERROR;
000024  2104              MOVS     r1,#4
000026  7441              STRB     r1,[r0,#0x11]
;;;165        
;;;166        /* Process Unlocked */
;;;167        __HAL_UNLOCK(hrtc);
000028  7404              STRB     r4,[r0,#0x10]
;;;168        
;;;169        return HAL_ERROR;
00002a  2001              MOVS     r0,#1
;;;170      }
;;;171    
;;;172      MODIFY_REG(BKP->CR, (BKP_CR_TPE | BKP_CR_TPAL), (sTamper->Tamper | (sTamper->Trigger)));
;;;173    
;;;174      /* Configure the Tamper Interrupt in the BKP->CSR */
;;;175      __HAL_RTC_TAMPER_ENABLE_IT(hrtc, RTC_IT_TAMP1);
;;;176    
;;;177      hrtc->State = HAL_RTC_STATE_READY;
;;;178    
;;;179      /* Process Unlocked */
;;;180      __HAL_UNLOCK(hrtc);
;;;181    
;;;182      return HAL_OK;
;;;183    }
00002c  bd30              POP      {r4,r5,pc}
                  |L12.46|
00002e  2001              MOVS     r0,#1                 ;150
000030  bd30              POP      {r4,r5,pc}
                  |L12.50|
000032  2002              MOVS     r0,#2                 ;158
000034  bd30              POP      {r4,r5,pc}
                  |L12.54|
000036  e9d12100          LDRD     r2,r1,[r1,#0]         ;172
00003a  430a              ORRS     r2,r2,r1              ;172
00003c  4907              LDR      r1,|L12.92|
00003e  1d09              ADDS     r1,r1,#4              ;172
000040  680d              LDR      r5,[r1,#0]            ;172
000042  f0250503          BIC      r5,r5,#3              ;172
000046  432a              ORRS     r2,r2,r5              ;172
000048  600a              STR      r2,[r1,#0]            ;172
00004a  1d09              ADDS     r1,r1,#4              ;175
00004c  680a              LDR      r2,[r1,#0]            ;175
00004e  f0420204          ORR      r2,r2,#4              ;175
000052  600a              STR      r2,[r1,#0]            ;175
000054  7443              STRB     r3,[r0,#0x11]         ;177
000056  7404              STRB     r4,[r0,#0x10]         ;180
000058  2000              MOVS     r0,#0                 ;182
00005a  bd30              POP      {r4,r5,pc}
;;;184    
                          ENDP

                  |L12.92|
                          DCD      0x40006c2c

                          AREA ||i.HAL_RTCEx_Tamper1EventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_Tamper1EventCallback PROC
;;;260      */
;;;261    __WEAK void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;262    {
;;;263      /* Prevent unused argument(s) compilation warning */
;;;264      UNUSED(hrtc);
;;;265      /* NOTE : This function Should not be modified, when the callback is needed,
;;;266                the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
;;;267       */
;;;268    }
;;;269    
                          ENDP


                          AREA ||i.HAL_RTCEx_TamperIRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_TamperIRQHandler PROC
;;;234      */
;;;235    void HAL_RTCEx_TamperIRQHandler(RTC_HandleTypeDef *hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {  
000002  4605              MOV      r5,r0
;;;237      /* Get the status of the Interrupt */
;;;238      if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP1))
000004  4c08              LDR      r4,|L14.40|
000006  6821              LDR      r1,[r4,#0]
000008  0749              LSLS     r1,r1,#29
00000a  d509              BPL      |L14.32|
;;;239      {
;;;240        /* Get the TAMPER Interrupt enable bit and pending bit */
;;;241        if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != (uint32_t)RESET)
00000c  6820              LDR      r0,[r4,#0]
00000e  05c0              LSLS     r0,r0,#23
000010  d506              BPL      |L14.32|
;;;242        {
;;;243          /* Tamper callback */ 
;;;244          HAL_RTCEx_Tamper1EventCallback(hrtc);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       HAL_RTCEx_Tamper1EventCallback
;;;245      
;;;246          /* Clear the Tamper interrupt pending bit */
;;;247          __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
000018  6820              LDR      r0,[r4,#0]
00001a  f0400103          ORR      r1,r0,#3
00001e  6021              STR      r1,[r4,#0]
                  |L14.32|
;;;248        }
;;;249      }
;;;250    
;;;251      /* Change RTC state */
;;;252      hrtc->State = HAL_RTC_STATE_READY;
000020  2001              MOVS     r0,#1
000022  7468              STRB     r0,[r5,#0x11]
;;;253    }
000024  bd70              POP      {r4-r6,pc}
;;;254    
                          ENDP

000026  0000              DCW      0x0000
                  |L14.40|
                          DCD      0x40006c34

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rtc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_rtc_ex_c_3ad0e55f____REV16|
#line 441 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_rtc_ex_c_3ad0e55f____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_rtc_ex_c_3ad0e55f____REVSH|
#line 456
|__asm___22_stm32f1xx_hal_rtc_ex_c_3ad0e55f____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_rtc_ex_c_3ad0e55f____RRX|
#line 643
|__asm___22_stm32f1xx_hal_rtc_ex_c_3ad0e55f____RRX| PROC
#line 644

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
