; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-170318\stm32f1xx_hal_pwr.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-170318\stm32f1xx_hal_pwr.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I..\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc -I..\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy -I..\Drivers\CMSIS\Device\ST\STM32F1xx\Include -I.\RTE\_DE-170318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-170318\stm32f1xx_hal_pwr.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;335      */
;;;336    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  b530              PUSH     {r4,r5,lr}
;;;337    {
;;;338      /* Check the parameters */
;;;339      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;340      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;341    
;;;342      /* Set PLS[7:5] bits according to PVDLevel value */
;;;343      MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
000002  491c              LDR      r1,|L1.116|
000004  680a              LDR      r2,[r1,#0]
000006  6803              LDR      r3,[r0,#0]
000008  f02202e0          BIC      r2,r2,#0xe0
00000c  431a              ORRS     r2,r2,r3
00000e  600a              STR      r2,[r1,#0]
;;;344      
;;;345      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;346      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4c19              LDR      r4,|L1.120|
000012  6821              LDR      r1,[r4,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  6021              STR      r1,[r4,#0]
;;;347      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001a  1f21              SUBS     r1,r4,#4
00001c  680a              LDR      r2,[r1,#0]
00001e  f4223280          BIC      r2,r2,#0x10000
000022  600a              STR      r2,[r1,#0]
;;;348      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000024  4b14              LDR      r3,|L1.120|
000026  3308              ADDS     r3,r3,#8
000028  681a              LDR      r2,[r3,#0]
00002a  f4223280          BIC      r2,r2,#0x10000
00002e  601a              STR      r2,[r3,#0]
;;;349      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000030  1f1a              SUBS     r2,r3,#4
000032  6815              LDR      r5,[r2,#0]
000034  f4253580          BIC      r5,r5,#0x10000
000038  6015              STR      r5,[r2,#0]
;;;350    
;;;351      /* Configure interrupt mode */
;;;352      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
00003a  6845              LDR      r5,[r0,#4]
00003c  03ed              LSLS     r5,r5,#15
00003e  d503              BPL      |L1.72|
;;;353      {
;;;354        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000040  680d              LDR      r5,[r1,#0]
000042  f4453580          ORR      r5,r5,#0x10000
000046  600d              STR      r5,[r1,#0]
                  |L1.72|
;;;355      }
;;;356      
;;;357      /* Configure event mode */
;;;358      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000048  6841              LDR      r1,[r0,#4]
00004a  0389              LSLS     r1,r1,#14
00004c  d503              BPL      |L1.86|
;;;359      {
;;;360        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00004e  6821              LDR      r1,[r4,#0]
000050  f4413180          ORR      r1,r1,#0x10000
000054  6021              STR      r1,[r4,#0]
                  |L1.86|
;;;361      }
;;;362      
;;;363      /* Configure the edge */
;;;364      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000056  7901              LDRB     r1,[r0,#4]
000058  07c9              LSLS     r1,r1,#31
00005a  d003              BEQ      |L1.100|
;;;365      {
;;;366        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
00005c  6811              LDR      r1,[r2,#0]
00005e  f4413180          ORR      r1,r1,#0x10000
000062  6011              STR      r1,[r2,#0]
                  |L1.100|
;;;367      }
;;;368      
;;;369      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000064  7900              LDRB     r0,[r0,#4]
000066  0780              LSLS     r0,r0,#30
000068  d503              BPL      |L1.114|
;;;370      {
;;;371        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00006a  6818              LDR      r0,[r3,#0]
00006c  f4403080          ORR      r0,r0,#0x10000
000070  6018              STR      r0,[r3,#0]
                  |L1.114|
;;;372      }
;;;373    }
000072  bd30              POP      {r4,r5,pc}
;;;374    
                          ENDP

                  |L1.116|
                          DCD      0x40007000
                  |L1.120|
                          DCD      0x40010404

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;175      */
;;;176    void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L2.20|
;;;177    {
;;;178      __HAL_RCC_PWR_FORCE_RESET();
000002  6901              LDR      r1,[r0,#0x10]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6101              STR      r1,[r0,#0x10]
;;;179      __HAL_RCC_PWR_RELEASE_RESET();
00000a  6901              LDR      r1,[r0,#0x10]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6101              STR      r1,[r0,#0x10]
;;;180    }
000012  4770              BX       lr
;;;181    
                          ENDP

                  |L2.20|
                          DCD      0x40021000

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;201      */
;;;202    void HAL_PWR_DisableBkUpAccess(void)
000000  4901              LDR      r1,|L3.8|
;;;203    {
;;;204      /* Disable access to RTC and backup registers */
;;;205      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6208              STR      r0,[r1,#0x20]
;;;206    }
000006  4770              BX       lr
;;;207    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;388      */
;;;389    void HAL_PWR_DisablePVD(void)
000000  4901              LDR      r1,|L4.8|
;;;390    {
;;;391      /* Disable the power voltage detector */
;;;392      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;393    }
000006  4770              BX       lr
;;;394    
                          ENDP

                  |L4.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;586      */
;;;587    void HAL_PWR_DisableSEVOnPend(void)
000000  4802              LDR      r0,|L5.12|
;;;588    {
;;;589      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;590      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;591    }
00000a  4770              BX       lr
;;;592    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;560      */
;;;561    void HAL_PWR_DisableSleepOnExit(void)
000000  4802              LDR      r0,|L6.12|
;;;562    {
;;;563      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;564      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210102          BIC      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;565    }
00000a  4770              BX       lr
;;;566    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;416      */
;;;417    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;418    {
;;;419      /* Check the parameter */
;;;420      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;421      /* Disable the EWUPx pin */
;;;422      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
000004  4a04              LDR      r2,|L7.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2100              MOVS     r1,#0
000010  f8c01080          STR      r1,[r0,#0x80]
;;;423    }
000014  4770              BX       lr
;;;424    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;188      */
;;;189    void HAL_PWR_EnableBkUpAccess(void)
000000  4901              LDR      r1,|L8.8|
;;;190    {
;;;191      /* Enable access to RTC and backup registers */
;;;192      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6208              STR      r0,[r1,#0x20]
;;;193    }
000006  4770              BX       lr
;;;194    
                          ENDP

                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;378      */
;;;379    void HAL_PWR_EnablePVD(void)
000000  4901              LDR      r1,|L9.8|
;;;380    {
;;;381      /* Enable the power voltage detector */
;;;382      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6108              STR      r0,[r1,#0x10]
;;;383    }
000006  4770              BX       lr
;;;384    
                          ENDP

                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;573      */
;;;574    void HAL_PWR_EnableSEVOnPend(void)
000000  4802              LDR      r0,|L10.12|
;;;575    {
;;;576      /* Set SEVONPEND bit of Cortex System Control Register */
;;;577      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;578    }
00000a  4770              BX       lr
;;;579    
                          ENDP

                  |L10.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;547      */
;;;548    void HAL_PWR_EnableSleepOnExit(void)
000000  4802              LDR      r0,|L11.12|
;;;549    {
;;;550      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;551      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;552    }
00000a  4770              BX       lr
;;;553    
                          ENDP

                  |L11.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;401      */
;;;402    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;403    {
;;;404      /* Check the parameter */
;;;405      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;406      /* Enable the EWUPx pin */
;;;407      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
000004  4a04              LDR      r2,|L12.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2101              MOVS     r1,#1
000010  f8c01080          STR      r1,[r0,#0x80]
;;;408    }
000014  4770              BX       lr
;;;409    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;436      */
;;;437    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4806              LDR      r0,|L13.28|
;;;438    {
;;;439      /* Check the parameters */
;;;440      /* No check on Regulator because parameter not used in SLEEP mode */
;;;441      /* Prevent unused argument(s) compilation warning */
;;;442      UNUSED(Regulator);
;;;443    
;;;444      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;445    
;;;446      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;447      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6802              LDR      r2,[r0,#0]
000004  f0220204          BIC      r2,r2,#4
000008  6002              STR      r2,[r0,#0]
;;;448    
;;;449      /* Select SLEEP mode entry -------------------------------------------------*/
;;;450      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000a  2901              CMP      r1,#1
00000c  d003              BEQ      |L13.22|
;;;451      {
;;;452        /* Request Wait For Interrupt */
;;;453        __WFI();
;;;454      }
;;;455      else
;;;456      {
;;;457        /* Request Wait For Event */
;;;458        __SEV();
00000e  bf40              SEV      
;;;459        __WFE();
000010  bf20              WFE      
;;;460        __WFE();
000012  bf20              WFE      
;;;461      }
;;;462    }
000014  4770              BX       lr
                  |L13.22|
000016  bf30              WFI                            ;453
000018  4770              BX       lr
;;;463    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;522      */
;;;523    void HAL_PWR_EnterSTANDBYMode(void)
000000  4805              LDR      r0,|L14.24|
;;;524    {
;;;525      /* Select Standby mode */
;;;526      SET_BIT(PWR->CR, PWR_CR_PDDS);
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;527    
;;;528      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;529      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000a  4804              LDR      r0,|L14.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410104          ORR      r1,r1,#4
000012  6001              STR      r1,[r0,#0]
;;;530    
;;;531      /* This option is used to ensure that store operations are completed */
;;;532    #if defined ( __CC_ARM)
;;;533      __force_stores();
;;;534    #endif
;;;535      /* Request Wait For Interrupt */
;;;536      __WFI();
000014  bf30              WFI      
;;;537    }
000016  4770              BX       lr
;;;538    
                          ENDP

                  |L14.24|
                          DCD      0x40007000
                  |L14.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;482      */
;;;483    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;484    {
;;;485      /* Check the parameters */
;;;486      assert_param(IS_PWR_REGULATOR(Regulator));
;;;487      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;488    
;;;489      /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
;;;490      CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
000002  4a0e              LDR      r2,|L15.60|
000004  6813              LDR      r3,[r2,#0]
000006  f0230302          BIC      r3,r3,#2
00000a  6013              STR      r3,[r2,#0]
;;;491    
;;;492      /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
;;;493      MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
00000c  6813              LDR      r3,[r2,#0]
00000e  f0230301          BIC      r3,r3,#1
000012  4303              ORRS     r3,r3,r0
000014  6013              STR      r3,[r2,#0]
;;;494    
;;;495      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;496      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000016  4c0a              LDR      r4,|L15.64|
000018  6820              LDR      r0,[r4,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  6020              STR      r0,[r4,#0]
;;;497    
;;;498      /* Select Stop mode entry --------------------------------------------------*/
;;;499      if(STOPEntry == PWR_STOPENTRY_WFI)
000020  2901              CMP      r1,#1
000022  d009              BEQ      |L15.56|
;;;500      {
;;;501        /* Request Wait For Interrupt */
;;;502        __WFI();
;;;503      }
;;;504      else
;;;505      {
;;;506        /* Request Wait For Event */
;;;507        __SEV();
000024  bf40              SEV      
;;;508        PWR_OverloadWfe(); /* WFE redefine locally */
000026  f7fffffe          BL       PWR_OverloadWfe
;;;509        PWR_OverloadWfe(); /* WFE redefine locally */
00002a  f7fffffe          BL       PWR_OverloadWfe
                  |L15.46|
;;;510      }
;;;511      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;512      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00002e  6820              LDR      r0,[r4,#0]
000030  f0200004          BIC      r0,r0,#4
000034  6020              STR      r0,[r4,#0]
;;;513    }
000036  bd10              POP      {r4,pc}
                  |L15.56|
000038  bf30              WFI                            ;502
00003a  e7f8              B        |L15.46|
;;;514    
                          ENDP

                  |L15.60|
                          DCD      0x40007000
                  |L15.64|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;616      */
;;;617    __WEAK void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;618    {
;;;619      /* NOTE : This function Should not be modified, when the callback is needed,
;;;620                the HAL_PWR_PVDCallback could be implemented in the user file
;;;621       */ 
;;;622    }
;;;623    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;599      */
;;;600    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;601    {
;;;602      /* Check PWR exti flag */
;;;603      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4c05              LDR      r4,|L17.24|
000004  6820              LDR      r0,[r4,#0]
000006  03c0              LSLS     r0,r0,#15
000008  d504              BPL      |L17.20|
;;;604      {
;;;605        /* PWR PVD interrupt user callback */
;;;606        HAL_PWR_PVDCallback();
00000a  f7fffffe          BL       HAL_PWR_PVDCallback
;;;607    
;;;608        /* Clear PWR Exti pending bit */
;;;609        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
00000e  f44f3080          MOV      r0,#0x10000
000012  6020              STR      r0,[r4,#0]
                  |L17.20|
;;;610      }
;;;611    }
000014  bd10              POP      {r4,pc}
;;;612    
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      0x40010414

                          AREA ||i.PWR_OverloadWfe||, CODE, READONLY, ALIGN=1

                  PWR_OverloadWfe PROC
                  ||__tagsym$$noinline||
;;;136    
;;;137    static void PWR_OverloadWfe(void)
000000  bf20              WFE      
;;;138    {
;;;139      __asm volatile( "wfe" );
;;;140      __asm volatile( "nop" );
000002  bf00              NOP      
;;;141    }
000004  4770              BX       lr
;;;142    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16|
#line 441 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH|
#line 456
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX|
#line 643
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 644

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
