; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-160318\stm32f1xx_hal_spi_ex.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-160318\stm32f1xx_hal_spi_ex.d --feedback=.\DE-160318\DE-160318.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I.\RTE\_DE-160318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-160318\stm32f1xx_hal_spi_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi_ex.c]
                          THUMB

                          AREA ||i.HAL_SPI_Init||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Init PROC
;;;97       */
;;;98     HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;99     {
000002  0004              MOVS     r4,r0
000004  d003              BEQ      |L1.14|
;;;100      /* Check the SPI handle allocation */
;;;101      if(hspi == NULL)
;;;102      {
;;;103        return HAL_ERROR;
;;;104      }
;;;105    
;;;106      /* Check the parameters */
;;;107      assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
;;;108      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;109      assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
;;;110      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;111      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;112      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;113      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;114      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;115      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;116      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;117      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;118      assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;119    
;;;120      if(hspi->State == HAL_SPI_STATE_RESET)
000006  f8940051          LDRB     r0,[r4,#0x51]
00000a  b110              CBZ      r0,|L1.18|
00000c  e004              B        |L1.24|
                  |L1.14|
00000e  2001              MOVS     r0,#1                 ;103
;;;121      {
;;;122        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;123        HAL_SPI_MspInit(hspi);
;;;124      }
;;;125      
;;;126      hspi->State = HAL_SPI_STATE_BUSY;
;;;127    
;;;128      /* Disble the selected SPI peripheral */
;;;129      __HAL_SPI_DISABLE(hspi);
;;;130    
;;;131      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;132      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;133      Communication speed, First bit and CRC calculation state */
;;;134      WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;135                                      hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;136                                      hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );
;;;137    
;;;138      /* Configure : NSS management */
;;;139      WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
;;;140    
;;;141      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;142      /* Configure : CRC Polynomial */
;;;143      WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
;;;144    
;;;145    #if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
;;;146      /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
;;;147      CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
;;;148    #endif
;;;149    
;;;150    #if defined (STM32F101xE) || defined (STM32F103xE)
;;;151      /* Check RevisionID value for identifying if Device is Rev Z (0x0001) in order to enable workaround for
;;;152         CRC errors wrongly detected */
;;;153      /* Pb is that ES_STM32F10xxCDE also identify an issue in Debug registers access while not in Debug mode.
;;;154         Revision ID information is only available in Debug mode, so Workaround could not be implemented
;;;155         to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
;;;156         So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
;;;157      uCRCErrorWorkaroundCheck = 0;
;;;158    #else
;;;159      uCRCErrorWorkaroundCheck = 0;
;;;160    #endif
;;;161    
;;;162      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;163      hspi->State = HAL_SPI_STATE_READY;
;;;164      
;;;165      return HAL_OK;
;;;166    }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  4620              MOV      r0,r4                 ;123
000014  f7fffffe          BL       HAL_SPI_MspInit
                  |L1.24|
000018  2002              MOVS     r0,#2                 ;126
00001a  f8840051          STRB     r0,[r4,#0x51]         ;126
00001e  6820              LDR      r0,[r4,#0]            ;129
000020  6801              LDR      r1,[r0,#0]            ;129
000022  f0210140          BIC      r1,r1,#0x40           ;129
000026  6001              STR      r1,[r0,#0]            ;129
000028  e9d40101          LDRD     r0,r1,[r4,#4]         ;129
00002c  4308              ORRS     r0,r0,r1              ;134
00002e  e9d41203          LDRD     r1,r2,[r4,#0xc]       ;134
000032  4311              ORRS     r1,r1,r2              ;134
000034  4308              ORRS     r0,r0,r1              ;134
000036  6961              LDR      r1,[r4,#0x14]         ;134
000038  4308              ORRS     r0,r0,r1              ;134
00003a  8b21              LDRH     r1,[r4,#0x18]         ;134
00003c  f4017100          AND      r1,r1,#0x200          ;134
000040  4308              ORRS     r0,r0,r1              ;134
000042  69e1              LDR      r1,[r4,#0x1c]         ;134
000044  4308              ORRS     r0,r0,r1              ;134
000046  6a21              LDR      r1,[r4,#0x20]         ;134
000048  4308              ORRS     r0,r0,r1              ;134
00004a  6aa1              LDR      r1,[r4,#0x28]         ;134
00004c  4308              ORRS     r0,r0,r1              ;134
00004e  6821              LDR      r1,[r4,#0]            ;134
000050  6008              STR      r0,[r1,#0]            ;134
000052  69a0              LDR      r0,[r4,#0x18]         ;139
000054  2104              MOVS     r1,#4                 ;139
000056  ea014010          AND      r0,r1,r0,LSR #16      ;139
00005a  6a61              LDR      r1,[r4,#0x24]         ;139
00005c  4308              ORRS     r0,r0,r1              ;139
00005e  6821              LDR      r1,[r4,#0]            ;139
000060  6048              STR      r0,[r1,#4]            ;139
000062  6821              LDR      r1,[r4,#0]            ;143
000064  6ae0              LDR      r0,[r4,#0x2c]         ;143
000066  6108              STR      r0,[r1,#0x10]         ;143
000068  6820              LDR      r0,[r4,#0]            ;147
00006a  69c1              LDR      r1,[r0,#0x1c]         ;147
00006c  f4216100          BIC      r1,r1,#0x800          ;147
000070  61c1              STR      r1,[r0,#0x1c]         ;147
000072  4904              LDR      r1,|L1.132|
000074  2000              MOVS     r0,#0                 ;159
000076  7008              STRB     r0,[r1,#0]            ;159
000078  6560              STR      r0,[r4,#0x54]         ;162
00007a  2001              MOVS     r0,#1                 ;163
00007c  f8840051          STRB     r0,[r4,#0x51]         ;163
000080  2000              MOVS     r0,#0                 ;165
000082  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L1.132|
                          DCD      ||.data||

                          AREA ||i.SPI_ISCRCErrorValid||, CODE, READONLY, ALIGN=1

                  SPI_ISCRCErrorValid PROC
;;;186    */
;;;187    uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
000000  2001              MOVS     r0,#1
;;;188    {
;;;189    #if defined (STM32F101xE) || defined (STM32F103xE)
;;;190      /* Check how to handle this CRC error (workaround to be applied or not) */
;;;191      /* If CRC errors could be wrongly detected (issue 2.15.2 in STM32F10xxC/D/E silicon limitations ES (DocID14732 Rev 13) */
;;;192      if ( (uCRCErrorWorkaroundCheck != 0) && (hspi->Instance == SPI2) )
;;;193      {
;;;194        if (hspi->Instance->RXCRCR == 0)
;;;195        {
;;;196          return (SPI_INVALID_CRC_ERROR);
;;;197        }
;;;198      }
;;;199      return (SPI_VALID_CRC_ERROR);
;;;200    #else
;;;201      return (SPI_VALID_CRC_ERROR);
;;;202    #endif
;;;203    }
000002  4770              BX       lr
;;;204    /**
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  uCRCErrorWorkaroundCheck
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_spi_ex_c_551bcd0b____REV16|
#line 463 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_spi_ex_c_551bcd0b____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_spi_ex_c_551bcd0b____REVSH|
#line 478
|__asm___22_stm32f1xx_hal_spi_ex_c_551bcd0b____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_spi_ex_c_551bcd0b____RRX|
#line 665
|__asm___22_stm32f1xx_hal_spi_ex_c_551bcd0b____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
