; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-160318\stm32f1xx_hal_flash_ex.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-160318\stm32f1xx_hal_flash_ex.d --feedback=.\DE-160318\DE-160318.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I.\RTE\_DE-160318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-160318\stm32f1xx_hal_flash_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;611      */
;;;612    static void FLASH_MassErase(uint32_t Banks)
000000  4906              LDR      r1,|L1.28|
;;;613    {
;;;614      /* Check the parameters */
;;;615      assert_param(IS_FLASH_BANK(Banks));
;;;616    
;;;617      /* Clean the error context */
;;;618      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2000              MOVS     r0,#0
000004  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;619    
;;;620    #if defined(FLASH_BANK2_END)
;;;621      if(Banks == FLASH_BANK_BOTH)
;;;622      {
;;;623        /* bank1 & bank2 will be erased*/
;;;624        SET_BIT(FLASH->CR, FLASH_CR_MER);
;;;625        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;626        SET_BIT(FLASH->CR, FLASH_CR_STRT);
;;;627        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;628      }
;;;629      else if(Banks == FLASH_BANK_2)
;;;630      {
;;;631        /*Only bank2 will be erased*/
;;;632        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;633        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;634      }
;;;635      else
;;;636      {
;;;637    #endif /* FLASH_BANK2_END */
;;;638        /* Only bank1 will be erased*/
;;;639        SET_BIT(FLASH->CR, FLASH_CR_MER);
000006  4806              LDR      r0,|L1.32|
000008  6901              LDR      r1,[r0,#0x10]
00000a  f0410104          ORR      r1,r1,#4
00000e  6101              STR      r1,[r0,#0x10]
;;;640        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000010  6901              LDR      r1,[r0,#0x10]
000012  f0410140          ORR      r1,r1,#0x40
000016  6101              STR      r1,[r0,#0x10]
;;;641    #if defined(FLASH_BANK2_END)
;;;642      }
;;;643    #endif /* FLASH_BANK2_END */
;;;644    }
000018  4770              BX       lr
;;;645    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      pFlash
                  |L1.32|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_DisableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_DisableWRP PROC
;;;779      */
;;;780    static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;781    {
000004  f8df809c          LDR      r8,|L2.164|
000008  f8d81020          LDR      r1,[r8,#0x20]
;;;782      HAL_StatusTypeDef status = HAL_OK;
;;;783      uint16_t WRP0_Data = 0xFFFF;
;;;784    #if defined(FLASH_WRP1_WRP1)
;;;785      uint16_t WRP1_Data = 0xFFFF;
;;;786    #endif /* FLASH_WRP1_WRP1 */
;;;787    #if defined(FLASH_WRP2_WRP2)
;;;788      uint16_t WRP2_Data = 0xFFFF;
;;;789    #endif /* FLASH_WRP2_WRP2 */
;;;790    #if defined(FLASH_WRP3_WRP3)
;;;791      uint16_t WRP3_Data = 0xFFFF;
;;;792    #endif /* FLASH_WRP3_WRP3 */
;;;793      
;;;794      /* Check the parameters */
;;;795      assert_param(IS_OB_WRP(WriteProtectPage));
;;;796    
;;;797      /* Get current write protected pages and the new pages to be unprotected ******/
;;;798      WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
;;;799    
;;;800    #if defined(OB_WRP_PAGES0TO15MASK)
;;;801      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;802    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;803      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
;;;804    #endif /* OB_WRP_PAGES0TO31MASK */
;;;805      
;;;806    #if defined(OB_WRP_PAGES16TO31MASK)
;;;807      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
;;;808    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;809      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
;;;810    #endif /* OB_WRP_PAGES32TO63MASK */
;;;811     
;;;812    #if defined(OB_WRP_PAGES64TO95MASK)
;;;813      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
;;;814    #endif /* OB_WRP_PAGES64TO95MASK */
;;;815    #if defined(OB_WRP_PAGES32TO47MASK)
;;;816      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
;;;817    #endif /* OB_WRP_PAGES32TO47MASK */
;;;818    
;;;819    #if defined(OB_WRP_PAGES96TO127MASK)
;;;820      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
;;;821    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;822      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24); 
;;;823    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;824      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24); 
;;;825    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;826      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
;;;827    #endif /* OB_WRP_PAGES96TO127MASK */
;;;828    
;;;829        
;;;830      /* Wait for last operation to be completed */
;;;831      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  f24c3950          MOV      r9,#0xc350
000010  4301              ORRS     r1,r1,r0              ;798
000012  b2cf              UXTB     r7,r1                 ;803
000014  f3c12607          UBFX     r6,r1,#8,#8           ;809
000018  f3c14507          UBFX     r5,r1,#16,#8          ;813
00001c  0e0c              LSRS     r4,r1,#24             ;820
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       FLASH_WaitForLastOperation
;;;832    
;;;833      if(status == HAL_OK)
000024  2800              CMP      r0,#0
000026  d13b              BNE      |L2.160|
;;;834      { 
;;;835        /* Clean the error context */
;;;836        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000028  491f              LDR      r1,|L2.168|
00002a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;837    
;;;838        /* To be able to write again option byte, need to perform a option byte erase */
;;;839        status = HAL_FLASHEx_OBErase();
00002c  f7fffffe          BL       HAL_FLASHEx_OBErase
;;;840        if (status == HAL_OK)  
000030  2800              CMP      r0,#0
000032  d135              BNE      |L2.160|
;;;841        {
;;;842          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000034  f8d82010          LDR      r2,[r8,#0x10]
000038  f0420210          ORR      r2,r2,#0x10
00003c  f8c82010          STR      r2,[r8,#0x10]
;;;843    
;;;844    #if defined(FLASH_WRP0_WRP0)
;;;845          if(WRP0_Data != 0xFF)
000040  2fff              CMP      r7,#0xff
000042  d007              BEQ      |L2.84|
;;;846          {
;;;847            OB->WRP0 |= WRP0_Data;
000044  4819              LDR      r0,|L2.172|
000046  8801              LDRH     r1,[r0,#0]
000048  4339              ORRS     r1,r1,r7
00004a  8001              STRH     r1,[r0,#0]
;;;848            
;;;849            /* Wait for last operation to be completed */
;;;850            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       FLASH_WaitForLastOperation
000052  b9f8              CBNZ     r0,|L2.148|
                  |L2.84|
;;;851          }
;;;852    #endif /* FLASH_WRP0_WRP0 */
;;;853    
;;;854    #if defined(FLASH_WRP1_WRP1)
;;;855          if((status == HAL_OK) && (WRP1_Data != 0xFF))
000054  2eff              CMP      r6,#0xff
000056  d008              BEQ      |L2.106|
;;;856          {
;;;857            OB->WRP1 |= WRP1_Data;
000058  4814              LDR      r0,|L2.172|
00005a  1c80              ADDS     r0,r0,#2
00005c  8801              LDRH     r1,[r0,#0]
00005e  4331              ORRS     r1,r1,r6
000060  8001              STRH     r1,[r0,#0]
;;;858            
;;;859            /* Wait for last operation to be completed */
;;;860            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000062  4648              MOV      r0,r9
000064  f7fffffe          BL       FLASH_WaitForLastOperation
000068  b9a0              CBNZ     r0,|L2.148|
                  |L2.106|
;;;861          }
;;;862    #endif /* FLASH_WRP1_WRP1 */
;;;863    
;;;864    #if defined(FLASH_WRP2_WRP2)
;;;865          if((status == HAL_OK) && (WRP2_Data != 0xFF))
00006a  2dff              CMP      r5,#0xff
00006c  d008              BEQ      |L2.128|
;;;866          {
;;;867            OB->WRP2 |= WRP2_Data;
00006e  480f              LDR      r0,|L2.172|
000070  1d00              ADDS     r0,r0,#4
000072  8801              LDRH     r1,[r0,#0]
000074  4329              ORRS     r1,r1,r5
000076  8001              STRH     r1,[r0,#0]
;;;868            
;;;869            /* Wait for last operation to be completed */
;;;870            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000078  4648              MOV      r0,r9
00007a  f7fffffe          BL       FLASH_WaitForLastOperation
00007e  b948              CBNZ     r0,|L2.148|
                  |L2.128|
;;;871          }
;;;872    #endif /* FLASH_WRP2_WRP2 */
;;;873    
;;;874    #if defined(FLASH_WRP3_WRP3)
;;;875          if((status == HAL_OK) && (WRP3_Data != 0xFF))
000080  2cff              CMP      r4,#0xff
000082  d007              BEQ      |L2.148|
;;;876          {
;;;877            OB->WRP3 |= WRP3_Data;
000084  4809              LDR      r0,|L2.172|
000086  1d80              ADDS     r0,r0,#6
000088  8801              LDRH     r1,[r0,#0]
00008a  4321              ORRS     r1,r1,r4
00008c  8001              STRH     r1,[r0,#0]
;;;878            
;;;879            /* Wait for last operation to be completed */
;;;880            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L2.148|
;;;881          }
;;;882    #endif /* FLASH_WRP3_WRP3 */
;;;883    
;;;884          /* if the program operation is completed, disable the OPTPG Bit */
;;;885          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000094  f8d82010          LDR      r2,[r8,#0x10]
000098  f0220210          BIC      r2,r2,#0x10
00009c  f8c82010          STR      r2,[r8,#0x10]
                  |L2.160|
;;;886        }
;;;887      }
;;;888      return status;
;;;889    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
;;;890    
                          ENDP

                  |L2.164|
                          DCD      0x40022000
                  |L2.168|
                          DCD      pFlash
                  |L2.172|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;656      */
;;;657    static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;658    {
000004  f8df809c          LDR      r8,|L3.164|
000008  f8d81020          LDR      r1,[r8,#0x20]
;;;659      HAL_StatusTypeDef status = HAL_OK;
;;;660      uint16_t WRP0_Data = 0xFFFF;
;;;661    #if defined(FLASH_WRP1_WRP1)
;;;662      uint16_t WRP1_Data = 0xFFFF;
;;;663    #endif /* FLASH_WRP1_WRP1 */
;;;664    #if defined(FLASH_WRP2_WRP2)
;;;665      uint16_t WRP2_Data = 0xFFFF;
;;;666    #endif /* FLASH_WRP2_WRP2 */
;;;667    #if defined(FLASH_WRP3_WRP3)
;;;668      uint16_t WRP3_Data = 0xFFFF;
;;;669    #endif /* FLASH_WRP3_WRP3 */
;;;670      
;;;671      /* Check the parameters */
;;;672      assert_param(IS_OB_WRP(WriteProtectPage));
;;;673        
;;;674      /* Get current write protected pages and the new pages to be protected ******/
;;;675      WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
;;;676      
;;;677    #if defined(OB_WRP_PAGES0TO15MASK)
;;;678      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;679    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;680      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
;;;681    #endif /* OB_WRP_PAGES0TO31MASK */
;;;682      
;;;683    #if defined(OB_WRP_PAGES16TO31MASK)
;;;684      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
;;;685    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;686      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
;;;687    #endif /* OB_WRP_PAGES32TO63MASK */
;;;688     
;;;689    #if defined(OB_WRP_PAGES64TO95MASK)
;;;690      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
;;;691    #endif /* OB_WRP_PAGES64TO95MASK */
;;;692    #if defined(OB_WRP_PAGES32TO47MASK)
;;;693      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
;;;694    #endif /* OB_WRP_PAGES32TO47MASK */
;;;695    
;;;696    #if defined(OB_WRP_PAGES96TO127MASK)
;;;697      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
;;;698    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;699      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24); 
;;;700    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;701      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24); 
;;;702    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;703      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
;;;704    #endif /* OB_WRP_PAGES96TO127MASK */
;;;705      
;;;706      /* Wait for last operation to be completed */
;;;707      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  f24c3950          MOV      r9,#0xc350
000010  4381              BICS     r1,r1,r0              ;675
000012  b2cf              UXTB     r7,r1                 ;680
000014  f3c12607          UBFX     r6,r1,#8,#8           ;686
000018  f3c14507          UBFX     r5,r1,#16,#8          ;690
00001c  0e0c              LSRS     r4,r1,#24             ;697
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       FLASH_WaitForLastOperation
;;;708    
;;;709      if(status == HAL_OK)
000024  2800              CMP      r0,#0
000026  d13b              BNE      |L3.160|
;;;710      { 
;;;711        /* Clean the error context */
;;;712        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000028  491f              LDR      r1,|L3.168|
00002a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;713    
;;;714        /* To be able to write again option byte, need to perform a option byte erase */
;;;715        status = HAL_FLASHEx_OBErase();
00002c  f7fffffe          BL       HAL_FLASHEx_OBErase
;;;716        if (status == HAL_OK)  
000030  2800              CMP      r0,#0
000032  d135              BNE      |L3.160|
;;;717        {
;;;718          /* Enable write protection */
;;;719          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000034  f8d82010          LDR      r2,[r8,#0x10]
000038  f0420210          ORR      r2,r2,#0x10
00003c  f8c82010          STR      r2,[r8,#0x10]
;;;720    
;;;721    #if defined(FLASH_WRP0_WRP0)
;;;722          if(WRP0_Data != 0xFF)
000040  2fff              CMP      r7,#0xff
000042  d007              BEQ      |L3.84|
;;;723          {
;;;724            OB->WRP0 &= WRP0_Data;
000044  4819              LDR      r0,|L3.172|
000046  8801              LDRH     r1,[r0,#0]
000048  4039              ANDS     r1,r1,r7
00004a  8001              STRH     r1,[r0,#0]
;;;725            
;;;726            /* Wait for last operation to be completed */
;;;727            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       FLASH_WaitForLastOperation
000052  b9f8              CBNZ     r0,|L3.148|
                  |L3.84|
;;;728          }
;;;729    #endif /* FLASH_WRP0_WRP0 */
;;;730    
;;;731    #if defined(FLASH_WRP1_WRP1)
;;;732          if((status == HAL_OK) && (WRP1_Data != 0xFF))
000054  2eff              CMP      r6,#0xff
000056  d008              BEQ      |L3.106|
;;;733          {
;;;734            OB->WRP1 &= WRP1_Data;
000058  4814              LDR      r0,|L3.172|
00005a  1c80              ADDS     r0,r0,#2
00005c  8801              LDRH     r1,[r0,#0]
00005e  4031              ANDS     r1,r1,r6
000060  8001              STRH     r1,[r0,#0]
;;;735            
;;;736            /* Wait for last operation to be completed */
;;;737            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000062  4648              MOV      r0,r9
000064  f7fffffe          BL       FLASH_WaitForLastOperation
000068  b9a0              CBNZ     r0,|L3.148|
                  |L3.106|
;;;738          }
;;;739    #endif /* FLASH_WRP1_WRP1 */
;;;740    
;;;741    #if defined(FLASH_WRP2_WRP2)
;;;742          if((status == HAL_OK) && (WRP2_Data != 0xFF))
00006a  2dff              CMP      r5,#0xff
00006c  d008              BEQ      |L3.128|
;;;743          {
;;;744            OB->WRP2 &= WRP2_Data;
00006e  480f              LDR      r0,|L3.172|
000070  1d00              ADDS     r0,r0,#4
000072  8801              LDRH     r1,[r0,#0]
000074  4029              ANDS     r1,r1,r5
000076  8001              STRH     r1,[r0,#0]
;;;745            
;;;746            /* Wait for last operation to be completed */
;;;747            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000078  4648              MOV      r0,r9
00007a  f7fffffe          BL       FLASH_WaitForLastOperation
00007e  b948              CBNZ     r0,|L3.148|
                  |L3.128|
;;;748          }
;;;749    #endif /* FLASH_WRP2_WRP2 */
;;;750    
;;;751    #if defined(FLASH_WRP3_WRP3)
;;;752          if((status == HAL_OK) && (WRP3_Data != 0xFF))
000080  2cff              CMP      r4,#0xff
000082  d007              BEQ      |L3.148|
;;;753          {
;;;754            OB->WRP3 &= WRP3_Data;
000084  4809              LDR      r0,|L3.172|
000086  1d80              ADDS     r0,r0,#6
000088  8801              LDRH     r1,[r0,#0]
00008a  4021              ANDS     r1,r1,r4
00008c  8001              STRH     r1,[r0,#0]
;;;755            
;;;756            /* Wait for last operation to be completed */
;;;757            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L3.148|
;;;758          }
;;;759    #endif /* FLASH_WRP3_WRP3 */
;;;760    
;;;761          /* if the program operation is completed, disable the OPTPG Bit */
;;;762          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000094  f8d82010          LDR      r2,[r8,#0x10]
000098  f0220210          BIC      r2,r2,#0x10
00009c  f8c82010          STR      r2,[r8,#0x10]
                  |L3.160|
;;;763        }
;;;764      }
;;;765      
;;;766      return status;
;;;767    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
;;;768    
                          ENDP

                  |L3.164|
                          DCD      0x40022000
                  |L3.168|
                          DCD      pFlash
                  |L3.172|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1046     */
;;;1047   static uint32_t FLASH_OB_GetRDP(void)
000000  4904              LDR      r1,|L4.20|
;;;1048   {
;;;1049     uint32_t readstatus = OB_RDP_LEVEL_0;
000002  20a5              MOVS     r0,#0xa5
;;;1050     uint32_t tmp_reg = 0;
;;;1051     
;;;1052     /* Read RDP level bits */
;;;1053     tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
000004  69c9              LDR      r1,[r1,#0x1c]
000006  f0010102          AND      r1,r1,#2
;;;1054   
;;;1055     if (tmp_reg == FLASH_OBR_RDPRT)
00000a  2902              CMP      r1,#2
00000c  d100              BNE      |L4.16|
;;;1056     {
;;;1057       readstatus = OB_RDP_LEVEL_1;
00000e  2000              MOVS     r0,#0
                  |L4.16|
;;;1058     }
;;;1059     else 
;;;1060     {
;;;1061       readstatus = OB_RDP_LEVEL_0;
;;;1062     }
;;;1063   
;;;1064     return readstatus;
;;;1065   }
000010  4770              BX       lr
;;;1066   
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDP_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDP_LevelConfig PROC
;;;898      */
;;;899    static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;900    {
000002  4606              MOV      r6,r0
;;;901      HAL_StatusTypeDef status = HAL_OK;
;;;902      
;;;903      /* Check the parameters */
;;;904      assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
;;;905      
;;;906      /* Wait for last operation to be completed */
;;;907      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000004  f24c3550          MOV      r5,#0xc350
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;908      
;;;909      if(status == HAL_OK)
00000e  2800              CMP      r0,#0
000010  d120              BNE      |L5.84|
;;;910      { 
;;;911        /* Clean the error context */
;;;912        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  4911              LDR      r1,|L5.88|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;913        
;;;914        /* If the previous operation is completed, proceed to erase the option bytes */
;;;915        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
000016  4c11              LDR      r4,|L5.92|
000018  6920              LDR      r0,[r4,#0x10]
00001a  f0400020          ORR      r0,r0,#0x20
00001e  6120              STR      r0,[r4,#0x10]
;;;916        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000020  6920              LDR      r0,[r4,#0x10]
000022  f0400040          ORR      r0,r0,#0x40
000026  6120              STR      r0,[r4,#0x10]
;;;917    
;;;918        /* Wait for last operation to be completed */
;;;919        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;920    
;;;921        /* If the erase operation is completed, disable the OPTER Bit */
;;;922        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210120          BIC      r1,r1,#0x20
000034  6121              STR      r1,[r4,#0x10]
;;;923    
;;;924        if(status == HAL_OK)
000036  2800              CMP      r0,#0
000038  d10c              BNE      |L5.84|
;;;925        {
;;;926          /* Enable the Option Bytes Programming operation */
;;;927          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
00003a  6920              LDR      r0,[r4,#0x10]
00003c  f0400010          ORR      r0,r0,#0x10
000040  6120              STR      r0,[r4,#0x10]
;;;928          
;;;929          WRITE_REG(OB->RDP, ReadProtectLevel);
000042  4807              LDR      r0,|L5.96|
000044  8006              STRH     r6,[r0,#0]
;;;930          
;;;931          /* Wait for last operation to be completed */
;;;932          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       FLASH_WaitForLastOperation
;;;933          
;;;934          /* if the program operation is completed, disable the OPTPG Bit */
;;;935          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00004c  6921              LDR      r1,[r4,#0x10]
00004e  f0210110          BIC      r1,r1,#0x10
000052  6121              STR      r1,[r4,#0x10]
                  |L5.84|
;;;936        }
;;;937      }
;;;938      
;;;939      return status;
;;;940    }
000054  bd70              POP      {r4-r6,pc}
;;;941    
                          ENDP

000056  0000              DCW      0x0000
                  |L5.88|
                          DCD      pFlash
                  |L5.92|
                          DCD      0x40022000
                  |L5.96|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_PageErase||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;1101     */
;;;1102   void FLASH_PageErase(uint32_t PageAddress)
000000  4a06              LDR      r2,|L6.28|
;;;1103   {
;;;1104     /* Clean the error context */
;;;1105     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2100              MOVS     r1,#0
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;1106   
;;;1107   #if defined(FLASH_BANK2_END)
;;;1108     if(PageAddress > FLASH_BANK1_END)
;;;1109     { 
;;;1110       /* Proceed to erase the page */
;;;1111       SET_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;1112       WRITE_REG(FLASH->AR2, PageAddress);
;;;1113       SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;1114     }
;;;1115     else
;;;1116     {
;;;1117   #endif /* FLASH_BANK2_END */
;;;1118       /* Proceed to erase the page */
;;;1119       SET_BIT(FLASH->CR, FLASH_CR_PER);
000006  4906              LDR      r1,|L6.32|
000008  690a              LDR      r2,[r1,#0x10]
00000a  f0420202          ORR      r2,r2,#2
00000e  610a              STR      r2,[r1,#0x10]
;;;1120       WRITE_REG(FLASH->AR, PageAddress);
000010  6148              STR      r0,[r1,#0x14]
;;;1121       SET_BIT(FLASH->CR, FLASH_CR_STRT);
000012  6908              LDR      r0,[r1,#0x10]
000014  f0400040          ORR      r0,r0,#0x40
000018  6108              STR      r0,[r1,#0x10]
;;;1122   #if defined(FLASH_BANK2_END)
;;;1123     }
;;;1124   #endif /* FLASH_BANK2_END */
;;;1125   }
00001a  4770              BX       lr
;;;1126   
                          ENDP

                  |L6.28|
                          DCD      pFlash
                  |L6.32|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;175      */
;;;176    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;177    {
000004  4605              MOV      r5,r0
;;;178      HAL_StatusTypeDef status = HAL_ERROR;
;;;179      uint32_t address = 0;
;;;180    
;;;181      /* Process Locked */
;;;182      __HAL_LOCK(&pFlash);
000006  4826              LDR      r0,|L7.160|
000008  460f              MOV      r7,r1                 ;177
00000a  2601              MOVS     r6,#1                 ;178
00000c  7e01              LDRB     r1,[r0,#0x18]  ; pFlash
00000e  2901              CMP      r1,#1
000010  d00f              BEQ      |L7.50|
000012  2101              MOVS     r1,#1
000014  4681              MOV      r9,r0
000016  7601              STRB     r1,[r0,#0x18]
;;;183    
;;;184      /* Check the parameters */
;;;185      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;186    
;;;187      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
000018  6828              LDR      r0,[r5,#0]
;;;188      {
;;;189    #if defined(FLASH_BANK2_END)
;;;190        if (pEraseInit->Banks == FLASH_BANK_BOTH)
;;;191        {
;;;192          /* Mass Erase requested for Bank1 and Bank2 */
;;;193          /* Wait for last operation to be completed */
;;;194          if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;195              (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;196          {
;;;197            /*Mass erase to be done*/
;;;198            FLASH_MassErase(FLASH_BANK_BOTH);
;;;199            
;;;200            /* Wait for last operation to be completed */
;;;201            if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;202                (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;203            {
;;;204              status = HAL_OK;
;;;205            }
;;;206            
;;;207            /* If the erase operation is completed, disable the MER Bit */
;;;208            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;209            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;210          }
;;;211        }
;;;212        else if (pEraseInit->Banks == FLASH_BANK_2)
;;;213        {
;;;214          /* Mass Erase requested for Bank2 */
;;;215          /* Wait for last operation to be completed */
;;;216          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;217          {
;;;218            /*Mass erase to be done*/
;;;219            FLASH_MassErase(FLASH_BANK_2);
;;;220            
;;;221            /* Wait for last operation to be completed */
;;;222            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;223            
;;;224            /* If the erase operation is completed, disable the MER Bit */
;;;225            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;226          }
;;;227        }
;;;228        else 
;;;229    #endif /* FLASH_BANK2_END */
;;;230        {
;;;231          /* Mass Erase requested for Bank1 */
;;;232          /* Wait for last operation to be completed */
;;;233          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;234          {
;;;235            /*Mass erase to be done*/
;;;236            FLASH_MassErase(FLASH_BANK_1);
;;;237            
;;;238            /* Wait for last operation to be completed */
;;;239            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;240            
;;;241            /* If the erase operation is completed, disable the MER Bit */
;;;242            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
00001a  f8df8088          LDR      r8,|L7.164|
00001e  f24c3450          MOV      r4,#0xc350            ;233
000022  2802              CMP      r0,#2                 ;187
000024  d008              BEQ      |L7.56|
;;;243          }
;;;244        }
;;;245      }
;;;246      else
;;;247      {
;;;248        /* Page Erase is requested */
;;;249        /* Check the parameters */
;;;250        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;251        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;252        
;;;253    #if defined(FLASH_BANK2_END)
;;;254        /* Page Erase requested on address located on bank2 */
;;;255        if(pEraseInit->PageAddress > FLASH_BANK1_END)
;;;256        {   
;;;257          /* Wait for last operation to be completed */
;;;258          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;259          {
;;;260            /*Initialization of PageError variable*/
;;;261            *PageError = 0xFFFFFFFF;
;;;262            
;;;263            /* Erase by page by page to be done*/
;;;264            for(address = pEraseInit->PageAddress;
;;;265                address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
;;;266                address += FLASH_PAGE_SIZE)
;;;267            {
;;;268              FLASH_PageErase(address);
;;;269              
;;;270              /* Wait for last operation to be completed */
;;;271              status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;272              
;;;273              /* If the erase operation is completed, disable the PER Bit */
;;;274              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;275              
;;;276              if (status != HAL_OK)
;;;277              {
;;;278                /* In case of error, stop erase procedure and return the faulty address */
;;;279                *PageError = address;
;;;280                break;
;;;281              }
;;;282            }
;;;283          }
;;;284        }
;;;285        else
;;;286    #endif /* FLASH_BANK2_END */
;;;287       {
;;;288          /* Page Erase requested on address located on bank1 */
;;;289          /* Wait for last operation to be completed */
;;;290          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
000026  46a2              MOV      r10,r4
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
00002e  b1a8              CBZ      r0,|L7.92|
000030  e031              B        |L7.150|
                  |L7.50|
000032  2002              MOVS     r0,#2                 ;182
                  |L7.52|
;;;291          {
;;;292            /*Initialization of PageError variable*/
;;;293            *PageError = 0xFFFFFFFF;
;;;294            
;;;295            /* Erase page by page to be done*/
;;;296            for(address = pEraseInit->PageAddress;
;;;297                address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
;;;298                address += FLASH_PAGE_SIZE)
;;;299            {
;;;300              FLASH_PageErase(address);
;;;301              
;;;302              /* Wait for last operation to be completed */
;;;303              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;304              
;;;305              /* If the erase operation is completed, disable the PER Bit */
;;;306              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;307              
;;;308              if (status != HAL_OK)
;;;309              {
;;;310                /* In case of error, stop erase procedure and return the faulty address */
;;;311                *PageError = address;
;;;312                break;
;;;313              }
;;;314            }
;;;315          }
;;;316        }
;;;317      }
;;;318    
;;;319      /* Process Unlocked */
;;;320      __HAL_UNLOCK(&pFlash);
;;;321    
;;;322      return status;
;;;323    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L7.56|
000038  4620              MOV      r0,r4                 ;233
00003a  f7fffffe          BL       FLASH_WaitForLastOperation
00003e  bb08              CBNZ     r0,|L7.132|
000040  2001              MOVS     r0,#1                 ;236
000042  f7fffffe          BL       FLASH_MassErase
000046  4620              MOV      r0,r4                 ;239
000048  f7fffffe          BL       FLASH_WaitForLastOperation
00004c  f8d81010          LDR      r1,[r8,#0x10]         ;242
000050  4606              MOV      r6,r0                 ;239
000052  f0210104          BIC      r1,r1,#4              ;242
000056  f8c81010          STR      r1,[r8,#0x10]         ;242
00005a  e01c              B        |L7.150|
                  |L7.92|
00005c  f04f30ff          MOV      r0,#0xffffffff        ;293
000060  6038              STR      r0,[r7,#0]            ;296
000062  68ac              LDR      r4,[r5,#8]            ;296
000064  e011              B        |L7.138|
                  |L7.102|
000066  4620              MOV      r0,r4                 ;300
000068  f7fffffe          BL       FLASH_PageErase
00006c  4650              MOV      r0,r10                ;303
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  f8d81010          LDR      r1,[r8,#0x10]         ;306
000076  0006              MOVS     r6,r0                 ;303
000078  f0210102          BIC      r1,r1,#2              ;306
00007c  f8c81010          STR      r1,[r8,#0x10]         ;306
000080  d001              BEQ      |L7.134|
000082  603c              STR      r4,[r7,#0]            ;312
                  |L7.132|
000084  e007              B        |L7.150|
                  |L7.134|
000086  f5046480          ADD      r4,r4,#0x400          ;312
                  |L7.138|
00008a  e9d50102          LDRD     r0,r1,[r5,#8]         ;312
00008e  eb002081          ADD      r0,r0,r1,LSL #10      ;297
000092  42a0              CMP      r0,r4                 ;297
000094  d8e7              BHI      |L7.102|
                  |L7.150|
000096  2100              MOVS     r1,#0                 ;320
000098  f8891018          STRB     r1,[r9,#0x18]         ;320
00009c  4630              MOV      r0,r6                 ;322
00009e  e7c9              B        |L7.52|
;;;324    
                          ENDP

                  |L7.160|
                          DCD      pFlash
                  |L7.164|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;335      */
;;;336    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;337    {
;;;338      HAL_StatusTypeDef status = HAL_OK;
;;;339    
;;;340      /* Process Locked */
;;;341      __HAL_LOCK(&pFlash);
000002  4912              LDR      r1,|L8.76|
000004  2400              MOVS     r4,#0                 ;338
000006  7e0a              LDRB     r2,[r1,#0x18]  ; pFlash
000008  2a01              CMP      r2,#1
00000a  d005              BEQ      |L8.24|
00000c  2201              MOVS     r2,#1
00000e  760a              STRB     r2,[r1,#0x18]
;;;342    
;;;343      /* If procedure already ongoing, reject the next one */
;;;344      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000010  780b              LDRB     r3,[r1,#0]  ; pFlash
000012  b11b              CBZ      r3,|L8.28|
;;;345      {
;;;346        return HAL_ERROR;
000014  2001              MOVS     r0,#1
;;;347      }
;;;348      
;;;349      /* Check the parameters */
;;;350      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;351    
;;;352      /* Enable End of FLASH Operation and Error source interrupts */
;;;353      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;354    
;;;355    #if defined(FLASH_BANK2_END)
;;;356      /* Enable End of FLASH Operation and Error source interrupts */
;;;357      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;358      
;;;359    #endif
;;;360      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;361      {
;;;362        /*Mass erase to be done*/
;;;363        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;364            FLASH_MassErase(pEraseInit->Banks);
;;;365      }
;;;366      else
;;;367      {
;;;368        /* Erase by page to be done*/
;;;369    
;;;370        /* Check the parameters */
;;;371        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;372        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;373    
;;;374        pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
;;;375        pFlash.DataRemaining = pEraseInit->NbPages;
;;;376        pFlash.Address = pEraseInit->PageAddress;
;;;377    
;;;378        /*Erase 1st page and wait for IT*/
;;;379        FLASH_PageErase(pEraseInit->PageAddress);
;;;380      }
;;;381    
;;;382      return status;
;;;383    }
000016  bd70              POP      {r4-r6,pc}
                  |L8.24|
000018  2002              MOVS     r0,#2                 ;341
00001a  bd70              POP      {r4-r6,pc}
                  |L8.28|
00001c  4b0c              LDR      r3,|L8.80|
00001e  691d              LDR      r5,[r3,#0x10]         ;353
000020  f44555a0          ORR      r5,r5,#0x1400         ;353
000024  611d              STR      r5,[r3,#0x10]         ;353
000026  6803              LDR      r3,[r0,#0]            ;360
000028  2b02              CMP      r3,#2                 ;360
00002a  d009              BEQ      |L8.64|
00002c  700a              STRB     r2,[r1,#0]            ;374
00002e  68c2              LDR      r2,[r0,#0xc]          ;375
000030  604a              STR      r2,[r1,#4]            ;375  ; pFlash
000032  6882              LDR      r2,[r0,#8]            ;376
000034  608a              STR      r2,[r1,#8]            ;376  ; pFlash
000036  6880              LDR      r0,[r0,#8]            ;379
000038  f7fffffe          BL       FLASH_PageErase
                  |L8.60|
00003c  4620              MOV      r0,r4                 ;382
00003e  bd70              POP      {r4-r6,pc}
                  |L8.64|
000040  2202              MOVS     r2,#2                 ;363
000042  700a              STRB     r2,[r1,#0]            ;363
000044  6840              LDR      r0,[r0,#4]            ;364
000046  f7fffffe          BL       FLASH_MassErase
00004a  e7f7              B        |L8.60|
;;;384    
                          ENDP

                  |L8.76|
                          DCD      pFlash
                  |L8.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBErase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBErase PROC
;;;413    
;;;414    HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;415    {
;;;416      uint8_t rdptmp = OB_RDP_LEVEL_0;
;;;417      HAL_StatusTypeDef status = HAL_ERROR;
;;;418    
;;;419      /* Get the actual read protection Option Byte value */
;;;420      rdptmp = FLASH_OB_GetRDP();
000002  f7fffffe          BL       FLASH_OB_GetRDP
000006  b2c5              UXTB     r5,r0
;;;421    
;;;422      /* Wait for last operation to be completed */
;;;423      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  f24c3650          MOV      r6,#0xc350
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;424    
;;;425      if(status == HAL_OK)
000012  2800              CMP      r0,#0
000014  d118              BNE      |L9.72|
;;;426      {
;;;427        /* Clean the error context */
;;;428        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000016  490d              LDR      r1,|L9.76|
000018  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;429    
;;;430        /* If the previous operation is completed, proceed to erase the option bytes */
;;;431        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00001a  4c0d              LDR      r4,|L9.80|
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400020          ORR      r0,r0,#0x20
000022  6120              STR      r0,[r4,#0x10]
;;;432        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000024  6920              LDR      r0,[r4,#0x10]
000026  f0400040          ORR      r0,r0,#0x40
00002a  6120              STR      r0,[r4,#0x10]
;;;433    
;;;434        /* Wait for last operation to be completed */
;;;435        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;436    
;;;437        /* If the erase operation is completed, disable the OPTER Bit */
;;;438        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
000032  6921              LDR      r1,[r4,#0x10]
000034  f0210120          BIC      r1,r1,#0x20
000038  6121              STR      r1,[r4,#0x10]
;;;439    
;;;440        if(status == HAL_OK)
00003a  2800              CMP      r0,#0
00003c  d104              BNE      |L9.72|
;;;441        {
;;;442          /* Restore the last read protection Option Byte value */
;;;443          status = FLASH_OB_RDP_LevelConfig(rdptmp);
00003e  4628              MOV      r0,r5
000040  e8bd4070          POP      {r4-r6,lr}
000044  f7ffbffe          B.W      FLASH_OB_RDP_LevelConfig
                  |L9.72|
;;;444        }
;;;445      }
;;;446    
;;;447      /* Return the erase status */
;;;448      return status;
;;;449    }
000048  bd70              POP      {r4-r6,pc}
;;;450    
                          ENDP

00004a  0000              DCW      0x0000
                  |L9.76|
                          DCD      pFlash
                  |L9.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetConfig PROC
;;;543      */
;;;544    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b570              PUSH     {r4-r6,lr}
;;;545    {
000002  4604              MOV      r4,r0
000004  4d09              LDR      r5,|L10.44|
;;;546      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
000006  2007              MOVS     r0,#7
000008  6020              STR      r0,[r4,#0]
00000a  6a28              LDR      r0,[r5,#0x20]
;;;547    
;;;548      /*Get WRP*/
;;;549      pOBInit->WRPPage = FLASH_OB_GetWRP();
;;;550    
;;;551      /*Get RDP Level*/
;;;552      pOBInit->RDPLevel = FLASH_OB_GetRDP();
00000c  60a0              STR      r0,[r4,#8]
00000e  f7fffffe          BL       FLASH_OB_GetRDP
000012  7420              STRB     r0,[r4,#0x10]
000014  69e8              LDR      r0,[r5,#0x1c]
000016  2104              MOVS     r1,#4
000018  fa91f1a1          RBIT     r1,r1
00001c  f000001c          AND      r0,r0,#0x1c
000020  fab1f181          CLZ      r1,r1
000024  40c8              LSRS     r0,r0,r1
;;;553    
;;;554      /*Get USER*/
;;;555      pOBInit->USERConfig = FLASH_OB_GetUser();
000026  7460              STRB     r0,[r4,#0x11]
;;;556    }
000028  bd70              POP      {r4-r6,pc}
;;;557    
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetUserData||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetUserData PROC
;;;565      */
;;;566    uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
000000  4a09              LDR      r2,|L11.40|
;;;567    {
;;;568      uint32_t value = 0;
;;;569      
;;;570      if (DATAAdress == OB_DATA_ADDRESS_DATA0)
;;;571      {
;;;572        /* Get value programmed in OB USER Data0 */
;;;573        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
000002  490a              LDR      r1,|L11.44|
000004  4290              CMP      r0,r2                 ;570
;;;574      }
;;;575      else
;;;576      {
;;;577        /* Get value programmed in OB USER Data1 */
;;;578        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
000006  69c8              LDR      r0,[r1,#0x1c]
000008  d104              BNE      |L11.20|
00000a  f400307f          AND      r0,r0,#0x3fc00        ;573
00000e  f44f317f          MOV      r1,#0x3fc00           ;573
000012  e003              B        |L11.28|
                  |L11.20|
000014  f000707f          AND      r0,r0,#0x3fc0000
000018  f04f717f          MOV      r1,#0x3fc0000
                  |L11.28|
00001c  fa91f1a1          RBIT     r1,r1                 ;573
000020  fab1f181          CLZ      r1,r1                 ;573
000024  40c8              LSRS     r0,r0,r1              ;573
;;;579      }
;;;580      
;;;581      return value;
;;;582    }
000026  4770              BX       lr
;;;583    
                          ENDP

                  |L11.40|
                          DCD      0x1ffff804
                  |L11.44|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;462      */
;;;463    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;464    {
;;;465      HAL_StatusTypeDef status = HAL_ERROR;
;;;466    
;;;467      /* Process Locked */
;;;468      __HAL_LOCK(&pFlash);
000004  4d2d              LDR      r5,|L12.188|
000006  4604              MOV      r4,r0                 ;464
000008  2001              MOVS     r0,#1                 ;465
00000a  7e29              LDRB     r1,[r5,#0x18]  ; pFlash
00000c  2901              CMP      r1,#1
00000e  d00e              BEQ      |L12.46|
000010  2101              MOVS     r1,#1
000012  7629              STRB     r1,[r5,#0x18]
;;;469    
;;;470      /* Check the parameters */
;;;471      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;472    
;;;473      /* Write protection configuration */
;;;474      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
000014  7821              LDRB     r1,[r4,#0]
000016  f04f0700          MOV      r7,#0
00001a  07c9              LSLS     r1,r1,#31
00001c  d00d              BEQ      |L12.58|
;;;475      {
;;;476        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;477        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
00001e  6860              LDR      r0,[r4,#4]
000020  2801              CMP      r0,#1
000022  68a0              LDR      r0,[r4,#8]
000024  d006              BEQ      |L12.52|
;;;478        {
;;;479          /* Enable of Write protection on the selected page */
;;;480          status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
;;;481        }
;;;482        else
;;;483        {
;;;484          /* Disable of Write protection on the selected page */
;;;485          status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
000026  f7fffffe          BL       FLASH_OB_DisableWRP
                  |L12.42|
;;;486        }
;;;487        if (status != HAL_OK)
00002a  bbe8              CBNZ     r0,|L12.168|
00002c  e005              B        |L12.58|
                  |L12.46|
00002e  2002              MOVS     r0,#2                 ;468
                  |L12.48|
;;;488        {
;;;489          /* Process Unlocked */
;;;490          __HAL_UNLOCK(&pFlash);
;;;491          return status;
;;;492        }
;;;493      }
;;;494    
;;;495      /* Read protection configuration */
;;;496      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;497      {
;;;498        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;499        if (status != HAL_OK)
;;;500        {
;;;501          /* Process Unlocked */
;;;502          __HAL_UNLOCK(&pFlash);
;;;503          return status;
;;;504        }
;;;505      }
;;;506    
;;;507      /* USER configuration */
;;;508      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;509      {
;;;510        status = FLASH_OB_UserConfig(pOBInit->USERConfig);
;;;511        if (status != HAL_OK)
;;;512        {
;;;513          /* Process Unlocked */
;;;514          __HAL_UNLOCK(&pFlash);
;;;515          return status;
;;;516        }
;;;517      }
;;;518    
;;;519      /* DATA configuration*/
;;;520      if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
;;;521      {
;;;522        status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
;;;523        if (status != HAL_OK)
;;;524        {
;;;525          /* Process Unlocked */
;;;526          __HAL_UNLOCK(&pFlash);
;;;527          return status;
;;;528        }
;;;529      }
;;;530    
;;;531      /* Process Unlocked */
;;;532      __HAL_UNLOCK(&pFlash);
;;;533    
;;;534      return status;
;;;535    }
000030  e8bd87f0          POP      {r4-r10,pc}
                  |L12.52|
000034  f7fffffe          BL       FLASH_OB_EnableWRP
000038  e7f7              B        |L12.42|
                  |L12.58|
00003a  7821              LDRB     r1,[r4,#0]            ;496
00003c  0789              LSLS     r1,r1,#30             ;496
00003e  d503              BPL      |L12.72|
000040  7c20              LDRB     r0,[r4,#0x10]         ;498
000042  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000046  bb78              CBNZ     r0,|L12.168|
                  |L12.72|
000048  7821              LDRB     r1,[r4,#0]            ;508
00004a  4e1d              LDR      r6,|L12.192|
00004c  0749              LSLS     r1,r1,#29             ;508
00004e  f24c3950          MOV      r9,#0xc350            ;508
000052  d516              BPL      |L12.130|
000054  f8948011          LDRB     r8,[r4,#0x11]         ;510
000058  4648              MOV      r0,r9                 ;510
00005a  f7fffffe          BL       FLASH_WaitForLastOperation
00005e  b978              CBNZ     r0,|L12.128|
000060  61ef              STR      r7,[r5,#0x1c]         ;510  ; pFlash
000062  6930              LDR      r0,[r6,#0x10]         ;510
000064  f0400010          ORR      r0,r0,#0x10           ;510
000068  6130              STR      r0,[r6,#0x10]         ;510
00006a  4916              LDR      r1,|L12.196|
00006c  f0480088          ORR      r0,r8,#0x88           ;510
000070  8008              STRH     r0,[r1,#0]            ;510
000072  4648              MOV      r0,r9                 ;510
000074  f7fffffe          BL       FLASH_WaitForLastOperation
000078  6931              LDR      r1,[r6,#0x10]         ;510
00007a  f0210110          BIC      r1,r1,#0x10           ;510
00007e  6131              STR      r1,[r6,#0x10]         ;510
                  |L12.128|
000080  b990              CBNZ     r0,|L12.168|
                  |L12.130|
000082  7821              LDRB     r1,[r4,#0]            ;520
000084  0709              LSLS     r1,r1,#28             ;520
000086  d516              BPL      |L12.182|
000088  f8d48014          LDR      r8,[r4,#0x14]         ;522
00008c  7e24              LDRB     r4,[r4,#0x18]         ;522
00008e  4648              MOV      r0,r9                 ;522
000090  f7fffffe          BL       FLASH_WaitForLastOperation
000094  b940              CBNZ     r0,|L12.168|
000096  61ef              STR      r7,[r5,#0x1c]         ;522  ; pFlash
000098  6930              LDR      r0,[r6,#0x10]         ;522
00009a  f0400010          ORR      r0,r0,#0x10           ;522
00009e  6130              STR      r0,[r6,#0x10]         ;522
0000a0  f8a84000          STRH     r4,[r8,#0]            ;522
0000a4  4648              MOV      r0,r9                 ;522
0000a6  e000              B        |L12.170|
                  |L12.168|
0000a8  e005              B        |L12.182|
                  |L12.170|
0000aa  f7fffffe          BL       FLASH_WaitForLastOperation
0000ae  6931              LDR      r1,[r6,#0x10]         ;522
0000b0  f0210110          BIC      r1,r1,#0x10           ;522
0000b4  6131              STR      r1,[r6,#0x10]         ;522
                  |L12.182|
0000b6  762f              STRB     r7,[r5,#0x18]         ;532
0000b8  e7ba              B        |L12.48|
;;;536    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L12.188|
                          DCD      pFlash
                  |L12.192|
                          DCD      0x40022000
                  |L12.196|
                          DCD      0x1ffff802

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16|
#line 463 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH|
#line 478
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX|
#line 665
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
