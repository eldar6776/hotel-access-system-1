; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-160318\stm32f1xx_hal_spi.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-160318\stm32f1xx_hal_spi.d --feedback=.\DE-160318\DE-160318.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I.\RTE\_DE-160318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-160318\stm32f1xx_hal_spi.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi.c]
                          THUMB

                          AREA ||i.HAL_SPI_DMAPause||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAPause PROC
;;;1491     */
;;;1492   HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
000000  f8901050          LDRB     r1,[r0,#0x50]
;;;1493   {
;;;1494     /* Process Locked */
;;;1495     __HAL_LOCK(hspi);
000004  2901              CMP      r1,#1
000006  d011              BEQ      |L1.44|
000008  2101              MOVS     r1,#1
00000a  f8801050          STRB     r1,[r0,#0x50]
;;;1496     
;;;1497     /* Disable the SPI DMA Tx & Rx requests */
;;;1498     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00000e  6801              LDR      r1,[r0,#0]
000010  684a              LDR      r2,[r1,#4]
000012  f0220202          BIC      r2,r2,#2
000016  604a              STR      r2,[r1,#4]
;;;1499     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000018  6801              LDR      r1,[r0,#0]
00001a  684a              LDR      r2,[r1,#4]
00001c  f0220201          BIC      r2,r2,#1
000020  604a              STR      r2,[r1,#4]
;;;1500     
;;;1501     /* Process Unlocked */
;;;1502     __HAL_UNLOCK(hspi);
000022  2100              MOVS     r1,#0
000024  f8801050          STRB     r1,[r0,#0x50]
;;;1503     
;;;1504     return HAL_OK; 
000028  4608              MOV      r0,r1
;;;1505   }
00002a  4770              BX       lr
                  |L1.44|
00002c  2002              MOVS     r0,#2                 ;1495
00002e  4770              BX       lr
;;;1506   
                          ENDP


                          AREA ||i.HAL_SPI_DMAResume||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAResume PROC
;;;1512     */
;;;1513   HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
000000  f8901050          LDRB     r1,[r0,#0x50]
;;;1514   {
;;;1515     /* Process Locked */
;;;1516     __HAL_LOCK(hspi);
000004  2901              CMP      r1,#1
000006  d011              BEQ      |L2.44|
000008  2101              MOVS     r1,#1
00000a  f8801050          STRB     r1,[r0,#0x50]
;;;1517     
;;;1518     /* Enable the SPI DMA Tx & Rx requests */
;;;1519     SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00000e  6801              LDR      r1,[r0,#0]
000010  684a              LDR      r2,[r1,#4]
000012  f0420202          ORR      r2,r2,#2
000016  604a              STR      r2,[r1,#4]
;;;1520     SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000018  6801              LDR      r1,[r0,#0]
00001a  684a              LDR      r2,[r1,#4]
00001c  f0420201          ORR      r2,r2,#1
000020  604a              STR      r2,[r1,#4]
;;;1521     
;;;1522     /* Process Unlocked */
;;;1523     __HAL_UNLOCK(hspi);
000022  2100              MOVS     r1,#0
000024  f8801050          STRB     r1,[r0,#0x50]
;;;1524     
;;;1525     return HAL_OK;
000028  4608              MOV      r0,r1
;;;1526   }
00002a  4770              BX       lr
                  |L2.44|
00002c  2002              MOVS     r0,#2                 ;1516
00002e  4770              BX       lr
;;;1527   
                          ENDP


                          AREA ||i.HAL_SPI_DMAStop||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAStop PROC
;;;1533     */
;;;1534   HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1535   {
000002  4604              MOV      r4,r0
;;;1536     /* The Lock is not implemented on this API to allow the user application
;;;1537        to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback():
;;;1538        when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
;;;1539        and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
;;;1540        */
;;;1541     
;;;1542     /* Abort the SPI DMA tx Channel */
;;;1543     if(hspi->hdmatx != NULL)
000004  6c00              LDR      r0,[r0,#0x40]
000006  b108              CBZ      r0,|L3.12|
;;;1544     {
;;;1545       HAL_DMA_Abort(hspi->hdmatx);
000008  f7fffffe          BL       HAL_DMA_Abort
                  |L3.12|
;;;1546     }
;;;1547     /* Abort the SPI DMA rx Channel */
;;;1548     if(hspi->hdmarx != NULL)
00000c  6c60              LDR      r0,[r4,#0x44]
00000e  b108              CBZ      r0,|L3.20|
;;;1549     {
;;;1550       HAL_DMA_Abort(hspi->hdmarx);
000010  f7fffffe          BL       HAL_DMA_Abort
                  |L3.20|
;;;1551     }
;;;1552     
;;;1553     /* Disable the SPI DMA Tx & Rx requests */
;;;1554     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000014  6820              LDR      r0,[r4,#0]
000016  6841              LDR      r1,[r0,#4]
000018  f0210102          BIC      r1,r1,#2
00001c  6041              STR      r1,[r0,#4]
;;;1555     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
00001e  6820              LDR      r0,[r4,#0]
000020  6841              LDR      r1,[r0,#4]
000022  f0210101          BIC      r1,r1,#1
000026  6041              STR      r1,[r0,#4]
;;;1556     
;;;1557     hspi->State = HAL_SPI_STATE_READY;
000028  2001              MOVS     r0,#1
00002a  f8840051          STRB     r0,[r4,#0x51]
;;;1558     
;;;1559     return HAL_OK;
00002e  2000              MOVS     r0,#0
;;;1560   }
000030  bd10              POP      {r4,pc}
;;;1561   
                          ENDP


                          AREA ||i.HAL_SPI_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DeInit PROC
;;;303      */
;;;304    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;305    {
000002  0004              MOVS     r4,r0
000004  d011              BEQ      |L4.42|
;;;306      /* Check the SPI handle allocation */
;;;307      if(hspi == NULL)
;;;308      {
;;;309        return HAL_ERROR;
;;;310      }
;;;311    
;;;312      hspi->State = HAL_SPI_STATE_BUSY;
000006  2002              MOVS     r0,#2
000008  f8840051          STRB     r0,[r4,#0x51]
;;;313    
;;;314      /* Disable the SPI Peripheral Clock */
;;;315      __HAL_SPI_DISABLE(hspi);
00000c  6820              LDR      r0,[r4,#0]
00000e  6801              LDR      r1,[r0,#0]
000010  f0210140          BIC      r1,r1,#0x40
000014  6001              STR      r1,[r0,#0]
;;;316    
;;;317      /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
;;;318      HAL_SPI_MspDeInit(hspi);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_SPI_MspDeInit
;;;319    
;;;320      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
00001c  2000              MOVS     r0,#0
00001e  6560              STR      r0,[r4,#0x54]
;;;321      hspi->State = HAL_SPI_STATE_RESET;
000020  f8840051          STRB     r0,[r4,#0x51]
;;;322    
;;;323      /* Release Lock */
;;;324      __HAL_UNLOCK(hspi);
000024  f8840050          STRB     r0,[r4,#0x50]
;;;325    
;;;326      return HAL_OK;
;;;327    }
000028  bd10              POP      {r4,pc}
                  |L4.42|
00002a  2001              MOVS     r0,#1                 ;309
00002c  bd10              POP      {r4,pc}
;;;328    
                          ENDP


                          AREA ||i.HAL_SPI_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_ErrorCallback PROC
;;;1714     */
;;;1715    __WEAK void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1716   {
;;;1717     /* Prevent unused argument(s) compilation warning */
;;;1718     UNUSED(hspi);
;;;1719     /* NOTE : - This function Should not be modified, when the callback is needed,
;;;1720               the HAL_SPI_ErrorCallback() could be implenetd in the user file.
;;;1721               - The ErrorCode parameter in the hspi handle is updated by the SPI processes
;;;1722               and user can use HAL_SPI_GetError() API to check the latest error occurred.
;;;1723      */
;;;1724   }
;;;1725   
                          ENDP


                          AREA ||i.HAL_SPI_GetError||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetError PROC
;;;1761     */
;;;1762   uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
000000  6d40              LDR      r0,[r0,#0x54]
;;;1763   {
;;;1764     return hspi->ErrorCode;
;;;1765   }
000002  4770              BX       lr
;;;1766   
                          ENDP


                          AREA ||i.HAL_SPI_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetState PROC
;;;1750     */
;;;1751   HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
000000  f8900051          LDRB     r0,[r0,#0x51]
;;;1752   {
;;;1753     return hspi->State;
;;;1754   }
000004  4770              BX       lr
;;;1755   
                          ENDP


                          AREA ||i.HAL_SPI_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SPI_IRQHandler PROC
;;;1567     */
;;;1568   void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
000000  b508              PUSH     {r3,lr}
;;;1569   {
;;;1570     /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
;;;1571     if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) == RESET))
000002  6801              LDR      r1,[r0,#0]
000004  684a              LDR      r2,[r1,#4]
000006  43d2              MVNS     r2,r2
000008  0652              LSLS     r2,r2,#25
00000a  d409              BMI      |L8.32|
00000c  688a              LDR      r2,[r1,#8]
00000e  43d2              MVNS     r2,r2
000010  07d2              LSLS     r2,r2,#31
000012  d105              BNE      |L8.32|
000014  688a              LDR      r2,[r1,#8]
000016  43d2              MVNS     r2,r2
000018  0652              LSLS     r2,r2,#25
00001a  d501              BPL      |L8.32|
;;;1572     {
;;;1573       hspi->RxISR(hspi);
;;;1574       return;
00001c  6c81              LDR      r1,[r0,#0x48]
00001e  e008              B        |L8.50|
                  |L8.32|
;;;1575     }
;;;1576   
;;;1577     /* SPI in mode Tramitter ---------------------------------------------------*/
;;;1578     if((__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) != RESET) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE) != RESET))
000020  684a              LDR      r2,[r1,#4]
000022  43d2              MVNS     r2,r2
000024  0612              LSLS     r2,r2,#24
000026  d408              BMI      |L8.58|
000028  688a              LDR      r2,[r1,#8]
00002a  43d2              MVNS     r2,r2
00002c  0792              LSLS     r2,r2,#30
00002e  d404              BMI      |L8.58|
;;;1579     {
;;;1580       hspi->TxISR(hspi);
000030  6cc1              LDR      r1,[r0,#0x4c]
                  |L8.50|
000032  b001              ADD      sp,sp,#4
000034  f85deb04          POP      {lr}
000038  4708              BX       r1
                  |L8.58|
;;;1581       return;
;;;1582     }
;;;1583   
;;;1584     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
00003a  684a              LDR      r2,[r1,#4]
00003c  43d2              MVNS     r2,r2
00003e  0692              LSLS     r2,r2,#26
000040  d435              BMI      |L8.174|
;;;1585     {
;;;1586       /* SPI CRC error interrupt occurred ---------------------------------------*/
;;;1587       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000042  688a              LDR      r2,[r1,#8]
000044  43d2              MVNS     r2,r2
000046  06d2              LSLS     r2,r2,#27
000048  d406              BMI      |L8.88|
;;;1588       {
;;;1589         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
00004a  6d42              LDR      r2,[r0,#0x54]
00004c  f0420202          ORR      r2,r2,#2
000050  6542              STR      r2,[r0,#0x54]
;;;1590         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000052  f06f0210          MVN      r2,#0x10
000056  608a              STR      r2,[r1,#8]
                  |L8.88|
;;;1591       }
;;;1592       /* SPI Mode Fault error interrupt occurred --------------------------------*/
;;;1593       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
000058  6801              LDR      r1,[r0,#0]
00005a  688a              LDR      r2,[r1,#8]
00005c  43d2              MVNS     r2,r2
00005e  0692              LSLS     r2,r2,#26
000060  d409              BMI      |L8.118|
;;;1594       {
;;;1595         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
000062  6d42              LDR      r2,[r0,#0x54]
000064  f0420201          ORR      r2,r2,#1
000068  6542              STR      r2,[r0,#0x54]
;;;1596         __HAL_SPI_CLEAR_MODFFLAG(hspi);
00006a  688a              LDR      r2,[r1,#8]
00006c  680a              LDR      r2,[r1,#0]
00006e  f0220240          BIC      r2,r2,#0x40
000072  600a              STR      r2,[r1,#0]
000074  9200              STR      r2,[sp,#0]
                  |L8.118|
;;;1597       }
;;;1598       
;;;1599       /* SPI Overrun error interrupt occurred -----------------------------------*/
;;;1600       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
000076  6801              LDR      r1,[r0,#0]
000078  688a              LDR      r2,[r1,#8]
00007a  43d2              MVNS     r2,r2
00007c  0652              LSLS     r2,r2,#25
00007e  d40a              BMI      |L8.150|
;;;1601       {
;;;1602         if(hspi->State != HAL_SPI_STATE_BUSY_TX)
000080  f8902051          LDRB     r2,[r0,#0x51]
000084  2a12              CMP      r2,#0x12
000086  d006              BEQ      |L8.150|
;;;1603         {
;;;1604           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
000088  6d42              LDR      r2,[r0,#0x54]
00008a  f0420204          ORR      r2,r2,#4
00008e  6542              STR      r2,[r0,#0x54]
;;;1605           __HAL_SPI_CLEAR_OVRFLAG(hspi);      
000090  68ca              LDR      r2,[r1,#0xc]
000092  688a              LDR      r2,[r1,#8]
000094  9200              STR      r2,[sp,#0]
                  |L8.150|
;;;1606         }
;;;1607       }
;;;1608   
;;;1609       /* Call the Error call Back in case of Errors */
;;;1610       if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
000096  6d42              LDR      r2,[r0,#0x54]
000098  2a00              CMP      r2,#0
00009a  d008              BEQ      |L8.174|
;;;1611       {
;;;1612         __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
00009c  684a              LDR      r2,[r1,#4]
00009e  f02202e0          BIC      r2,r2,#0xe0
0000a2  604a              STR      r2,[r1,#4]
;;;1613         hspi->State = HAL_SPI_STATE_READY;
0000a4  2101              MOVS     r1,#1
0000a6  f8801051          STRB     r1,[r0,#0x51]
;;;1614         HAL_SPI_ErrorCallback(hspi);
0000aa  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L8.174|
;;;1615       }
;;;1616     }
;;;1617   }
0000ae  bd08              POP      {r3,pc}
;;;1618   
                          ENDP


                          AREA ||i.HAL_SPI_Init||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Init PROC
;;;241      */
;;;242    __WEAK HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000000  b570              PUSH     {r4-r6,lr}
;;;243    {
000002  0004              MOVS     r4,r0
000004  d004              BEQ      |L9.16|
;;;244      /* Check the SPI handle allocation */
;;;245      if(hspi == NULL)
;;;246      {
;;;247        return HAL_ERROR;
;;;248      }
;;;249    
;;;250      /* Check the parameters */
;;;251      assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
;;;252      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;253      assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
;;;254      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;255      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;256      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;257      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;258      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;259      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;260      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;261      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;262      assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;263    
;;;264      if(hspi->State == HAL_SPI_STATE_RESET)
000006  f8940051          LDRB     r0,[r4,#0x51]
00000a  2500              MOVS     r5,#0
00000c  b110              CBZ      r0,|L9.20|
00000e  e006              B        |L9.30|
                  |L9.16|
000010  2001              MOVS     r0,#1                 ;247
;;;265      {
;;;266        /* Allocate lock resource and initialize it */
;;;267        hspi->Lock = HAL_UNLOCKED;
;;;268        
;;;269        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;270        HAL_SPI_MspInit(hspi);
;;;271      }
;;;272      
;;;273      hspi->State = HAL_SPI_STATE_BUSY;
;;;274    
;;;275      /* Disble the selected SPI peripheral */
;;;276      __HAL_SPI_DISABLE(hspi);
;;;277    
;;;278      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;279      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;280      Communication speed, First bit and CRC calculation state */
;;;281      WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;282                                      hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;283                                      hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );
;;;284    
;;;285      /* Configure : NSS management */
;;;286      WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
;;;287    
;;;288      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;289      /* Configure : CRC Polynomial */
;;;290      WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
;;;291    
;;;292      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;293      hspi->State = HAL_SPI_STATE_READY;
;;;294      
;;;295      return HAL_OK;
;;;296    }
000012  bd70              POP      {r4-r6,pc}
                  |L9.20|
000014  f8845050          STRB     r5,[r4,#0x50]         ;267
000018  4620              MOV      r0,r4                 ;270
00001a  f7fffffe          BL       HAL_SPI_MspInit
                  |L9.30|
00001e  2002              MOVS     r0,#2                 ;273
000020  f8840051          STRB     r0,[r4,#0x51]         ;273
000024  6820              LDR      r0,[r4,#0]            ;276
000026  6801              LDR      r1,[r0,#0]            ;276
000028  f0210140          BIC      r1,r1,#0x40           ;276
00002c  6001              STR      r1,[r0,#0]            ;276
00002e  e9d40101          LDRD     r0,r1,[r4,#4]         ;276
000032  4308              ORRS     r0,r0,r1              ;281
000034  e9d41203          LDRD     r1,r2,[r4,#0xc]       ;281
000038  4311              ORRS     r1,r1,r2              ;281
00003a  4308              ORRS     r0,r0,r1              ;281
00003c  6961              LDR      r1,[r4,#0x14]         ;281
00003e  4308              ORRS     r0,r0,r1              ;281
000040  8b21              LDRH     r1,[r4,#0x18]         ;281
000042  f4017100          AND      r1,r1,#0x200          ;281
000046  4308              ORRS     r0,r0,r1              ;281
000048  69e1              LDR      r1,[r4,#0x1c]         ;281
00004a  4308              ORRS     r0,r0,r1              ;281
00004c  6a21              LDR      r1,[r4,#0x20]         ;281
00004e  4308              ORRS     r0,r0,r1              ;281
000050  6aa1              LDR      r1,[r4,#0x28]         ;281
000052  4308              ORRS     r0,r0,r1              ;281
000054  6821              LDR      r1,[r4,#0]            ;281
000056  6008              STR      r0,[r1,#0]            ;281
000058  69a0              LDR      r0,[r4,#0x18]         ;286
00005a  2104              MOVS     r1,#4                 ;286
00005c  ea014010          AND      r0,r1,r0,LSR #16      ;286
000060  6a61              LDR      r1,[r4,#0x24]         ;286
000062  4308              ORRS     r0,r0,r1              ;286
000064  6821              LDR      r1,[r4,#0]            ;286
000066  6048              STR      r0,[r1,#4]            ;286
000068  6821              LDR      r1,[r4,#0]            ;290
00006a  6ae0              LDR      r0,[r4,#0x2c]         ;290
00006c  6108              STR      r0,[r1,#0x10]         ;290
00006e  6565              STR      r5,[r4,#0x54]         ;292
000070  2001              MOVS     r0,#1                 ;293
000072  f8840051          STRB     r0,[r4,#0x51]         ;293
000076  2000              MOVS     r0,#0                 ;295
000078  bd70              POP      {r4-r6,pc}
;;;297    
                          ENDP


                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspDeInit PROC
;;;349      */
;;;350     __WEAK void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;351    {
;;;352      /* Prevent unused argument(s) compilation warning */
;;;353      UNUSED(hspi);
;;;354      /* NOTE : This function Should not be modified, when the callback is needed,
;;;355                the HAL_SPI_MspDeInit could be implenetd in the user file
;;;356       */
;;;357    }
;;;358    
                          ENDP


                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspInit PROC
;;;334      */
;;;335     __WEAK void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;336     {
;;;337      /* Prevent unused argument(s) compilation warning */
;;;338      UNUSED(hspi);
;;;339       /* NOTE : This function Should not be modified, when the callback is needed,
;;;340                 the HAL_SPI_MspInit could be implenetd in the user file
;;;341       */
;;;342    }
;;;343    
                          ENDP


                          AREA ||i.HAL_SPI_Receive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Receive PROC
;;;548      */
;;;549    HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;550    {
;;;551      __IO uint16_t tmpreg = 0;
000004  2500              MOVS     r5,#0
000006  469a              MOV      r10,r3                ;550
000008  4604              MOV      r4,r0                 ;550
00000a  f8ad5000          STRH     r5,[sp,#0]
;;;552    
;;;553      if(hspi->State == HAL_SPI_STATE_READY)
00000e  f8900051          LDRB     r0,[r0,#0x51]
000012  2801              CMP      r0,#1
000014  d17e              BNE      |L12.276|
;;;554      {
;;;555        if((pData == NULL ) || (Size == 0)) 
000016  b3e9              CBZ      r1,|L12.148|
000018  b3e2              CBZ      r2,|L12.148|
;;;556        {
;;;557          return  HAL_ERROR;
;;;558        }
;;;559    
;;;560        /* Process Locked */
;;;561        __HAL_LOCK(hspi);
00001a  f8940050          LDRB     r0,[r4,#0x50]
00001e  2801              CMP      r0,#1
000020  d078              BEQ      |L12.276|
000022  2601              MOVS     r6,#1
000024  f8846050          STRB     r6,[r4,#0x50]
;;;562    
;;;563        /* Configure communication */
;;;564        hspi->State       = HAL_SPI_STATE_BUSY_RX;
000028  2022              MOVS     r0,#0x22
00002a  f8840051          STRB     r0,[r4,#0x51]
;;;565        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
00002e  6565              STR      r5,[r4,#0x54]
;;;566    
;;;567        hspi->pRxBuffPtr  = pData;
;;;568        hspi->RxXferSize  = Size;
000030  63a1              STR      r1,[r4,#0x38]
000032  87a2              STRH     r2,[r4,#0x3c]
;;;569        hspi->RxXferCount = Size;
000034  87e2              STRH     r2,[r4,#0x3e]
;;;570    
;;;571        /*Init field not used in handle to zero */
;;;572        hspi->RxISR = 0;
;;;573        hspi->TxISR = 0;
000036  64a5              STR      r5,[r4,#0x48]
;;;574        hspi->pTxBuffPtr  = NULL;
000038  64e5              STR      r5,[r4,#0x4c]
;;;575        hspi->TxXferSize  = 0;
00003a  6325              STR      r5,[r4,#0x30]
00003c  86a5              STRH     r5,[r4,#0x34]
;;;576        hspi->TxXferCount = 0;
00003e  86e5              STRH     r5,[r4,#0x36]
;;;577    
;;;578        /* Configure communication direction : 1Line */
;;;579        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000040  68a0              LDR      r0,[r4,#8]
000042  f44f4900          MOV      r9,#0x8000
000046  4548              CMP      r0,r9
000048  d104              BNE      |L12.84|
;;;580        {
;;;581          SPI_1LINE_RX(hspi);
00004a  6820              LDR      r0,[r4,#0]
00004c  6803              LDR      r3,[r0,#0]
00004e  f4234380          BIC      r3,r3,#0x4000
000052  6003              STR      r3,[r0,#0]
                  |L12.84|
;;;582        }
;;;583    
;;;584        /* Reset CRC Calculation */
;;;585        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000054  6aa0              LDR      r0,[r4,#0x28]
000056  f44f5700          MOV      r7,#0x2000
00005a  42b8              CMP      r0,r7
00005c  d109              BNE      |L12.114|
;;;586        {
;;;587          SPI_RESET_CRC(hspi);
00005e  6820              LDR      r0,[r4,#0]
000060  6803              LDR      r3,[r0,#0]
000062  f4235300          BIC      r3,r3,#0x2000
000066  6003              STR      r3,[r0,#0]
000068  6820              LDR      r0,[r4,#0]
00006a  6803              LDR      r3,[r0,#0]
00006c  f4435300          ORR      r3,r3,#0x2000
000070  6003              STR      r3,[r0,#0]
                  |L12.114|
;;;588        }
;;;589        
;;;590        if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
000072  6860              LDR      r0,[r4,#4]
000074  f44f7882          MOV      r8,#0x104
000078  4540              CMP      r0,r8
00007a  d101              BNE      |L12.128|
00007c  68a0              LDR      r0,[r4,#8]
00007e  b178              CBZ      r0,|L12.160|
                  |L12.128|
;;;591        {
;;;592          /* Process Unlocked */
;;;593          __HAL_UNLOCK(hspi);
;;;594    
;;;595          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;596          return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
;;;597        }
;;;598    
;;;599        /* Check if the SPI is already enabled */ 
;;;600        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
000080  6820              LDR      r0,[r4,#0]
000082  6801              LDR      r1,[r0,#0]
000084  0649              LSLS     r1,r1,#25
000086  d403              BMI      |L12.144|
;;;601        {
;;;602          /* Enable SPI peripheral */
;;;603          __HAL_SPI_ENABLE(hspi);
000088  6801              LDR      r1,[r0,#0]
00008a  f0410140          ORR      r1,r1,#0x40
00008e  6001              STR      r1,[r0,#0]
                  |L12.144|
;;;604        }
;;;605    
;;;606        /* Receive data in 8 Bit mode */
;;;607        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000090  68e0              LDR      r0,[r4,#0xc]
000092  e000              B        |L12.150|
                  |L12.148|
000094  e001              B        |L12.154|
                  |L12.150|
000096  b1e8              CBZ      r0,|L12.212|
000098  e031              B        |L12.254|
                  |L12.154|
00009a  2001              MOVS     r0,#1                 ;557
                  |L12.156|
;;;608        {
;;;609          while(hspi->RxXferCount > 1)
;;;610          {
;;;611            /* Wait until RXNE flag is set */
;;;612            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;613            { 
;;;614              return HAL_TIMEOUT;
;;;615            }
;;;616    
;;;617            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;618            hspi->RxXferCount--;
;;;619          }
;;;620          /* Enable CRC Reception */
;;;621          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;622          {
;;;623            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;624          }
;;;625        }
;;;626        /* Receive data in 16 Bit mode */
;;;627        else
;;;628        {
;;;629          while(hspi->RxXferCount > 1)
;;;630          {
;;;631            /* Wait until RXNE flag is set to read data */
;;;632            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;633            { 
;;;634              return HAL_TIMEOUT;
;;;635            }
;;;636    
;;;637            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;638            hspi->pRxBuffPtr+=2;
;;;639            hspi->RxXferCount--;
;;;640          }
;;;641          /* Enable CRC Reception */
;;;642          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;643          {
;;;644            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;645          }
;;;646        }
;;;647    
;;;648        /* Wait until RXNE flag is set */
;;;649        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;650        { 
;;;651          return HAL_TIMEOUT;
;;;652        }
;;;653    
;;;654        /* Receive last data in 8 Bit mode */
;;;655        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;656        {
;;;657          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;658        }
;;;659        /* Receive last data in 16 Bit mode */
;;;660        else
;;;661        {
;;;662          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;663          hspi->pRxBuffPtr+=2;
;;;664        }
;;;665        hspi->RxXferCount--;
;;;666    
;;;667        /* If CRC computation is enabled */
;;;668        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;669        {
;;;670          /* Wait until RXNE flag is set: CRC Received */
;;;671          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;672          {
;;;673            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;674            return HAL_TIMEOUT;
;;;675          }
;;;676    
;;;677          /* Read CRC to clear RXNE flag */
;;;678          tmpreg = hspi->Instance->DR;
;;;679          UNUSED(tmpreg);
;;;680        }
;;;681        
;;;682        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;683        {
;;;684          /* Disable SPI peripheral */
;;;685          __HAL_SPI_DISABLE(hspi);
;;;686        }
;;;687    
;;;688        hspi->State = HAL_SPI_STATE_READY;
;;;689    
;;;690        /* Check if CRC error occurred */
;;;691        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
;;;692        {  
;;;693          /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;694          if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
;;;695          {
;;;696            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;697    
;;;698            /* Reset CRC Calculation */
;;;699            SPI_RESET_CRC(hspi);
;;;700    
;;;701            /* Process Unlocked */
;;;702            __HAL_UNLOCK(hspi);
;;;703    
;;;704            return HAL_ERROR; 
;;;705          }
;;;706          else
;;;707          {
;;;708            __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;709          }
;;;710        }
;;;711    
;;;712        /* Process Unlocked */
;;;713        __HAL_UNLOCK(hspi);
;;;714    
;;;715        return HAL_OK;
;;;716      }
;;;717      else
;;;718      {
;;;719        return HAL_BUSY;
;;;720      }
;;;721    }
00009c  e8bd8ff8          POP      {r3-r11,pc}
                  |L12.160|
0000a0  f8845050          STRB     r5,[r4,#0x50]         ;593
0000a4  4613              MOV      r3,r2                 ;596
0000a6  460a              MOV      r2,r1                 ;596
0000a8  4620              MOV      r0,r4                 ;596
0000aa  f8cda000          STR      r10,[sp,#0]           ;596
0000ae  f7fffffe          BL       HAL_SPI_TransmitReceive
0000b2  e7f3              B        |L12.156|
                  |L12.180|
0000b4  4653              MOV      r3,r10                ;612
0000b6  2200              MOVS     r2,#0                 ;612
0000b8  2101              MOVS     r1,#1                 ;612
0000ba  4620              MOV      r0,r4                 ;612
0000bc  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000c0  bb48              CBNZ     r0,|L12.278|
0000c2  6820              LDR      r0,[r4,#0]            ;617
0000c4  68c1              LDR      r1,[r0,#0xc]          ;617
0000c6  6ba0              LDR      r0,[r4,#0x38]         ;617
0000c8  1c42              ADDS     r2,r0,#1              ;617
0000ca  63a2              STR      r2,[r4,#0x38]         ;617
0000cc  7001              STRB     r1,[r0,#0]            ;617
0000ce  8fe0              LDRH     r0,[r4,#0x3e]         ;618
0000d0  1e40              SUBS     r0,r0,#1              ;618
0000d2  87e0              STRH     r0,[r4,#0x3e]         ;618
                  |L12.212|
0000d4  8fe0              LDRH     r0,[r4,#0x3e]         ;609
0000d6  2801              CMP      r0,#1                 ;609
0000d8  d8ec              BHI      |L12.180|
0000da  e013              B        |L12.260|
                  |L12.220|
0000dc  4653              MOV      r3,r10                ;632
0000de  2200              MOVS     r2,#0                 ;632
0000e0  2101              MOVS     r1,#1                 ;632
0000e2  4620              MOV      r0,r4                 ;632
0000e4  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000e8  b9a8              CBNZ     r0,|L12.278|
0000ea  6820              LDR      r0,[r4,#0]            ;637
0000ec  68c0              LDR      r0,[r0,#0xc]          ;637
0000ee  6ba1              LDR      r1,[r4,#0x38]         ;637
0000f0  8008              STRH     r0,[r1,#0]            ;637
0000f2  6ba0              LDR      r0,[r4,#0x38]         ;638
0000f4  1c80              ADDS     r0,r0,#2              ;638
0000f6  63a0              STR      r0,[r4,#0x38]         ;639
0000f8  8fe0              LDRH     r0,[r4,#0x3e]         ;639
0000fa  1e40              SUBS     r0,r0,#1              ;639
0000fc  87e0              STRH     r0,[r4,#0x3e]         ;639
                  |L12.254|
0000fe  8fe0              LDRH     r0,[r4,#0x3e]         ;629
000100  2801              CMP      r0,#1                 ;629
000102  d8eb              BHI      |L12.220|
                  |L12.260|
000104  6aa0              LDR      r0,[r4,#0x28]         ;642
000106  42b8              CMP      r0,r7                 ;642
000108  d107              BNE      |L12.282|
00010a  6820              LDR      r0,[r4,#0]            ;644
00010c  6801              LDR      r1,[r0,#0]            ;644
00010e  f4415180          ORR      r1,r1,#0x1000         ;644
000112  e001              B        |L12.280|
                  |L12.276|
000114  e068              B        |L12.488|
                  |L12.278|
000116  e007              B        |L12.296|
                  |L12.280|
000118  6001              STR      r1,[r0,#0]            ;644
                  |L12.282|
00011a  4653              MOV      r3,r10                ;649
00011c  2200              MOVS     r2,#0                 ;649
00011e  2101              MOVS     r1,#1                 ;649
000120  4620              MOV      r0,r4                 ;649
000122  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000126  b108              CBZ      r0,|L12.300|
                  |L12.296|
000128  2003              MOVS     r0,#3                 ;651
00012a  e7b7              B        |L12.156|
                  |L12.300|
00012c  68e0              LDR      r0,[r4,#0xc]          ;655
00012e  2800              CMP      r0,#0                 ;655
000130  6820              LDR      r0,[r4,#0]            ;655
000132  d017              BEQ      |L12.356|
000134  68c0              LDR      r0,[r0,#0xc]          ;662
000136  6ba1              LDR      r1,[r4,#0x38]         ;662
000138  8008              STRH     r0,[r1,#0]            ;662
00013a  6ba0              LDR      r0,[r4,#0x38]         ;663
00013c  1c80              ADDS     r0,r0,#2              ;663
00013e  63a0              STR      r0,[r4,#0x38]         ;663
                  |L12.320|
000140  8fe0              LDRH     r0,[r4,#0x3e]         ;665
000142  1e40              SUBS     r0,r0,#1              ;665
000144  87e0              STRH     r0,[r4,#0x3e]         ;665
000146  6aa0              LDR      r0,[r4,#0x28]         ;668
000148  42b8              CMP      r0,r7                 ;668
00014a  d117              BNE      |L12.380|
00014c  4653              MOV      r3,r10                ;671
00014e  2200              MOVS     r2,#0                 ;671
000150  2101              MOVS     r1,#1                 ;671
000152  4620              MOV      r0,r4                 ;671
000154  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000158  b150              CBZ      r0,|L12.368|
00015a  6d60              LDR      r0,[r4,#0x54]         ;673
00015c  f0400002          ORR      r0,r0,#2              ;673
000160  6560              STR      r0,[r4,#0x54]         ;673
000162  e7e1              B        |L12.296|
                  |L12.356|
000164  68c1              LDR      r1,[r0,#0xc]          ;657
000166  6ba0              LDR      r0,[r4,#0x38]         ;657
000168  1c42              ADDS     r2,r0,#1              ;657
00016a  63a2              STR      r2,[r4,#0x38]         ;657
00016c  7001              STRB     r1,[r0,#0]            ;657
00016e  e7e7              B        |L12.320|
                  |L12.368|
000170  6820              LDR      r0,[r4,#0]            ;678
000172  68c0              LDR      r0,[r0,#0xc]          ;678
000174  f8ad0000          STRH     r0,[sp,#0]            ;678
000178  f8bd0000          LDRH     r0,[sp,#0]            ;679
                  |L12.380|
00017c  6860              LDR      r0,[r4,#4]            ;682
00017e  4540              CMP      r0,r8                 ;682
000180  d10a              BNE      |L12.408|
000182  68a0              LDR      r0,[r4,#8]            ;682
000184  4548              CMP      r0,r9                 ;682
000186  d002              BEQ      |L12.398|
000188  f5b06f80          CMP      r0,#0x400             ;682
00018c  d104              BNE      |L12.408|
                  |L12.398|
00018e  6820              LDR      r0,[r4,#0]            ;685
000190  6801              LDR      r1,[r0,#0]            ;685
000192  f0210140          BIC      r1,r1,#0x40           ;685
000196  6001              STR      r1,[r0,#0]            ;685
                  |L12.408|
000198  f8846051          STRB     r6,[r4,#0x51]         ;688
00019c  6aa0              LDR      r0,[r4,#0x28]         ;691
00019e  42b8              CMP      r0,r7                 ;691
0001a0  d10d              BNE      |L12.446|
0001a2  6820              LDR      r0,[r4,#0]            ;691
0001a4  6880              LDR      r0,[r0,#8]            ;691
0001a6  43c0              MVNS     r0,r0                 ;691
0001a8  06c0              LSLS     r0,r0,#27             ;691
0001aa  d408              BMI      |L12.446|
0001ac  4620              MOV      r0,r4                 ;694
0001ae  f7fffffe          BL       SPI_ISCRCErrorValid
0001b2  2801              CMP      r0,#1                 ;694
0001b4  d007              BEQ      |L12.454|
0001b6  6821              LDR      r1,[r4,#0]            ;708
0001b8  f06f0010          MVN      r0,#0x10              ;708
0001bc  6088              STR      r0,[r1,#8]            ;708
                  |L12.446|
0001be  f8845050          STRB     r5,[r4,#0x50]         ;713
0001c2  2000              MOVS     r0,#0                 ;715
0001c4  e76a              B        |L12.156|
                  |L12.454|
0001c6  6d60              LDR      r0,[r4,#0x54]         ;696
0001c8  f0400002          ORR      r0,r0,#2              ;696
0001cc  6560              STR      r0,[r4,#0x54]         ;696
0001ce  6820              LDR      r0,[r4,#0]            ;699
0001d0  6801              LDR      r1,[r0,#0]            ;699
0001d2  f4215100          BIC      r1,r1,#0x2000         ;699
0001d6  6001              STR      r1,[r0,#0]            ;699
0001d8  6820              LDR      r0,[r4,#0]            ;699
0001da  6801              LDR      r1,[r0,#0]            ;699
0001dc  f4415100          ORR      r1,r1,#0x2000         ;699
0001e0  6001              STR      r1,[r0,#0]            ;699
0001e2  f8845050          STRB     r5,[r4,#0x50]         ;702
0001e6  e758              B        |L12.154|
                  |L12.488|
0001e8  2002              MOVS     r0,#2                 ;719
0001ea  e757              B        |L12.156|
;;;722    
                          ENDP


                          AREA ||i.HAL_SPI_Receive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_DMA PROC
;;;1290     */
;;;1291   HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1292   {
000002  4604              MOV      r4,r0
;;;1293     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d160              BNE      |L13.206|
;;;1294     {
;;;1295       if((pData == NULL) || (Size == 0))
00000c  b1d1              CBZ      r1,|L13.68|
00000e  b1ca              CBZ      r2,|L13.68|
;;;1296       {
;;;1297         return  HAL_ERROR;
;;;1298       }
;;;1299   
;;;1300       /* Process Locked */
;;;1301       __HAL_LOCK(hspi);
000010  f8940050          LDRB     r0,[r4,#0x50]
000014  2801              CMP      r0,#1
000016  d05a              BEQ      |L13.206|
000018  2001              MOVS     r0,#1
00001a  f8840050          STRB     r0,[r4,#0x50]
;;;1302   
;;;1303       /* Configure communication */
;;;1304       hspi->State       = HAL_SPI_STATE_BUSY_RX;
00001e  2022              MOVS     r0,#0x22
000020  f8840051          STRB     r0,[r4,#0x51]
;;;1305       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000024  2500              MOVS     r5,#0
000026  6565              STR      r5,[r4,#0x54]
;;;1306   
;;;1307       hspi->pRxBuffPtr  = pData;
;;;1308       hspi->RxXferSize  = Size;
000028  63a1              STR      r1,[r4,#0x38]
00002a  87a2              STRH     r2,[r4,#0x3c]
;;;1309       hspi->RxXferCount = Size;
00002c  87e2              STRH     r2,[r4,#0x3e]
;;;1310   
;;;1311       /*Init field not used in handle to zero */
;;;1312       hspi->RxISR       = 0;
;;;1313       hspi->TxISR       = 0;
00002e  64a5              STR      r5,[r4,#0x48]
;;;1314       hspi->pTxBuffPtr  = NULL;
000030  64e5              STR      r5,[r4,#0x4c]
;;;1315       hspi->TxXferSize  = 0;
000032  6325              STR      r5,[r4,#0x30]
000034  86a5              STRH     r5,[r4,#0x34]
;;;1316       hspi->TxXferCount = 0;
000036  86e5              STRH     r5,[r4,#0x36]
;;;1317   
;;;1318       /* Configure communication direction : 1Line */
;;;1319       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  68a0              LDR      r0,[r4,#8]
00003a  f5b04f00          CMP      r0,#0x8000
00003e  d003              BEQ      |L13.72|
;;;1320       {
;;;1321         SPI_1LINE_RX(hspi);
;;;1322       }
;;;1323       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
000040  b140              CBZ      r0,|L13.84|
000042  e00b              B        |L13.92|
                  |L13.68|
000044  2001              MOVS     r0,#1                 ;1297
;;;1324       {
;;;1325         /* Process Unlocked */
;;;1326         __HAL_UNLOCK(hspi);
;;;1327   
;;;1328         /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1329         return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
;;;1330       }
;;;1331   
;;;1332       /* Reset CRC Calculation */
;;;1333       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1334       {
;;;1335         SPI_RESET_CRC(hspi);
;;;1336       }
;;;1337   
;;;1338       /* Set the SPI RxDMA Half transfer complete callback */
;;;1339       hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1340   
;;;1341       /* Set the SPI Rx DMA transfer complete callback */
;;;1342       hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1343   
;;;1344       /* Set the DMA error callback */
;;;1345       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1346   
;;;1347       /* Enable the Rx DMA Channel */
;;;1348       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1349   
;;;1350       /* Enable Rx DMA Request */  
;;;1351       SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1352   
;;;1353       /* Process Unlocked */
;;;1354       __HAL_UNLOCK(hspi);
;;;1355   
;;;1356       /* Check if the SPI is already enabled */ 
;;;1357       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1358       {
;;;1359         /* Enable SPI peripheral */
;;;1360         __HAL_SPI_ENABLE(hspi);
;;;1361       }
;;;1362   
;;;1363       return HAL_OK;
;;;1364     }
;;;1365     else
;;;1366     {
;;;1367       return HAL_BUSY;
;;;1368     }
;;;1369   }
000046  bd70              POP      {r4-r6,pc}
                  |L13.72|
000048  6820              LDR      r0,[r4,#0]            ;1321
00004a  6801              LDR      r1,[r0,#0]            ;1321
00004c  f4214180          BIC      r1,r1,#0x4000         ;1321
000050  6001              STR      r1,[r0,#0]            ;1321
000052  e003              B        |L13.92|
                  |L13.84|
000054  6860              LDR      r0,[r4,#4]            ;1323
000056  f5b07f82          CMP      r0,#0x104             ;1323
00005a  d004              BEQ      |L13.102|
                  |L13.92|
00005c  6aa0              LDR      r0,[r4,#0x28]         ;1333
00005e  f5b05f00          CMP      r0,#0x2000            ;1333
000062  d009              BEQ      |L13.120|
000064  e012              B        |L13.140|
                  |L13.102|
000066  f8845050          STRB     r5,[r4,#0x50]         ;1326
00006a  4620              MOV      r0,r4                 ;1329
00006c  e8bd4070          POP      {r4-r6,lr}            ;1329
000070  4613              MOV      r3,r2                 ;1329
000072  460a              MOV      r2,r1                 ;1329
000074  f7ffbffe          B.W      HAL_SPI_TransmitReceive_DMA
                  |L13.120|
000078  6820              LDR      r0,[r4,#0]            ;1335
00007a  6801              LDR      r1,[r0,#0]            ;1335
00007c  f4215100          BIC      r1,r1,#0x2000         ;1335
000080  6001              STR      r1,[r0,#0]            ;1335
000082  6820              LDR      r0,[r4,#0]            ;1335
000084  6801              LDR      r1,[r0,#0]            ;1335
000086  f4415100          ORR      r1,r1,#0x2000         ;1335
00008a  6001              STR      r1,[r0,#0]            ;1335
                  |L13.140|
00008c  6c61              LDR      r1,[r4,#0x44]         ;1339
00008e  4811              LDR      r0,|L13.212|
000090  62c8              STR      r0,[r1,#0x2c]         ;1342
000092  6c61              LDR      r1,[r4,#0x44]         ;1342
000094  4810              LDR      r0,|L13.216|
000096  6288              STR      r0,[r1,#0x28]         ;1345
000098  6c61              LDR      r1,[r4,#0x44]         ;1345
00009a  4810              LDR      r0,|L13.220|
00009c  6308              STR      r0,[r1,#0x30]         ;1348
00009e  6821              LDR      r1,[r4,#0]            ;1348
0000a0  8fe3              LDRH     r3,[r4,#0x3e]         ;1348
0000a2  310c              ADDS     r1,r1,#0xc            ;1348
0000a4  6ba2              LDR      r2,[r4,#0x38]         ;1348
0000a6  6c60              LDR      r0,[r4,#0x44]         ;1348
0000a8  f7fffffe          BL       HAL_DMA_Start_IT
0000ac  6820              LDR      r0,[r4,#0]            ;1351
0000ae  6841              LDR      r1,[r0,#4]            ;1351
0000b0  f0410101          ORR      r1,r1,#1              ;1351
0000b4  6041              STR      r1,[r0,#4]            ;1351
0000b6  f8845050          STRB     r5,[r4,#0x50]         ;1354
0000ba  6820              LDR      r0,[r4,#0]            ;1357
0000bc  6801              LDR      r1,[r0,#0]            ;1357
0000be  0649              LSLS     r1,r1,#25             ;1357
0000c0  d403              BMI      |L13.202|
0000c2  6801              LDR      r1,[r0,#0]            ;1360
0000c4  f0410140          ORR      r1,r1,#0x40           ;1360
0000c8  6001              STR      r1,[r0,#0]            ;1360
                  |L13.202|
0000ca  2000              MOVS     r0,#0                 ;1363
0000cc  bd70              POP      {r4-r6,pc}
                  |L13.206|
0000ce  2002              MOVS     r0,#2                 ;1367
0000d0  bd70              POP      {r4-r6,pc}
;;;1370   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L13.212|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L13.216|
                          DCD      SPI_DMAReceiveCplt
                  |L13.220|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Receive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_IT PROC
;;;1054     */
;;;1055   HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b410              PUSH     {r4}
;;;1056   {
000002  4613              MOV      r3,r2
;;;1057     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8902051          LDRB     r2,[r0,#0x51]
000008  2a01              CMP      r2,#1
00000a  d14f              BNE      |L14.172|
;;;1058     {
;;;1059       if((pData == NULL) || (Size == 0)) 
00000c  b1d9              CBZ      r1,|L14.70|
00000e  b1d3              CBZ      r3,|L14.70|
;;;1060       {
;;;1061         return  HAL_ERROR;
;;;1062       }
;;;1063   
;;;1064       /* Process Locked */
;;;1065       __HAL_LOCK(hspi);
000010  f8902050          LDRB     r2,[r0,#0x50]
000014  2a01              CMP      r2,#1
000016  d049              BEQ      |L14.172|
000018  2201              MOVS     r2,#1
00001a  f8802050          STRB     r2,[r0,#0x50]
;;;1066   
;;;1067       /* Configure communication */
;;;1068       hspi->State        = HAL_SPI_STATE_BUSY_RX;
00001e  2222              MOVS     r2,#0x22
000020  f8802051          STRB     r2,[r0,#0x51]
;;;1069       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000024  2200              MOVS     r2,#0
000026  6542              STR      r2,[r0,#0x54]
;;;1070   
;;;1071       hspi->RxISR        = &SPI_RxISR;
000028  4c21              LDR      r4,|L14.176|
;;;1072       hspi->pRxBuffPtr   = pData;
;;;1073       hspi->RxXferSize   = Size;
00002a  6484              STR      r4,[r0,#0x48]
00002c  6381              STR      r1,[r0,#0x38]
00002e  8783              STRH     r3,[r0,#0x3c]
;;;1074       hspi->RxXferCount  = Size ; 
000030  87c3              STRH     r3,[r0,#0x3e]
;;;1075   
;;;1076      /*Init field not used in handle to zero */
;;;1077       hspi->TxISR        = 0;
;;;1078       hspi->pTxBuffPtr   = NULL;
000032  64c2              STR      r2,[r0,#0x4c]
;;;1079       hspi->TxXferSize   = 0;
000034  6302              STR      r2,[r0,#0x30]
000036  8682              STRH     r2,[r0,#0x34]
;;;1080       hspi->TxXferCount  = 0;
000038  86c2              STRH     r2,[r0,#0x36]
;;;1081   
;;;1082       /* Configure communication direction : 1Line */
;;;1083       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
00003a  6884              LDR      r4,[r0,#8]
00003c  f5b44f00          CMP      r4,#0x8000
000040  d004              BEQ      |L14.76|
;;;1084       {
;;;1085         SPI_1LINE_RX(hspi);
;;;1086       }
;;;1087       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
000042  b14c              CBZ      r4,|L14.88|
000044  e00c              B        |L14.96|
                  |L14.70|
000046  2001              MOVS     r0,#1                 ;1061
                  |L14.72|
;;;1088       {
;;;1089         /* Process Unlocked */
;;;1090         __HAL_UNLOCK(hspi);
;;;1091   
;;;1092         /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1093         return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
;;;1094       }
;;;1095   
;;;1096       /* Reset CRC Calculation */
;;;1097       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1098       {
;;;1099         SPI_RESET_CRC(hspi);
;;;1100       }
;;;1101   
;;;1102       /* Enable TXE and ERR interrupt */
;;;1103       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;1104   
;;;1105       /* Process Unlocked */
;;;1106       __HAL_UNLOCK(hspi);
;;;1107   
;;;1108       /* Note : The SPI must be enabled after unlocking current process 
;;;1109                 to avoid the risk of SPI interrupt handle execution before current
;;;1110                 process unlock */
;;;1111   
;;;1112       /* Check if the SPI is already enabled */ 
;;;1113       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1114       {
;;;1115         /* Enable SPI peripheral */
;;;1116         __HAL_SPI_ENABLE(hspi);
;;;1117       }
;;;1118   
;;;1119       return HAL_OK;
;;;1120     }
;;;1121     else
;;;1122     {
;;;1123       return HAL_BUSY; 
;;;1124     }
;;;1125   }
000048  bc10              POP      {r4}
00004a  4770              BX       lr
                  |L14.76|
00004c  6801              LDR      r1,[r0,#0]            ;1085
00004e  680b              LDR      r3,[r1,#0]            ;1085
000050  f4234380          BIC      r3,r3,#0x4000         ;1085
000054  600b              STR      r3,[r1,#0]            ;1085
000056  e003              B        |L14.96|
                  |L14.88|
000058  6844              LDR      r4,[r0,#4]            ;1087
00005a  f5b47f82          CMP      r4,#0x104             ;1087
00005e  d004              BEQ      |L14.106|
                  |L14.96|
000060  6a81              LDR      r1,[r0,#0x28]         ;1097
000062  f5b15f00          CMP      r1,#0x2000            ;1097
000066  d006              BEQ      |L14.118|
000068  e00f              B        |L14.138|
                  |L14.106|
00006a  f8802050          STRB     r2,[r0,#0x50]         ;1090
00006e  bc10              POP      {r4}                  ;1093
000070  460a              MOV      r2,r1                 ;1093
000072  f7ffbffe          B.W      HAL_SPI_TransmitReceive_IT
                  |L14.118|
000076  6801              LDR      r1,[r0,#0]            ;1099
000078  680b              LDR      r3,[r1,#0]            ;1099
00007a  f4235300          BIC      r3,r3,#0x2000         ;1099
00007e  600b              STR      r3,[r1,#0]            ;1099
000080  6801              LDR      r1,[r0,#0]            ;1099
000082  680b              LDR      r3,[r1,#0]            ;1099
000084  f4435300          ORR      r3,r3,#0x2000         ;1099
000088  600b              STR      r3,[r1,#0]            ;1099
                  |L14.138|
00008a  6801              LDR      r1,[r0,#0]            ;1103
00008c  684b              LDR      r3,[r1,#4]            ;1103
00008e  f0430360          ORR      r3,r3,#0x60           ;1103
000092  604b              STR      r3,[r1,#4]            ;1103
000094  f8802050          STRB     r2,[r0,#0x50]         ;1106
000098  6800              LDR      r0,[r0,#0]            ;1113
00009a  6801              LDR      r1,[r0,#0]            ;1113
00009c  0649              LSLS     r1,r1,#25             ;1113
00009e  d403              BMI      |L14.168|
0000a0  6801              LDR      r1,[r0,#0]            ;1116
0000a2  f0410140          ORR      r1,r1,#0x40           ;1116
0000a6  6001              STR      r1,[r0,#0]            ;1116
                  |L14.168|
0000a8  2000              MOVS     r0,#0                 ;1119
0000aa  e7cd              B        |L14.72|
                  |L14.172|
0000ac  2002              MOVS     r0,#2                 ;1123
0000ae  e7cb              B        |L14.72|
;;;1126   
                          ENDP

                  |L14.176|
                          DCD      SPI_RxISR

                          AREA ||i.HAL_SPI_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxCpltCallback PROC
;;;1639     */
;;;1640   __WEAK void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1641   {
;;;1642     /* Prevent unused argument(s) compilation warning */
;;;1643     UNUSED(hspi);
;;;1644     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1645               the HAL_SPI_RxCpltCallback() could be implenetd in the user file
;;;1646      */
;;;1647   }
;;;1648   
                          ENDP


                          AREA ||i.HAL_SPI_RxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxHalfCpltCallback PROC
;;;1684     */
;;;1685   __WEAK void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1686   {
;;;1687     /* Prevent unused argument(s) compilation warning */
;;;1688     UNUSED(hspi);
;;;1689     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1690               the HAL_SPI_RxHalfCpltCallback() could be implenetd in the user file
;;;1691      */
;;;1692   }
;;;1693   
                          ENDP


                          AREA ||i.HAL_SPI_Transmit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Transmit PROC
;;;403      */
;;;404    HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;405    {
000004  4604              MOV      r4,r0
;;;406    
;;;407      if(hspi->State == HAL_SPI_STATE_READY)
000006  f8900051          LDRB     r0,[r0,#0x51]
00000a  4698              MOV      r8,r3                 ;405
00000c  2801              CMP      r0,#1
00000e  d170              BNE      |L17.242|
;;;408      {
;;;409        if((pData == NULL ) || (Size == 0)) 
000010  b339              CBZ      r1,|L17.98|
000012  b332              CBZ      r2,|L17.98|
;;;410        {
;;;411          return  HAL_ERROR;
;;;412        }
;;;413    
;;;414        /* Check the parameters */
;;;415        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;416    
;;;417        /* Process Locked */
;;;418        __HAL_LOCK(hspi);
000014  f8940050          LDRB     r0,[r4,#0x50]
000018  2801              CMP      r0,#1
00001a  d06a              BEQ      |L17.242|
00001c  2601              MOVS     r6,#1
00001e  f8846050          STRB     r6,[r4,#0x50]
;;;419    
;;;420        /* Configure communication */
;;;421        hspi->State = HAL_SPI_STATE_BUSY_TX;
000022  2012              MOVS     r0,#0x12
000024  f8840051          STRB     r0,[r4,#0x51]
;;;422        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000028  2500              MOVS     r5,#0
00002a  6565              STR      r5,[r4,#0x54]
;;;423    
;;;424        hspi->pTxBuffPtr  = pData;
;;;425        hspi->TxXferSize  = Size;
00002c  6321              STR      r1,[r4,#0x30]
00002e  86a2              STRH     r2,[r4,#0x34]
;;;426        hspi->TxXferCount = Size;
000030  86e2              STRH     r2,[r4,#0x36]
;;;427    
;;;428        /*Init field not used in handle to zero */
;;;429        hspi->TxISR = 0;
;;;430        hspi->RxISR = 0;
000032  64e5              STR      r5,[r4,#0x4c]
;;;431        hspi->pRxBuffPtr  = NULL;
000034  64a5              STR      r5,[r4,#0x48]
;;;432        hspi->RxXferSize  = 0;
000036  63a5              STR      r5,[r4,#0x38]
000038  87a5              STRH     r5,[r4,#0x3c]
;;;433        hspi->RxXferCount = 0;
00003a  87e5              STRH     r5,[r4,#0x3e]
;;;434    
;;;435        /* Reset CRC Calculation */
;;;436        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  0377              LSLS     r7,r6,#13
000040  42b8              CMP      r0,r7
000042  d109              BNE      |L17.88|
;;;437        {
;;;438          SPI_RESET_CRC(hspi);
000044  6820              LDR      r0,[r4,#0]
000046  6801              LDR      r1,[r0,#0]
000048  f4215100          BIC      r1,r1,#0x2000
00004c  6001              STR      r1,[r0,#0]
00004e  6820              LDR      r0,[r4,#0]
000050  6801              LDR      r1,[r0,#0]
000052  f4415100          ORR      r1,r1,#0x2000
000056  6001              STR      r1,[r0,#0]
                  |L17.88|
;;;439        }
;;;440    
;;;441        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000058  68a0              LDR      r0,[r4,#8]
00005a  f5b04f00          CMP      r0,#0x8000
00005e  d003              BEQ      |L17.104|
000060  e007              B        |L17.114|
                  |L17.98|
000062  2001              MOVS     r0,#1                 ;411
                  |L17.100|
;;;442        {
;;;443          /* Configure communication direction : 1Line */
;;;444          SPI_1LINE_TX(hspi);
;;;445        }
;;;446    
;;;447        /* Check if the SPI is already enabled */ 
;;;448        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;449        {
;;;450          /* Enable SPI peripheral */
;;;451          __HAL_SPI_ENABLE(hspi);
;;;452        }
;;;453    
;;;454        /* Transmit data in 8 Bit mode */
;;;455        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;456        {
;;;457          if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
;;;458          {
;;;459            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;460            hspi->TxXferCount--;
;;;461          }
;;;462    
;;;463          while(hspi->TxXferCount > 0)
;;;464          {
;;;465            /* Wait until TXE flag is set to send data */
;;;466            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;467            { 
;;;468              return HAL_TIMEOUT;
;;;469            }
;;;470            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;471            hspi->TxXferCount--;
;;;472          }
;;;473          /* Enable CRC Transmission */
;;;474          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;475          {
;;;476            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;477          }
;;;478        }
;;;479        /* Transmit data in 16 Bit mode */
;;;480        else
;;;481        {
;;;482          if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
;;;483          {
;;;484            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;485            hspi->pTxBuffPtr+=2;
;;;486            hspi->TxXferCount--;
;;;487          }
;;;488    
;;;489          while(hspi->TxXferCount > 0)
;;;490          {
;;;491            /* Wait until TXE flag is set to send data */
;;;492            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;493            { 
;;;494              return HAL_TIMEOUT;
;;;495            }
;;;496            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;497            hspi->pTxBuffPtr+=2;
;;;498            hspi->TxXferCount--;
;;;499          }
;;;500          /* Enable CRC Transmission */
;;;501          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;502          {
;;;503            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;504          }
;;;505        }
;;;506    
;;;507        /* Wait until TXE flag is set to send data */
;;;508        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;509        {
;;;510          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;511          return HAL_TIMEOUT;
;;;512        }
;;;513    
;;;514        /* Wait until Busy flag is reset before disabling SPI */
;;;515        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;516        { 
;;;517          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;518          return HAL_TIMEOUT;
;;;519        }
;;;520     
;;;521        /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;522        if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;523        {
;;;524          __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;525        }
;;;526    
;;;527        hspi->State = HAL_SPI_STATE_READY; 
;;;528    
;;;529        /* Process Unlocked */
;;;530        __HAL_UNLOCK(hspi);
;;;531    
;;;532        return HAL_OK;
;;;533      }
;;;534      else
;;;535      {
;;;536        return HAL_BUSY;
;;;537      }
;;;538    }
000064  e8bd83f8          POP      {r3-r9,pc}
                  |L17.104|
000068  6820              LDR      r0,[r4,#0]            ;444
00006a  6801              LDR      r1,[r0,#0]            ;444
00006c  f4414180          ORR      r1,r1,#0x4000         ;444
000070  6001              STR      r1,[r0,#0]            ;444
                  |L17.114|
000072  6820              LDR      r0,[r4,#0]            ;448
000074  6801              LDR      r1,[r0,#0]            ;448
000076  0649              LSLS     r1,r1,#25             ;448
000078  d403              BMI      |L17.130|
00007a  6801              LDR      r1,[r0,#0]            ;451
00007c  f0410140          ORR      r1,r1,#0x40           ;451
000080  6001              STR      r1,[r0,#0]            ;451
                  |L17.130|
000082  68e0              LDR      r0,[r4,#0xc]          ;455
000084  2800              CMP      r0,#0                 ;455
000086  6860              LDR      r0,[r4,#4]            ;455
000088  d004              BEQ      |L17.148|
00008a  b1d8              CBZ      r0,|L17.196|
00008c  8ee0              LDRH     r0,[r4,#0x36]         ;482
00008e  2801              CMP      r0,#1                 ;482
000090  d018              BEQ      |L17.196|
000092  e021              B        |L17.216|
                  |L17.148|
000094  b110              CBZ      r0,|L17.156|
000096  8ee0              LDRH     r0,[r4,#0x36]         ;457
000098  2801              CMP      r0,#1                 ;457
00009a  d108              BNE      |L17.174|
                  |L17.156|
00009c  6b20              LDR      r0,[r4,#0x30]         ;459
00009e  1c41              ADDS     r1,r0,#1              ;459
0000a0  6321              STR      r1,[r4,#0x30]         ;459
0000a2  6821              LDR      r1,[r4,#0]            ;459
0000a4  7800              LDRB     r0,[r0,#0]            ;459
0000a6  60c8              STR      r0,[r1,#0xc]          ;459
0000a8  8ee0              LDRH     r0,[r4,#0x36]         ;460
0000aa  1e40              SUBS     r0,r0,#1              ;460
0000ac  86e0              STRH     r0,[r4,#0x36]         ;460
                  |L17.174|
0000ae  0400              LSLS     r0,r0,#16             ;463
0000b0  0c00              LSRS     r0,r0,#16             ;463
0000b2  d01f              BEQ      |L17.244|
0000b4  4643              MOV      r3,r8                 ;466
0000b6  2200              MOVS     r2,#0                 ;466
0000b8  2102              MOVS     r1,#2                 ;466
0000ba  4620              MOV      r0,r4                 ;466
0000bc  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000c0  b9a8              CBNZ     r0,|L17.238|
0000c2  e7eb              B        |L17.156|
                  |L17.196|
0000c4  6b20              LDR      r0,[r4,#0x30]         ;484
0000c6  6821              LDR      r1,[r4,#0]            ;484
0000c8  8800              LDRH     r0,[r0,#0]            ;484
0000ca  60c8              STR      r0,[r1,#0xc]          ;484
0000cc  6b20              LDR      r0,[r4,#0x30]         ;485
0000ce  1c80              ADDS     r0,r0,#2              ;485
0000d0  6320              STR      r0,[r4,#0x30]         ;486
0000d2  8ee0              LDRH     r0,[r4,#0x36]         ;486
0000d4  1e40              SUBS     r0,r0,#1              ;486
0000d6  86e0              STRH     r0,[r4,#0x36]         ;486
                  |L17.216|
0000d8  0400              LSLS     r0,r0,#16             ;489
0000da  0c00              LSRS     r0,r0,#16             ;489
0000dc  d00a              BEQ      |L17.244|
0000de  4643              MOV      r3,r8                 ;492
0000e0  2200              MOVS     r2,#0                 ;492
0000e2  2102              MOVS     r1,#2                 ;492
0000e4  4620              MOV      r0,r4                 ;492
0000e6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000ea  2800              CMP      r0,#0                 ;492
0000ec  d0ea              BEQ      |L17.196|
                  |L17.238|
0000ee  2003              MOVS     r0,#3                 ;494
0000f0  e7b8              B        |L17.100|
                  |L17.242|
0000f2  e026              B        |L17.322|
                  |L17.244|
0000f4  6aa0              LDR      r0,[r4,#0x28]         ;501
0000f6  42b8              CMP      r0,r7                 ;501
0000f8  d104              BNE      |L17.260|
0000fa  6820              LDR      r0,[r4,#0]            ;503
0000fc  6801              LDR      r1,[r0,#0]            ;503
0000fe  f4415180          ORR      r1,r1,#0x1000         ;503
000102  6001              STR      r1,[r0,#0]            ;503
                  |L17.260|
000104  4643              MOV      r3,r8                 ;508
000106  2200              MOVS     r2,#0                 ;508
000108  2102              MOVS     r1,#2                 ;508
00010a  4620              MOV      r0,r4                 ;508
00010c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000110  b930              CBNZ     r0,|L17.288|
000112  4643              MOV      r3,r8                 ;515
000114  2201              MOVS     r2,#1                 ;515
000116  2180              MOVS     r1,#0x80              ;515
000118  4620              MOV      r0,r4                 ;515
00011a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00011e  b120              CBZ      r0,|L17.298|
                  |L17.288|
000120  6d60              LDR      r0,[r4,#0x54]         ;517
000122  f0400010          ORR      r0,r0,#0x10           ;517
000126  6560              STR      r0,[r4,#0x54]         ;517
000128  e7e1              B        |L17.238|
                  |L17.298|
00012a  68a0              LDR      r0,[r4,#8]            ;522
00012c  b918              CBNZ     r0,|L17.310|
00012e  6820              LDR      r0,[r4,#0]            ;524
000130  68c1              LDR      r1,[r0,#0xc]          ;524
000132  6880              LDR      r0,[r0,#8]            ;524
000134  9000              STR      r0,[sp,#0]            ;524
                  |L17.310|
000136  f8846051          STRB     r6,[r4,#0x51]         ;527
00013a  f8845050          STRB     r5,[r4,#0x50]         ;530
00013e  2000              MOVS     r0,#0                 ;532
000140  e790              B        |L17.100|
                  |L17.322|
000142  2002              MOVS     r0,#2                 ;536
000144  e78e              B        |L17.100|
;;;539    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TransmitReceive PROC
;;;732      */
;;;733    HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;734    {
;;;735      __IO uint16_t tmpreg = 0;
000004  2500              MOVS     r5,#0
000006  f8dd8020          LDR      r8,[sp,#0x20]
00000a  4604              MOV      r4,r0                 ;734
00000c  f8ad5000          STRH     r5,[sp,#0]
;;;736    
;;;737      if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
000010  f8900051          LDRB     r0,[r0,#0x51]
000014  2801              CMP      r0,#1
000016  d003              BEQ      |L18.32|
000018  f8940051          LDRB     r0,[r4,#0x51]
00001c  2822              CMP      r0,#0x22
00001e  d17d              BNE      |L18.284|
                  |L18.32|
;;;738      {
;;;739        if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
000020  b169              CBZ      r1,|L18.62|
000022  b162              CBZ      r2,|L18.62|
000024  b15b              CBZ      r3,|L18.62|
;;;740        {
;;;741          return  HAL_ERROR;
;;;742        }
;;;743    
;;;744        /* Check the parameters */
;;;745        assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;746    
;;;747        /* Process Locked */
;;;748        __HAL_LOCK(hspi);
000026  f8940050          LDRB     r0,[r4,#0x50]
00002a  2801              CMP      r0,#1
00002c  d076              BEQ      |L18.284|
00002e  2601              MOVS     r6,#1
000030  f8846050          STRB     r6,[r4,#0x50]
;;;749     
;;;750        /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;751        if(hspi->State == HAL_SPI_STATE_READY)
000034  f8940051          LDRB     r0,[r4,#0x51]
000038  2801              CMP      r0,#1
00003a  d003              BEQ      |L18.68|
00003c  e005              B        |L18.74|
                  |L18.62|
00003e  2001              MOVS     r0,#1                 ;741
                  |L18.64|
;;;752        {
;;;753          hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;754        }
;;;755    
;;;756         /* Configure communication */   
;;;757        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;758    
;;;759        hspi->pRxBuffPtr  = pRxData;
;;;760        hspi->RxXferSize  = Size;
;;;761        hspi->RxXferCount = Size;  
;;;762        
;;;763        hspi->pTxBuffPtr  = pTxData;
;;;764        hspi->TxXferSize  = Size; 
;;;765        hspi->TxXferCount = Size;
;;;766    
;;;767        /*Init field not used in handle to zero */
;;;768        hspi->RxISR = 0;
;;;769        hspi->TxISR = 0;
;;;770    
;;;771        /* Reset CRC Calculation */
;;;772        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;773        {
;;;774          SPI_RESET_CRC(hspi);
;;;775        }
;;;776    
;;;777        /* Check if the SPI is already enabled */ 
;;;778        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;779        {
;;;780          /* Enable SPI peripheral */
;;;781          __HAL_SPI_ENABLE(hspi);
;;;782        }
;;;783    
;;;784        /* Transmit and Receive data in 16 Bit mode */
;;;785        if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;786        {
;;;787          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;788          {
;;;789            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;790            hspi->pTxBuffPtr+=2;
;;;791            hspi->TxXferCount--;
;;;792          }
;;;793          if(hspi->TxXferCount == 0)
;;;794          {
;;;795            /* Enable CRC Transmission */
;;;796            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;797            {
;;;798              SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;799            }
;;;800    
;;;801            /* Wait until RXNE flag is set */
;;;802            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;803            { 
;;;804              return HAL_TIMEOUT;
;;;805            }
;;;806    
;;;807            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;808            hspi->pRxBuffPtr+=2;
;;;809            hspi->RxXferCount--;
;;;810          }
;;;811          else
;;;812          {
;;;813            while(hspi->TxXferCount > 0)
;;;814            {
;;;815              /* Wait until TXE flag is set to send data */
;;;816              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;817              { 
;;;818                return HAL_TIMEOUT;
;;;819              }
;;;820    
;;;821              hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;822              hspi->pTxBuffPtr+=2;
;;;823              hspi->TxXferCount--;
;;;824    
;;;825              /* Enable CRC Transmission */
;;;826              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;827              {
;;;828                SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;829              }
;;;830    
;;;831              /* Wait until RXNE flag is set */
;;;832              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;833              { 
;;;834                return HAL_TIMEOUT;
;;;835              }
;;;836    
;;;837              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;838              hspi->pRxBuffPtr+=2;
;;;839              hspi->RxXferCount--;
;;;840            }
;;;841            /* Receive the last byte */
;;;842            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;843            {
;;;844              /* Wait until RXNE flag is set */
;;;845              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;846              {
;;;847                return HAL_TIMEOUT;
;;;848              }
;;;849              
;;;850              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;851              hspi->pRxBuffPtr+=2;
;;;852              hspi->RxXferCount--;
;;;853            }
;;;854          }
;;;855        }
;;;856        /* Transmit and Receive data in 8 Bit mode */
;;;857        else
;;;858        {
;;;859          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;860          {
;;;861            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;862            hspi->TxXferCount--;
;;;863          }
;;;864          if(hspi->TxXferCount == 0)
;;;865          {
;;;866            /* Enable CRC Transmission */
;;;867            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;868            {
;;;869              SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;870            }
;;;871    
;;;872            /* Wait until RXNE flag is set */
;;;873            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;874            {
;;;875              return HAL_TIMEOUT;
;;;876            }
;;;877    
;;;878            (*hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;879            hspi->RxXferCount--;
;;;880          }
;;;881          else
;;;882          {
;;;883            while(hspi->TxXferCount > 0)
;;;884            {
;;;885              /* Wait until TXE flag is set to send data */
;;;886              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;887              {
;;;888                return HAL_TIMEOUT;
;;;889              }
;;;890    
;;;891              hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;892              hspi->TxXferCount--;
;;;893    
;;;894              /* Enable CRC Transmission */
;;;895              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;896              {
;;;897                SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;898              }
;;;899    
;;;900              /* Wait until RXNE flag is set */
;;;901              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;902              {
;;;903                return HAL_TIMEOUT;
;;;904              }
;;;905    
;;;906              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;907              hspi->RxXferCount--;
;;;908            }
;;;909            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;910            {
;;;911              /* Wait until RXNE flag is set */
;;;912              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;913              {
;;;914                return HAL_TIMEOUT;
;;;915              }
;;;916              
;;;917              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;918              hspi->RxXferCount--;
;;;919            }
;;;920          }
;;;921        }
;;;922    
;;;923        /* Read CRC from DR to close CRC calculation process */
;;;924        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;925        {
;;;926          /* Wait until RXNE flag is set */
;;;927          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;928          {
;;;929            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;930            return HAL_TIMEOUT;
;;;931          }
;;;932          /* Read CRC */
;;;933          tmpreg = hspi->Instance->DR;
;;;934          UNUSED(tmpreg);
;;;935        }
;;;936    
;;;937        /* Wait until Busy flag is reset before disabling SPI */
;;;938        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;939        {
;;;940          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;941          return HAL_TIMEOUT;
;;;942        }
;;;943        
;;;944        hspi->State = HAL_SPI_STATE_READY;
;;;945    
;;;946        /* Check if CRC error occurred */
;;;947        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
;;;948        {
;;;949          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;950    
;;;951          SPI_RESET_CRC(hspi);
;;;952    
;;;953          /* Process Unlocked */
;;;954          __HAL_UNLOCK(hspi);
;;;955          
;;;956          return HAL_ERROR; 
;;;957        }
;;;958    
;;;959        /* Process Unlocked */
;;;960        __HAL_UNLOCK(hspi);
;;;961    
;;;962        return HAL_OK;
;;;963      }
;;;964      else
;;;965      {
;;;966        return HAL_BUSY;
;;;967      }
;;;968    }
000040  e8bd83f8          POP      {r3-r9,pc}
                  |L18.68|
000044  2032              MOVS     r0,#0x32              ;753
000046  f8840051          STRB     r0,[r4,#0x51]         ;753
                  |L18.74|
00004a  6565              STR      r5,[r4,#0x54]         ;757
00004c  63a2              STR      r2,[r4,#0x38]         ;760
00004e  87a3              STRH     r3,[r4,#0x3c]         ;760
000050  87e3              STRH     r3,[r4,#0x3e]         ;761
000052  6321              STR      r1,[r4,#0x30]         ;764
000054  86a3              STRH     r3,[r4,#0x34]         ;764
000056  86e3              STRH     r3,[r4,#0x36]         ;765
000058  64a5              STR      r5,[r4,#0x48]         ;769
00005a  64e5              STR      r5,[r4,#0x4c]         ;772
00005c  6aa0              LDR      r0,[r4,#0x28]         ;772
00005e  f44f5700          MOV      r7,#0x2000            ;772
000062  42b8              CMP      r0,r7                 ;772
000064  d109              BNE      |L18.122|
000066  6820              LDR      r0,[r4,#0]            ;774
000068  6801              LDR      r1,[r0,#0]            ;774
00006a  f4215100          BIC      r1,r1,#0x2000         ;774
00006e  6001              STR      r1,[r0,#0]            ;774
000070  6820              LDR      r0,[r4,#0]            ;774
000072  6801              LDR      r1,[r0,#0]            ;774
000074  f4415100          ORR      r1,r1,#0x2000         ;774
000078  6001              STR      r1,[r0,#0]            ;774
                  |L18.122|
00007a  6820              LDR      r0,[r4,#0]            ;778
00007c  6801              LDR      r1,[r0,#0]            ;778
00007e  0649              LSLS     r1,r1,#25             ;778
000080  d403              BMI      |L18.138|
000082  6801              LDR      r1,[r0,#0]            ;781
000084  f0410140          ORR      r1,r1,#0x40           ;781
000088  6001              STR      r1,[r0,#0]            ;781
                  |L18.138|
00008a  68e0              LDR      r0,[r4,#0xc]          ;785
00008c  f44f7182          MOV      r1,#0x104             ;787
000090  f5b06f00          CMP      r0,#0x800             ;785
000094  6860              LDR      r0,[r4,#4]            ;785
000096  d007              BEQ      |L18.168|
000098  2800              CMP      r0,#0                 ;859
00009a  d067              BEQ      |L18.364|
00009c  4288              CMP      r0,r1                 ;859
00009e  d16e              BNE      |L18.382|
0000a0  8ee0              LDRH     r0,[r4,#0x36]         ;859
0000a2  2801              CMP      r0,#1                 ;859
0000a4  d062              BEQ      |L18.364|
0000a6  e06a              B        |L18.382|
                  |L18.168|
0000a8  b120              CBZ      r0,|L18.180|
0000aa  4288              CMP      r0,r1                 ;787
0000ac  d10c              BNE      |L18.200|
0000ae  8ee0              LDRH     r0,[r4,#0x36]         ;787
0000b0  2801              CMP      r0,#1                 ;787
0000b2  d109              BNE      |L18.200|
                  |L18.180|
0000b4  6b20              LDR      r0,[r4,#0x30]         ;789
0000b6  6821              LDR      r1,[r4,#0]            ;789
0000b8  8800              LDRH     r0,[r0,#0]            ;789
0000ba  60c8              STR      r0,[r1,#0xc]          ;789
0000bc  6b20              LDR      r0,[r4,#0x30]         ;790
0000be  1c80              ADDS     r0,r0,#2              ;790
0000c0  6320              STR      r0,[r4,#0x30]         ;791
0000c2  8ee0              LDRH     r0,[r4,#0x36]         ;791
0000c4  1e40              SUBS     r0,r0,#1              ;791
0000c6  86e0              STRH     r0,[r4,#0x36]         ;791
                  |L18.200|
0000c8  8ee0              LDRH     r0,[r4,#0x36]         ;793
0000ca  b980              CBNZ     r0,|L18.238|
0000cc  6aa0              LDR      r0,[r4,#0x28]         ;796
0000ce  42b8              CMP      r0,r7                 ;796
0000d0  d144              BNE      |L18.348|
0000d2  6820              LDR      r0,[r4,#0]            ;798
0000d4  6801              LDR      r1,[r0,#0]            ;798
0000d6  f4415180          ORR      r1,r1,#0x1000         ;798
0000da  6001              STR      r1,[r0,#0]            ;798
0000dc  e03e              B        |L18.348|
                  |L18.222|
0000de  6820              LDR      r0,[r4,#0]            ;807
0000e0  68c0              LDR      r0,[r0,#0xc]          ;807
0000e2  6ba1              LDR      r1,[r4,#0x38]         ;807
0000e4  8008              STRH     r0,[r1,#0]            ;807
0000e6  6ba0              LDR      r0,[r4,#0x38]         ;808
0000e8  1c80              ADDS     r0,r0,#2              ;808
0000ea  63a0              STR      r0,[r4,#0x38]         ;809
0000ec  e09e              B        |L18.556|
                  |L18.238|
0000ee  4643              MOV      r3,r8                 ;816
0000f0  2200              MOVS     r2,#0                 ;816
0000f2  2102              MOVS     r1,#2                 ;816
0000f4  4620              MOV      r0,r4                 ;816
0000f6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000fa  2800              CMP      r0,#0                 ;816
0000fc  d174              BNE      |L18.488|
0000fe  6b20              LDR      r0,[r4,#0x30]         ;821
000100  6821              LDR      r1,[r4,#0]            ;821
000102  8800              LDRH     r0,[r0,#0]            ;821
000104  60c8              STR      r0,[r1,#0xc]          ;821
000106  6b20              LDR      r0,[r4,#0x30]         ;822
000108  1c80              ADDS     r0,r0,#2              ;822
00010a  6320              STR      r0,[r4,#0x30]         ;823
00010c  8ee0              LDRH     r0,[r4,#0x36]         ;823
00010e  1e40              SUBS     r0,r0,#1              ;823
000110  0400              LSLS     r0,r0,#16             ;823
000112  0c00              LSRS     r0,r0,#16             ;823
000114  86e0              STRH     r0,[r4,#0x36]         ;823
000116  d109              BNE      |L18.300|
000118  6aa0              LDR      r0,[r4,#0x28]         ;826
00011a  e000              B        |L18.286|
                  |L18.284|
00011c  e0c7              B        |L18.686|
                  |L18.286|
00011e  42b8              CMP      r0,r7                 ;826
000120  d104              BNE      |L18.300|
000122  6820              LDR      r0,[r4,#0]            ;828
000124  6801              LDR      r1,[r0,#0]            ;828
000126  f4415180          ORR      r1,r1,#0x1000         ;828
00012a  6001              STR      r1,[r0,#0]            ;828
                  |L18.300|
00012c  4643              MOV      r3,r8                 ;832
00012e  2200              MOVS     r2,#0                 ;832
000130  2101              MOVS     r1,#1                 ;832
000132  4620              MOV      r0,r4                 ;832
000134  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000138  2800              CMP      r0,#0                 ;832
00013a  d16f              BNE      |L18.540|
00013c  6820              LDR      r0,[r4,#0]            ;837
00013e  68c0              LDR      r0,[r0,#0xc]          ;837
000140  6ba1              LDR      r1,[r4,#0x38]         ;837
000142  8008              STRH     r0,[r1,#0]            ;837
000144  6ba0              LDR      r0,[r4,#0x38]         ;838
000146  1c80              ADDS     r0,r0,#2              ;838
000148  63a0              STR      r0,[r4,#0x38]         ;839
00014a  8fe0              LDRH     r0,[r4,#0x3e]         ;839
00014c  1e40              SUBS     r0,r0,#1              ;839
00014e  87e0              STRH     r0,[r4,#0x3e]         ;839
000150  8ee0              LDRH     r0,[r4,#0x36]         ;813
000152  2800              CMP      r0,#0                 ;839
000154  d1cb              BNE      |L18.238|
000156  6860              LDR      r0,[r4,#4]            ;842
000158  2800              CMP      r0,#0                 ;842
00015a  d16a              BNE      |L18.562|
                  |L18.348|
00015c  4643              MOV      r3,r8                 ;845
00015e  2200              MOVS     r2,#0                 ;845
000160  2101              MOVS     r1,#1                 ;845
000162  4620              MOV      r0,r4                 ;845
000164  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000168  bbf0              CBNZ     r0,|L18.488|
00016a  e7b8              B        |L18.222|
                  |L18.364|
00016c  6b20              LDR      r0,[r4,#0x30]         ;861
00016e  1c41              ADDS     r1,r0,#1              ;861
000170  6321              STR      r1,[r4,#0x30]         ;861
000172  6821              LDR      r1,[r4,#0]            ;861
000174  7800              LDRB     r0,[r0,#0]            ;861
000176  60c8              STR      r0,[r1,#0xc]          ;861
000178  8ee0              LDRH     r0,[r4,#0x36]         ;862
00017a  1e40              SUBS     r0,r0,#1              ;862
00017c  86e0              STRH     r0,[r4,#0x36]         ;862
                  |L18.382|
00017e  8ee0              LDRH     r0,[r4,#0x36]         ;864
000180  b998              CBNZ     r0,|L18.426|
000182  6aa0              LDR      r0,[r4,#0x28]         ;867
000184  42b8              CMP      r0,r7                 ;867
000186  d104              BNE      |L18.402|
000188  6820              LDR      r0,[r4,#0]            ;869
00018a  6801              LDR      r1,[r0,#0]            ;869
00018c  f4415180          ORR      r1,r1,#0x1000         ;869
000190  6001              STR      r1,[r0,#0]            ;869
                  |L18.402|
000192  4643              MOV      r3,r8                 ;873
000194  2200              MOVS     r2,#0                 ;873
000196  2101              MOVS     r1,#1                 ;873
000198  4620              MOV      r0,r4                 ;873
00019a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00019e  bb18              CBNZ     r0,|L18.488|
0001a0  6820              LDR      r0,[r4,#0]            ;878
0001a2  68c0              LDR      r0,[r0,#0xc]          ;878
0001a4  6ba1              LDR      r1,[r4,#0x38]         ;878
0001a6  7008              STRB     r0,[r1,#0]            ;878
0001a8  e040              B        |L18.556|
                  |L18.426|
0001aa  4643              MOV      r3,r8                 ;886
0001ac  2200              MOVS     r2,#0                 ;886
0001ae  2102              MOVS     r1,#2                 ;886
0001b0  4620              MOV      r0,r4                 ;886
0001b2  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001b6  b9b8              CBNZ     r0,|L18.488|
0001b8  6b20              LDR      r0,[r4,#0x30]         ;891
0001ba  1c41              ADDS     r1,r0,#1              ;891
0001bc  6321              STR      r1,[r4,#0x30]         ;891
0001be  6821              LDR      r1,[r4,#0]            ;891
0001c0  7800              LDRB     r0,[r0,#0]            ;891
0001c2  60c8              STR      r0,[r1,#0xc]          ;891
0001c4  8ee0              LDRH     r0,[r4,#0x36]         ;892
0001c6  1e40              SUBS     r0,r0,#1              ;892
0001c8  0400              LSLS     r0,r0,#16             ;892
0001ca  0c00              LSRS     r0,r0,#16             ;892
0001cc  86e0              STRH     r0,[r4,#0x36]         ;892
0001ce  d107              BNE      |L18.480|
0001d0  6aa0              LDR      r0,[r4,#0x28]         ;895
0001d2  42b8              CMP      r0,r7                 ;895
0001d4  d104              BNE      |L18.480|
0001d6  6820              LDR      r0,[r4,#0]            ;897
0001d8  6801              LDR      r1,[r0,#0]            ;897
0001da  f4415180          ORR      r1,r1,#0x1000         ;897
0001de  6001              STR      r1,[r0,#0]            ;897
                  |L18.480|
0001e0  2200              MOVS     r2,#0                 ;901
0001e2  4643              MOV      r3,r8                 ;901
0001e4  2101              MOVS     r1,#1                 ;901
0001e6  e000              B        |L18.490|
                  |L18.488|
0001e8  e018              B        |L18.540|
                  |L18.490|
0001ea  4620              MOV      r0,r4                 ;901
0001ec  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001f0  b9a0              CBNZ     r0,|L18.540|
0001f2  6820              LDR      r0,[r4,#0]            ;906
0001f4  68c1              LDR      r1,[r0,#0xc]          ;906
0001f6  6ba0              LDR      r0,[r4,#0x38]         ;906
0001f8  1c42              ADDS     r2,r0,#1              ;906
0001fa  63a2              STR      r2,[r4,#0x38]         ;906
0001fc  7001              STRB     r1,[r0,#0]            ;906
0001fe  8fe0              LDRH     r0,[r4,#0x3e]         ;907
000200  1e40              SUBS     r0,r0,#1              ;907
000202  87e0              STRH     r0,[r4,#0x3e]         ;907
000204  8ee0              LDRH     r0,[r4,#0x36]         ;883
000206  2800              CMP      r0,#0                 ;907
000208  d1cf              BNE      |L18.426|
00020a  6860              LDR      r0,[r4,#4]            ;909
00020c  b988              CBNZ     r0,|L18.562|
00020e  4643              MOV      r3,r8                 ;912
000210  2200              MOVS     r2,#0                 ;912
000212  2101              MOVS     r1,#1                 ;912
000214  4620              MOV      r0,r4                 ;912
000216  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00021a  b108              CBZ      r0,|L18.544|
                  |L18.540|
00021c  2003              MOVS     r0,#3                 ;914
00021e  e70f              B        |L18.64|
                  |L18.544|
000220  6820              LDR      r0,[r4,#0]            ;917
000222  68c1              LDR      r1,[r0,#0xc]          ;917
000224  6ba0              LDR      r0,[r4,#0x38]         ;917
000226  1c42              ADDS     r2,r0,#1              ;917
000228  63a2              STR      r2,[r4,#0x38]         ;917
00022a  7001              STRB     r1,[r0,#0]            ;917
                  |L18.556|
00022c  8fe0              LDRH     r0,[r4,#0x3e]         ;918
00022e  1e40              SUBS     r0,r0,#1              ;918
000230  87e0              STRH     r0,[r4,#0x3e]         ;918
                  |L18.562|
000232  6aa0              LDR      r0,[r4,#0x28]         ;924
000234  42b8              CMP      r0,r7                 ;924
000236  d110              BNE      |L18.602|
000238  4643              MOV      r3,r8                 ;927
00023a  2200              MOVS     r2,#0                 ;927
00023c  2101              MOVS     r1,#1                 ;927
00023e  4620              MOV      r0,r4                 ;927
000240  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000244  b118              CBZ      r0,|L18.590|
000246  6d60              LDR      r0,[r4,#0x54]         ;929
000248  f0400002          ORR      r0,r0,#2              ;929
00024c  e00f              B        |L18.622|
                  |L18.590|
00024e  6820              LDR      r0,[r4,#0]            ;933
000250  68c0              LDR      r0,[r0,#0xc]          ;933
000252  f8ad0000          STRH     r0,[sp,#0]            ;933
000256  f8bd0000          LDRH     r0,[sp,#0]            ;934
                  |L18.602|
00025a  4643              MOV      r3,r8                 ;938
00025c  2201              MOVS     r2,#1                 ;938
00025e  2180              MOVS     r1,#0x80              ;938
000260  4620              MOV      r0,r4                 ;938
000262  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000266  b120              CBZ      r0,|L18.626|
000268  6d60              LDR      r0,[r4,#0x54]         ;940
00026a  f0400010          ORR      r0,r0,#0x10           ;940
                  |L18.622|
00026e  6560              STR      r0,[r4,#0x54]         ;940
000270  e7d4              B        |L18.540|
                  |L18.626|
000272  f8846051          STRB     r6,[r4,#0x51]         ;944
000276  6aa0              LDR      r0,[r4,#0x28]         ;947
000278  42b8              CMP      r0,r7                 ;947
00027a  d114              BNE      |L18.678|
00027c  6820              LDR      r0,[r4,#0]            ;947
00027e  6881              LDR      r1,[r0,#8]            ;947
000280  43c9              MVNS     r1,r1                 ;947
000282  06c9              LSLS     r1,r1,#27             ;947
000284  d40f              BMI      |L18.678|
000286  6d61              LDR      r1,[r4,#0x54]         ;949
000288  f0410102          ORR      r1,r1,#2              ;949
00028c  6561              STR      r1,[r4,#0x54]         ;949
00028e  6801              LDR      r1,[r0,#0]            ;951
000290  f4215100          BIC      r1,r1,#0x2000         ;951
000294  6001              STR      r1,[r0,#0]            ;951
000296  6820              LDR      r0,[r4,#0]            ;951
000298  6801              LDR      r1,[r0,#0]            ;951
00029a  f4415100          ORR      r1,r1,#0x2000         ;951
00029e  6001              STR      r1,[r0,#0]            ;951
0002a0  f8845050          STRB     r5,[r4,#0x50]         ;954
0002a4  e6cb              B        |L18.62|
                  |L18.678|
0002a6  f8845050          STRB     r5,[r4,#0x50]         ;960
0002aa  2000              MOVS     r0,#0                 ;962
0002ac  e6c8              B        |L18.64|
                  |L18.686|
0002ae  2002              MOVS     r0,#2                 ;966
0002b0  e6c6              B        |L18.64|
;;;969    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_DMA PROC
;;;1380     */
;;;1381   HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1382   {
000002  4604              MOV      r4,r0
;;;1383     if((hspi->State == HAL_SPI_STATE_READY) || \
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d00a              BEQ      |L19.34|
;;;1384        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX)))
00000c  6860              LDR      r0,[r4,#4]
00000e  f5b07f82          CMP      r0,#0x104
000012  d171              BNE      |L19.248|
000014  68a0              LDR      r0,[r4,#8]
000016  2800              CMP      r0,#0
000018  d16e              BNE      |L19.248|
00001a  f8940051          LDRB     r0,[r4,#0x51]
00001e  2822              CMP      r0,#0x22
000020  d16a              BNE      |L19.248|
                  |L19.34|
;;;1385     {
;;;1386       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
000022  b1f1              CBZ      r1,|L19.98|
000024  b1ea              CBZ      r2,|L19.98|
000026  b1e3              CBZ      r3,|L19.98|
;;;1387       {
;;;1388         return  HAL_ERROR;
;;;1389       }
;;;1390   
;;;1391       /* Check the parameters */
;;;1392       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1393       
;;;1394       /* Process locked */
;;;1395       __HAL_LOCK(hspi);
000028  f8940050          LDRB     r0,[r4,#0x50]
00002c  2801              CMP      r0,#1
00002e  d063              BEQ      |L19.248|
000030  2001              MOVS     r0,#1
000032  f8840050          STRB     r0,[r4,#0x50]
;;;1396   
;;;1397       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1398       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
000036  f8940051          LDRB     r0,[r4,#0x51]
00003a  2822              CMP      r0,#0x22
00003c  d002              BEQ      |L19.68|
;;;1399       {
;;;1400         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
00003e  2032              MOVS     r0,#0x32
000040  f8840051          STRB     r0,[r4,#0x51]
                  |L19.68|
;;;1401       }
;;;1402   
;;;1403       /* Configure communication */
;;;1404       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000044  2500              MOVS     r5,#0
000046  6565              STR      r5,[r4,#0x54]
;;;1405   
;;;1406       hspi->pTxBuffPtr  = (uint8_t*)pTxData;
;;;1407       hspi->TxXferSize  = Size;
000048  6321              STR      r1,[r4,#0x30]
00004a  86a3              STRH     r3,[r4,#0x34]
;;;1408       hspi->TxXferCount = Size;
00004c  86e3              STRH     r3,[r4,#0x36]
;;;1409   
;;;1410       hspi->pRxBuffPtr  = (uint8_t*)pRxData;
;;;1411       hspi->RxXferSize  = Size;
00004e  63a2              STR      r2,[r4,#0x38]
000050  87a3              STRH     r3,[r4,#0x3c]
;;;1412       hspi->RxXferCount = Size;
000052  87e3              STRH     r3,[r4,#0x3e]
;;;1413   
;;;1414       /*Init field not used in handle to zero */
;;;1415       hspi->RxISR = 0;
;;;1416       hspi->TxISR = 0;
000054  64a5              STR      r5,[r4,#0x48]
;;;1417   
;;;1418       /* Reset CRC Calculation */
;;;1419       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000056  64e5              STR      r5,[r4,#0x4c]
000058  6aa0              LDR      r0,[r4,#0x28]
00005a  f5b05f00          CMP      r0,#0x2000
00005e  d002              BEQ      |L19.102|
000060  e00b              B        |L19.122|
                  |L19.98|
000062  2001              MOVS     r0,#1                 ;1388
;;;1420       {
;;;1421         SPI_RESET_CRC(hspi);
;;;1422       }
;;;1423   
;;;1424       /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
;;;1425       if(hspi->State == HAL_SPI_STATE_BUSY_RX)
;;;1426       {
;;;1427         /* Set the SPI Rx DMA Half transfer complete callback */
;;;1428         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1429         
;;;1430         hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1431       }
;;;1432       else
;;;1433       {
;;;1434         /* Set the SPI Tx/Rx DMA Half transfer complete callback */
;;;1435         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1436     
;;;1437         hspi->hdmarx->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1438       }
;;;1439   
;;;1440       /* Set the DMA error callback */
;;;1441       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1442   
;;;1443       /* Enable the Rx DMA Channel */
;;;1444       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1445   
;;;1446       /* Enable Rx DMA Request */  
;;;1447       SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1448   
;;;1449       /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
;;;1450       is performed in DMA reception complete callback  */
;;;1451       if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1452       {
;;;1453         /* Set the DMA error callback */
;;;1454         hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1455       }
;;;1456       else
;;;1457       {
;;;1458         hspi->hdmatx->XferErrorCallback = NULL;
;;;1459       }
;;;1460       
;;;1461       /* Enable the Tx DMA Channel */
;;;1462       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1463   
;;;1464       /* Check if the SPI is already enabled */ 
;;;1465       if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1466       {
;;;1467         /* Enable SPI peripheral */
;;;1468         __HAL_SPI_ENABLE(hspi);
;;;1469       }
;;;1470   
;;;1471       /* Enable Tx DMA Request */  
;;;1472       SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1473   
;;;1474       /* Process Unlocked */
;;;1475       __HAL_UNLOCK(hspi);
;;;1476   
;;;1477       return HAL_OK;
;;;1478     }
;;;1479     else
;;;1480     {
;;;1481       return HAL_BUSY;
;;;1482     }
;;;1483   }
000064  bd70              POP      {r4-r6,pc}
                  |L19.102|
000066  6820              LDR      r0,[r4,#0]            ;1421
000068  6801              LDR      r1,[r0,#0]            ;1421
00006a  f4215100          BIC      r1,r1,#0x2000         ;1421
00006e  6001              STR      r1,[r0,#0]            ;1421
000070  6820              LDR      r0,[r4,#0]            ;1421
000072  6801              LDR      r1,[r0,#0]            ;1421
000074  f4415100          ORR      r1,r1,#0x2000         ;1421
000078  6001              STR      r1,[r0,#0]            ;1421
                  |L19.122|
00007a  f8940051          LDRB     r0,[r4,#0x51]         ;1425
00007e  2822              CMP      r0,#0x22              ;1425
000080  d032              BEQ      |L19.232|
000082  6c61              LDR      r1,[r4,#0x44]         ;1435
000084  481d              LDR      r0,|L19.252|
000086  62c8              STR      r0,[r1,#0x2c]         ;1437
000088  481d              LDR      r0,|L19.256|
                  |L19.138|
00008a  6c61              LDR      r1,[r4,#0x44]         ;1437
00008c  4e1d              LDR      r6,|L19.260|
00008e  6288              STR      r0,[r1,#0x28]         ;1441
000090  6c60              LDR      r0,[r4,#0x44]         ;1441
000092  6306              STR      r6,[r0,#0x30]         ;1444
000094  6821              LDR      r1,[r4,#0]            ;1444
000096  8fe3              LDRH     r3,[r4,#0x3e]         ;1444
000098  310c              ADDS     r1,r1,#0xc            ;1444
00009a  6ba2              LDR      r2,[r4,#0x38]         ;1444
00009c  6c60              LDR      r0,[r4,#0x44]         ;1444
00009e  f7fffffe          BL       HAL_DMA_Start_IT
0000a2  6820              LDR      r0,[r4,#0]            ;1447
0000a4  6841              LDR      r1,[r0,#4]            ;1447
0000a6  f0410101          ORR      r1,r1,#1              ;1447
0000aa  6041              STR      r1,[r0,#4]            ;1447
0000ac  f8940051          LDRB     r0,[r4,#0x51]         ;1451
0000b0  2832              CMP      r0,#0x32              ;1451
0000b2  6c20              LDR      r0,[r4,#0x40]         ;1451
0000b4  d01e              BEQ      |L19.244|
0000b6  6305              STR      r5,[r0,#0x30]         ;1458
                  |L19.184|
0000b8  6822              LDR      r2,[r4,#0]            ;1462
0000ba  8ee3              LDRH     r3,[r4,#0x36]         ;1462
0000bc  320c              ADDS     r2,r2,#0xc            ;1462
0000be  6b21              LDR      r1,[r4,#0x30]         ;1462
0000c0  6c20              LDR      r0,[r4,#0x40]         ;1462
0000c2  f7fffffe          BL       HAL_DMA_Start_IT
0000c6  6820              LDR      r0,[r4,#0]            ;1465
0000c8  6801              LDR      r1,[r0,#0]            ;1465
0000ca  0649              LSLS     r1,r1,#25             ;1465
0000cc  d403              BMI      |L19.214|
0000ce  6801              LDR      r1,[r0,#0]            ;1468
0000d0  f0410140          ORR      r1,r1,#0x40           ;1468
0000d4  6001              STR      r1,[r0,#0]            ;1468
                  |L19.214|
0000d6  6820              LDR      r0,[r4,#0]            ;1472
0000d8  6841              LDR      r1,[r0,#4]            ;1472
0000da  f0410102          ORR      r1,r1,#2              ;1472
0000de  6041              STR      r1,[r0,#4]            ;1472
0000e0  f8845050          STRB     r5,[r4,#0x50]         ;1475
0000e4  2000              MOVS     r0,#0                 ;1477
0000e6  bd70              POP      {r4-r6,pc}
                  |L19.232|
0000e8  6c61              LDR      r1,[r4,#0x44]         ;1428
0000ea  4807              LDR      r0,|L19.264|
0000ec  62c8              STR      r0,[r1,#0x2c]         ;1430
0000ee  4807              LDR      r0,|L19.268|
0000f0  e7cb              B        |L19.138|
0000f2  e001              B        |L19.248|
                  |L19.244|
0000f4  6306              STR      r6,[r0,#0x30]         ;1454
0000f6  e7df              B        |L19.184|
                  |L19.248|
0000f8  2002              MOVS     r0,#2                 ;1481
0000fa  bd70              POP      {r4-r6,pc}
;;;1484   
                          ENDP

                  |L19.252|
                          DCD      SPI_DMAHalfTransmitReceiveCplt
                  |L19.256|
                          DCD      SPI_DMATransmitReceiveCplt
                  |L19.260|
                          DCD      SPI_DMAError
                  |L19.264|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L19.268|
                          DCD      SPI_DMAReceiveCplt

                          AREA ||i.HAL_SPI_TransmitReceive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_IT PROC
;;;1135     */
;;;1136   HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b530              PUSH     {r4,r5,lr}
;;;1137   {
;;;1138   
;;;1139     if((hspi->State == HAL_SPI_STATE_READY) || \
000002  f8904051          LDRB     r4,[r0,#0x51]
000006  2c01              CMP      r4,#1
000008  d009              BEQ      |L20.30|
;;;1140        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->State == HAL_SPI_STATE_BUSY_RX)))
00000a  6844              LDR      r4,[r0,#4]
00000c  f5b47f82          CMP      r4,#0x104
000010  d146              BNE      |L20.160|
000012  6884              LDR      r4,[r0,#8]
000014  bbf4              CBNZ     r4,|L20.148|
000016  f8904051          LDRB     r4,[r0,#0x51]
00001a  2c22              CMP      r4,#0x22
00001c  d140              BNE      |L20.160|
                  |L20.30|
;;;1141     {
;;;1142       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0)) 
00001e  b301              CBZ      r1,|L20.98|
000020  b1fa              CBZ      r2,|L20.98|
000022  b1f3              CBZ      r3,|L20.98|
;;;1143       {
;;;1144         return  HAL_ERROR;
;;;1145       }
;;;1146   
;;;1147       /* Check the parameters */
;;;1148       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1149   
;;;1150       /* Process locked */
;;;1151       __HAL_LOCK(hspi);
000024  f8904050          LDRB     r4,[r0,#0x50]
000028  2c01              CMP      r4,#1
00002a  d039              BEQ      |L20.160|
00002c  2401              MOVS     r4,#1
00002e  f8804050          STRB     r4,[r0,#0x50]
;;;1152   
;;;1153       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1154       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
000032  f8904051          LDRB     r4,[r0,#0x51]
000036  2c22              CMP      r4,#0x22
000038  d002              BEQ      |L20.64|
;;;1155       {
;;;1156         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
00003a  2432              MOVS     r4,#0x32
00003c  f8804051          STRB     r4,[r0,#0x51]
                  |L20.64|
;;;1157       }
;;;1158   
;;;1159       /* Configure communication */
;;;1160       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000040  2400              MOVS     r4,#0
000042  6544              STR      r4,[r0,#0x54]
;;;1161   
;;;1162       hspi->TxISR = &SPI_TxISR;
000044  4d17              LDR      r5,|L20.164|
;;;1163       hspi->pTxBuffPtr   = pTxData;
;;;1164       hspi->TxXferSize   = Size;
000046  64c5              STR      r5,[r0,#0x4c]
000048  6301              STR      r1,[r0,#0x30]
00004a  8683              STRH     r3,[r0,#0x34]
;;;1165       hspi->TxXferCount  = Size;
00004c  86c3              STRH     r3,[r0,#0x36]
;;;1166   
;;;1167       hspi->RxISR = &SPI_2LinesRxISR;
00004e  4916              LDR      r1,|L20.168|
;;;1168       hspi->pRxBuffPtr   = pRxData;
;;;1169       hspi->RxXferSize   = Size;
000050  6382              STR      r2,[r0,#0x38]
000052  6481              STR      r1,[r0,#0x48]
000054  8783              STRH     r3,[r0,#0x3c]
;;;1170       hspi->RxXferCount  = Size;
000056  87c3              STRH     r3,[r0,#0x3e]
;;;1171   
;;;1172       /* Reset CRC Calculation */
;;;1173       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000058  6a81              LDR      r1,[r0,#0x28]
00005a  f5b15f00          CMP      r1,#0x2000
00005e  d002              BEQ      |L20.102|
000060  e00b              B        |L20.122|
                  |L20.98|
000062  2001              MOVS     r0,#1                 ;1144
;;;1174       {
;;;1175         SPI_RESET_CRC(hspi);
;;;1176       }
;;;1177   
;;;1178       /* Enable TXE, RXNE and ERR interrupt */
;;;1179       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1180   
;;;1181       /* Process Unlocked */
;;;1182       __HAL_UNLOCK(hspi);
;;;1183   
;;;1184       /* Check if the SPI is already enabled */ 
;;;1185       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1186       {
;;;1187         /* Enable SPI peripheral */
;;;1188         __HAL_SPI_ENABLE(hspi);
;;;1189       }
;;;1190   
;;;1191       return HAL_OK;
;;;1192     }
;;;1193     else
;;;1194     {
;;;1195       return HAL_BUSY; 
;;;1196     }
;;;1197   }
000064  bd30              POP      {r4,r5,pc}
                  |L20.102|
000066  6801              LDR      r1,[r0,#0]            ;1175
000068  680a              LDR      r2,[r1,#0]            ;1175
00006a  f4225200          BIC      r2,r2,#0x2000         ;1175
00006e  600a              STR      r2,[r1,#0]            ;1175
000070  6801              LDR      r1,[r0,#0]            ;1175
000072  680a              LDR      r2,[r1,#0]            ;1175
000074  f4425200          ORR      r2,r2,#0x2000         ;1175
000078  600a              STR      r2,[r1,#0]            ;1175
                  |L20.122|
00007a  6801              LDR      r1,[r0,#0]            ;1179
00007c  684a              LDR      r2,[r1,#4]            ;1179
00007e  f04202e0          ORR      r2,r2,#0xe0           ;1179
000082  604a              STR      r2,[r1,#4]            ;1179
000084  f8804050          STRB     r4,[r0,#0x50]         ;1182
000088  6800              LDR      r0,[r0,#0]            ;1185
00008a  6801              LDR      r1,[r0,#0]            ;1185
00008c  0649              LSLS     r1,r1,#25             ;1185
00008e  d405              BMI      |L20.156|
000090  6801              LDR      r1,[r0,#0]            ;1188
000092  e000              B        |L20.150|
                  |L20.148|
000094  e004              B        |L20.160|
                  |L20.150|
000096  f0410140          ORR      r1,r1,#0x40           ;1188
00009a  6001              STR      r1,[r0,#0]            ;1188
                  |L20.156|
00009c  2000              MOVS     r0,#0                 ;1191
00009e  bd30              POP      {r4,r5,pc}
                  |L20.160|
0000a0  2002              MOVS     r0,#2                 ;1195
0000a2  bd30              POP      {r4,r5,pc}
;;;1198   
                          ENDP

                  |L20.164|
                          DCD      SPI_TxISR
                  |L20.168|
                          DCD      SPI_2LinesRxISR

                          AREA ||i.HAL_SPI_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_DMA PROC
;;;1206     */
;;;1207   HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1208   {
000002  4604              MOV      r4,r0
;;;1209     if(hspi->State == HAL_SPI_STATE_READY)
000004  f8900051          LDRB     r0,[r0,#0x51]
000008  2801              CMP      r0,#1
00000a  d150              BNE      |L21.174|
;;;1210     {
;;;1211       if((pData == NULL) || (Size == 0))
00000c  b1c9              CBZ      r1,|L21.66|
00000e  b1c2              CBZ      r2,|L21.66|
;;;1212       {
;;;1213         return  HAL_ERROR;
;;;1214       }
;;;1215   
;;;1216       /* Check the parameters */
;;;1217       assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1218   
;;;1219       /* Process Locked */
;;;1220       __HAL_LOCK(hspi);
000010  f8940050          LDRB     r0,[r4,#0x50]
000014  2801              CMP      r0,#1
000016  d04a              BEQ      |L21.174|
000018  2001              MOVS     r0,#1
00001a  f8840050          STRB     r0,[r4,#0x50]
;;;1221   
;;;1222       /* Configure communication */
;;;1223       hspi->State       = HAL_SPI_STATE_BUSY_TX;
00001e  2012              MOVS     r0,#0x12
000020  f8840051          STRB     r0,[r4,#0x51]
;;;1224       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
000024  2500              MOVS     r5,#0
000026  6565              STR      r5,[r4,#0x54]
;;;1225   
;;;1226       hspi->pTxBuffPtr  = pData;
;;;1227       hspi->TxXferSize  = Size;
000028  6321              STR      r1,[r4,#0x30]
00002a  86a2              STRH     r2,[r4,#0x34]
;;;1228       hspi->TxXferCount = Size;
00002c  86e2              STRH     r2,[r4,#0x36]
;;;1229   
;;;1230       /*Init field not used in handle to zero */
;;;1231       hspi->TxISR       = 0;
;;;1232       hspi->RxISR       = 0;
00002e  64e5              STR      r5,[r4,#0x4c]
;;;1233       hspi->pRxBuffPtr  = NULL;
000030  64a5              STR      r5,[r4,#0x48]
;;;1234       hspi->RxXferSize  = 0;
000032  63a5              STR      r5,[r4,#0x38]
000034  87a5              STRH     r5,[r4,#0x3c]
;;;1235       hspi->RxXferCount = 0;
000036  87e5              STRH     r5,[r4,#0x3e]
;;;1236   
;;;1237       /* Configure communication direction : 1Line */
;;;1238       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  68a0              LDR      r0,[r4,#8]
00003a  f5b04f00          CMP      r0,#0x8000
00003e  d002              BEQ      |L21.70|
000040  e006              B        |L21.80|
                  |L21.66|
000042  2001              MOVS     r0,#1                 ;1213
;;;1239       {
;;;1240         SPI_1LINE_TX(hspi);
;;;1241       }
;;;1242   
;;;1243       /* Reset CRC Calculation */
;;;1244       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1245       {
;;;1246         SPI_RESET_CRC(hspi);
;;;1247       }
;;;1248   
;;;1249       /* Set the SPI TxDMA Half transfer complete callback */
;;;1250       hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
;;;1251   
;;;1252       /* Set the SPI TxDMA transfer complete callback */
;;;1253       hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
;;;1254   
;;;1255       /* Set the DMA error callback */
;;;1256       hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1257   
;;;1258       /* Enable the Tx DMA Channel */
;;;1259       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1260   
;;;1261       /* Enable Tx DMA Request */
;;;1262       SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1263   
;;;1264       /* Process Unlocked */
;;;1265       __HAL_UNLOCK(hspi);
;;;1266   
;;;1267       /* Check if the SPI is already enabled */ 
;;;1268       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1269       {
;;;1270         /* Enable SPI peripheral */
;;;1271         __HAL_SPI_ENABLE(hspi);
;;;1272       }
;;;1273   
;;;1274       return HAL_OK;
;;;1275     }
;;;1276     else
;;;1277     {
;;;1278       return HAL_BUSY;
;;;1279     }
;;;1280   }
000044  bd70              POP      {r4-r6,pc}
                  |L21.70|
000046  6820              LDR      r0,[r4,#0]            ;1240
000048  6801              LDR      r1,[r0,#0]            ;1240
00004a  f4414180          ORR      r1,r1,#0x4000         ;1240
00004e  6001              STR      r1,[r0,#0]            ;1240
                  |L21.80|
000050  6aa0              LDR      r0,[r4,#0x28]         ;1244
000052  f5b05f00          CMP      r0,#0x2000            ;1244
000056  d109              BNE      |L21.108|
000058  6820              LDR      r0,[r4,#0]            ;1246
00005a  6801              LDR      r1,[r0,#0]            ;1246
00005c  f4215100          BIC      r1,r1,#0x2000         ;1246
000060  6001              STR      r1,[r0,#0]            ;1246
000062  6820              LDR      r0,[r4,#0]            ;1246
000064  6801              LDR      r1,[r0,#0]            ;1246
000066  f4415100          ORR      r1,r1,#0x2000         ;1246
00006a  6001              STR      r1,[r0,#0]            ;1246
                  |L21.108|
00006c  6c21              LDR      r1,[r4,#0x40]         ;1250
00006e  4811              LDR      r0,|L21.180|
000070  62c8              STR      r0,[r1,#0x2c]         ;1253
000072  6c21              LDR      r1,[r4,#0x40]         ;1253
000074  4810              LDR      r0,|L21.184|
000076  6288              STR      r0,[r1,#0x28]         ;1256
000078  6c21              LDR      r1,[r4,#0x40]         ;1256
00007a  4810              LDR      r0,|L21.188|
00007c  6308              STR      r0,[r1,#0x30]         ;1259
00007e  6822              LDR      r2,[r4,#0]            ;1259
000080  8ee3              LDRH     r3,[r4,#0x36]         ;1259
000082  320c              ADDS     r2,r2,#0xc            ;1259
000084  6b21              LDR      r1,[r4,#0x30]         ;1259
000086  6c20              LDR      r0,[r4,#0x40]         ;1259
000088  f7fffffe          BL       HAL_DMA_Start_IT
00008c  6820              LDR      r0,[r4,#0]            ;1262
00008e  6841              LDR      r1,[r0,#4]            ;1262
000090  f0410102          ORR      r1,r1,#2              ;1262
000094  6041              STR      r1,[r0,#4]            ;1262
000096  f8845050          STRB     r5,[r4,#0x50]         ;1265
00009a  6820              LDR      r0,[r4,#0]            ;1268
00009c  6801              LDR      r1,[r0,#0]            ;1268
00009e  0649              LSLS     r1,r1,#25             ;1268
0000a0  d403              BMI      |L21.170|
0000a2  6801              LDR      r1,[r0,#0]            ;1271
0000a4  f0410140          ORR      r1,r1,#0x40           ;1271
0000a8  6001              STR      r1,[r0,#0]            ;1271
                  |L21.170|
0000aa  2000              MOVS     r0,#0                 ;1274
0000ac  bd70              POP      {r4-r6,pc}
                  |L21.174|
0000ae  2002              MOVS     r0,#2                 ;1278
0000b0  bd70              POP      {r4-r6,pc}
;;;1281   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L21.180|
                          DCD      SPI_DMAHalfTransmitCplt
                  |L21.184|
                          DCD      SPI_DMATransmitCplt
                  |L21.188|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Transmit_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_IT PROC
;;;977      */
;;;978    HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b510              PUSH     {r4,lr}
;;;979    {
;;;980      if(hspi->State == HAL_SPI_STATE_READY)
000002  f8903051          LDRB     r3,[r0,#0x51]
000006  2b01              CMP      r3,#1
000008  d147              BNE      |L22.154|
;;;981      {
;;;982        if((pData == NULL) || (Size == 0))
00000a  b1d1              CBZ      r1,|L22.66|
00000c  b1ca              CBZ      r2,|L22.66|
;;;983        {
;;;984          return  HAL_ERROR;
;;;985        }
;;;986    
;;;987        /* Check the parameters */
;;;988        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;989    
;;;990        /* Process Locked */
;;;991        __HAL_LOCK(hspi);
00000e  f8903050          LDRB     r3,[r0,#0x50]
000012  2b01              CMP      r3,#1
000014  d041              BEQ      |L22.154|
000016  2301              MOVS     r3,#1
000018  f8803050          STRB     r3,[r0,#0x50]
;;;992    
;;;993        /* Configure communication */
;;;994        hspi->State        = HAL_SPI_STATE_BUSY_TX;
00001c  2312              MOVS     r3,#0x12
00001e  f8803051          STRB     r3,[r0,#0x51]
;;;995        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
000022  2300              MOVS     r3,#0
000024  6543              STR      r3,[r0,#0x54]
;;;996    
;;;997        hspi->TxISR        = &SPI_TxISR;
000026  4c1e              LDR      r4,|L22.160|
;;;998        hspi->pTxBuffPtr   = pData;
;;;999        hspi->TxXferSize   = Size;
000028  64c4              STR      r4,[r0,#0x4c]
00002a  6301              STR      r1,[r0,#0x30]
00002c  8682              STRH     r2,[r0,#0x34]
;;;1000       hspi->TxXferCount  = Size;
00002e  86c2              STRH     r2,[r0,#0x36]
;;;1001   
;;;1002       /*Init field not used in handle to zero */
;;;1003       hspi->RxISR        = 0;
;;;1004       hspi->pRxBuffPtr   = NULL;
000030  6483              STR      r3,[r0,#0x48]
;;;1005       hspi->RxXferSize   = 0;
000032  6383              STR      r3,[r0,#0x38]
000034  8783              STRH     r3,[r0,#0x3c]
;;;1006       hspi->RxXferCount  = 0;
000036  87c3              STRH     r3,[r0,#0x3e]
;;;1007   
;;;1008       /* Configure communication direction : 1Line */
;;;1009       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
000038  6881              LDR      r1,[r0,#8]
00003a  f5b14f00          CMP      r1,#0x8000
00003e  d002              BEQ      |L22.70|
000040  e006              B        |L22.80|
                  |L22.66|
000042  2001              MOVS     r0,#1                 ;984
;;;1010       {
;;;1011         SPI_1LINE_TX(hspi);
;;;1012       }
;;;1013   
;;;1014       /* Reset CRC Calculation */
;;;1015       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1016       {
;;;1017         SPI_RESET_CRC(hspi);
;;;1018       }
;;;1019   
;;;1020       if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;1021       {
;;;1022         __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
;;;1023       }
;;;1024       else
;;;1025       {
;;;1026         /* Enable TXE and ERR interrupt */
;;;1027         __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
;;;1028       }
;;;1029       /* Process Unlocked */
;;;1030       __HAL_UNLOCK(hspi);
;;;1031   
;;;1032       /* Check if the SPI is already enabled */ 
;;;1033       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1034       {
;;;1035         /* Enable SPI peripheral */
;;;1036         __HAL_SPI_ENABLE(hspi);
;;;1037       }
;;;1038   
;;;1039       return HAL_OK;
;;;1040     }
;;;1041     else
;;;1042     {
;;;1043       return HAL_BUSY;
;;;1044     }
;;;1045   }
000044  bd10              POP      {r4,pc}
                  |L22.70|
000046  6801              LDR      r1,[r0,#0]            ;1011
000048  680a              LDR      r2,[r1,#0]            ;1011
00004a  f4424280          ORR      r2,r2,#0x4000         ;1011
00004e  600a              STR      r2,[r1,#0]            ;1011
                  |L22.80|
000050  6a81              LDR      r1,[r0,#0x28]         ;1015
000052  f5b15f00          CMP      r1,#0x2000            ;1015
000056  d109              BNE      |L22.108|
000058  6801              LDR      r1,[r0,#0]            ;1017
00005a  680a              LDR      r2,[r1,#0]            ;1017
00005c  f4225200          BIC      r2,r2,#0x2000         ;1017
000060  600a              STR      r2,[r1,#0]            ;1017
000062  6801              LDR      r1,[r0,#0]            ;1017
000064  680a              LDR      r2,[r1,#0]            ;1017
000066  f4425200          ORR      r2,r2,#0x2000         ;1017
00006a  600a              STR      r2,[r1,#0]            ;1017
                  |L22.108|
00006c  6881              LDR      r1,[r0,#8]            ;1020
00006e  2900              CMP      r1,#0                 ;1020
000070  6801              LDR      r1,[r0,#0]            ;1027
000072  684a              LDR      r2,[r1,#4]            ;1027
000074  d00e              BEQ      |L22.148|
000076  f04202a0          ORR      r2,r2,#0xa0           ;1027
                  |L22.122|
00007a  604a              STR      r2,[r1,#4]            ;1027
00007c  f8803050          STRB     r3,[r0,#0x50]         ;1030
000080  6800              LDR      r0,[r0,#0]            ;1033
000082  6801              LDR      r1,[r0,#0]            ;1033
000084  0649              LSLS     r1,r1,#25             ;1033
000086  d403              BMI      |L22.144|
000088  6801              LDR      r1,[r0,#0]            ;1036
00008a  f0410140          ORR      r1,r1,#0x40           ;1036
00008e  6001              STR      r1,[r0,#0]            ;1036
                  |L22.144|
000090  2000              MOVS     r0,#0                 ;1039
000092  bd10              POP      {r4,pc}
                  |L22.148|
000094  f0420280          ORR      r2,r2,#0x80           ;1022
000098  e7ef              B        |L22.122|
                  |L22.154|
00009a  2002              MOVS     r0,#2                 ;1043
00009c  bd10              POP      {r4,pc}
;;;1046   
                          ENDP

00009e  0000              DCW      0x0000
                  |L22.160|
                          DCD      SPI_TxISR

                          AREA ||i.HAL_SPI_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxCpltCallback PROC
;;;1624     */
;;;1625   __WEAK void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1626   {
;;;1627     /* Prevent unused argument(s) compilation warning */
;;;1628     UNUSED(hspi);
;;;1629     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1630               the HAL_SPI_TxCpltCallback could be implenetd in the user file
;;;1631      */
;;;1632   }
;;;1633   
                          ENDP


                          AREA ||i.HAL_SPI_TxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxHalfCpltCallback PROC
;;;1669     */
;;;1670   __WEAK void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1671   {
;;;1672     /* Prevent unused argument(s) compilation warning */
;;;1673     UNUSED(hspi);
;;;1674     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1675               the HAL_SPI_TxHalfCpltCallback could be implenetd in the user file
;;;1676      */
;;;1677   }
;;;1678   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxCpltCallback PROC
;;;1654     */
;;;1655   __WEAK void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1656   {
;;;1657     /* Prevent unused argument(s) compilation warning */
;;;1658     UNUSED(hspi);
;;;1659     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1660               the HAL_SPI_TxRxCpltCallback() could be implenetd in the user file
;;;1661      */
;;;1662   }
;;;1663   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxHalfCpltCallback PROC
;;;1699     */
;;;1700   __WEAK void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1701   {
;;;1702     /* Prevent unused argument(s) compilation warning */
;;;1703     UNUSED(hspi);
;;;1704     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1705               the HAL_SPI_TxRxHalfCpltCallback() could be implenetd in the user file
;;;1706      */
;;;1707   }
;;;1708   
                          ENDP


                          AREA ||i.SPI_2LinesRxISR||, CODE, READONLY, ALIGN=1

                  SPI_2LinesRxISR PROC
;;;1969     */
;;;1970   static void SPI_2LinesRxISR(SPI_HandleTypeDef *hspi)
000000  6802              LDR      r2,[r0,#0]
;;;1971   {
;;;1972     /* Receive data in 8 Bit mode */
;;;1973     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;1974     {
;;;1975       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;1976     }
;;;1977     /* Receive data in 16 Bit mode */
;;;1978     else
;;;1979     {
;;;1980       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000002  68c3              LDR      r3,[r0,#0xc]
000004  6b81              LDR      r1,[r0,#0x38]
000006  68d2              LDR      r2,[r2,#0xc]
000008  b15b              CBZ      r3,|L27.34|
00000a  800a              STRH     r2,[r1,#0]
;;;1981       hspi->pRxBuffPtr+=2;
00000c  6b81              LDR      r1,[r0,#0x38]
00000e  1c89              ADDS     r1,r1,#2
000010  6381              STR      r1,[r0,#0x38]
                  |L27.18|
;;;1982     }
;;;1983     hspi->RxXferCount--;
000012  8fc1              LDRH     r1,[r0,#0x3e]
000014  1e49              SUBS     r1,r1,#1
000016  0409              LSLS     r1,r1,#16
000018  0c09              LSRS     r1,r1,#16
00001a  87c1              STRH     r1,[r0,#0x3e]
;;;1984   
;;;1985     if(hspi->RxXferCount==0)
00001c  d105              BNE      |L27.42|
;;;1986     {
;;;1987       SPI_RxCloseIRQHandler(hspi);
00001e  f7ffbffe          B.W      SPI_RxCloseIRQHandler
                  |L27.34|
000022  1c4b              ADDS     r3,r1,#1              ;1975
000024  6383              STR      r3,[r0,#0x38]         ;1975
000026  700a              STRB     r2,[r1,#0]            ;1975
000028  e7f3              B        |L27.18|
                  |L27.42|
;;;1988     }
;;;1989   }
00002a  4770              BX       lr
;;;1990   
                          ENDP


                          AREA ||i.SPI_DMAError||, CODE, READONLY, ALIGN=1

                  SPI_DMAError PROC
;;;2274     */
;;;2275   static void SPI_DMAError(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2276   {
;;;2277     SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2278     hspi->TxXferCount = 0;
000004  2100              MOVS     r1,#0
000006  86c1              STRH     r1,[r0,#0x36]
;;;2279     hspi->RxXferCount = 0;
000008  87c1              STRH     r1,[r0,#0x3e]
;;;2280     hspi->State= HAL_SPI_STATE_READY;
00000a  2101              MOVS     r1,#1
00000c  f8801051          STRB     r1,[r0,#0x51]
;;;2281     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
000010  6d41              LDR      r1,[r0,#0x54]
000012  f0410108          ORR      r1,r1,#8
000016  6541              STR      r1,[r0,#0x54]
;;;2282     HAL_SPI_ErrorCallback(hspi);
000018  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2283   }
00001c  bd10              POP      {r4,pc}
;;;2284   
                          ENDP


                          AREA ||i.SPI_DMAHalfReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfReceiveCplt PROC
;;;2248     */
;;;2249   static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2250   {
;;;2251     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2252   
;;;2253     HAL_SPI_RxHalfCpltCallback(hspi);
000004  f7fffffe          BL       HAL_SPI_RxHalfCpltCallback
;;;2254   }
000008  bd10              POP      {r4,pc}
;;;2255   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitCplt PROC
;;;2235     */
;;;2236   static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;2237   {
;;;2238     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2239   
;;;2240     HAL_SPI_TxHalfCpltCallback(hspi);
000004  f7fffffe          BL       HAL_SPI_TxHalfCpltCallback
;;;2241   }
000008  bd10              POP      {r4,pc}
;;;2242   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitReceiveCplt PROC
;;;2261     */
;;;2262   static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
000000  b510              PUSH     {r4,lr}
;;;2263   {
;;;2264     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6a40              LDR      r0,[r0,#0x24]
;;;2265   
;;;2266     HAL_SPI_TxRxHalfCpltCallback(hspi);
000004  f7fffffe          BL       HAL_SPI_TxRxHalfCpltCallback
;;;2267   }
000008  bd10              POP      {r4,pc}
;;;2268   
                          ENDP


                          AREA ||i.SPI_DMAReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAReceiveCplt PROC
;;;2079     */
;;;2080   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b538              PUSH     {r3-r5,lr}
;;;2081   {
;;;2082     __IO uint16_t tmpreg = 0;
000002  2500              MOVS     r5,#0
000004  f8ad5000          STRH     r5,[sp,#0]
;;;2083     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;2084   
;;;2085     /* DMA Normal mode */
;;;2086     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000008  6a44              LDR      r4,[r0,#0x24]
00000a  6800              LDR      r0,[r0,#0]
00000c  6800              LDR      r0,[r0,#0]
00000e  0680              LSLS     r0,r0,#26
000010  d45f              BMI      |L32.210|
;;;2087     {
;;;2088       /* Disable Rx DMA Request */
;;;2089       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000012  6820              LDR      r0,[r4,#0]
000014  6841              LDR      r1,[r0,#4]
000016  f0210101          BIC      r1,r1,#1
00001a  6041              STR      r1,[r0,#4]
;;;2090   
;;;2091       /* Disable Tx DMA Request (done by default to handle the case Master RX direction 2 lines) */
;;;2092       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00001c  6820              LDR      r0,[r4,#0]
00001e  6841              LDR      r1,[r0,#4]
000020  f0210102          BIC      r1,r1,#2
000024  6041              STR      r1,[r0,#4]
;;;2093   
;;;2094       /* CRC Calculation handling */
;;;2095       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000026  6aa0              LDR      r0,[r4,#0x28]
000028  f5b05f00          CMP      r0,#0x2000
00002c  d137              BNE      |L32.158|
;;;2096       {
;;;2097         /* Wait until RXNE flag is set (CRC ready) */
;;;2098         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00002e  230a              MOVS     r3,#0xa
000030  2200              MOVS     r2,#0
000032  2101              MOVS     r1,#1
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00003a  b118              CBZ      r0,|L32.68|
;;;2099         {
;;;2100           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00003c  6d60              LDR      r0,[r4,#0x54]
00003e  f0400010          ORR      r0,r0,#0x10
000042  6560              STR      r0,[r4,#0x54]
                  |L32.68|
;;;2101         }
;;;2102   
;;;2103         /* Read CRC */
;;;2104         tmpreg = hspi->Instance->DR;
000044  6820              LDR      r0,[r4,#0]
000046  68c0              LDR      r0,[r0,#0xc]
000048  f8ad0000          STRH     r0,[sp,#0]
;;;2105         UNUSED(tmpreg);
00004c  f8bd0000          LDRH     r0,[sp,#0]
;;;2106   
;;;2107         /* Wait until RXNE flag is reset */
;;;2108         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000050  2201              MOVS     r2,#1
000052  230a              MOVS     r3,#0xa
000054  4611              MOV      r1,r2
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00005c  b118              CBZ      r0,|L32.102|
;;;2109         {
;;;2110           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00005e  6d60              LDR      r0,[r4,#0x54]
000060  f0400010          ORR      r0,r0,#0x10
000064  6560              STR      r0,[r4,#0x54]
                  |L32.102|
;;;2111         }
;;;2112   
;;;2113         /* Check if CRC error occurred */
;;;2114         if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000066  6820              LDR      r0,[r4,#0]
000068  6880              LDR      r0,[r0,#8]
00006a  43c0              MVNS     r0,r0
00006c  06c0              LSLS     r0,r0,#27
00006e  d416              BMI      |L32.158|
;;;2115         {
;;;2116           /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;2117           if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR) 
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       SPI_ISCRCErrorValid
000076  2801              CMP      r0,#1
000078  d10d              BNE      |L32.150|
;;;2118           {
;;;2119             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
00007a  6d60              LDR      r0,[r4,#0x54]
00007c  f0400002          ORR      r0,r0,#2
000080  6560              STR      r0,[r4,#0x54]
;;;2120             
;;;2121             /* Reset CRC Calculation */
;;;2122             SPI_RESET_CRC(hspi);
000082  6820              LDR      r0,[r4,#0]
000084  6801              LDR      r1,[r0,#0]
000086  f4215100          BIC      r1,r1,#0x2000
00008a  6001              STR      r1,[r0,#0]
00008c  6820              LDR      r0,[r4,#0]
00008e  6801              LDR      r1,[r0,#0]
000090  f4415100          ORR      r1,r1,#0x2000
000094  6001              STR      r1,[r0,#0]
                  |L32.150|
;;;2123           }
;;;2124           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000096  6821              LDR      r1,[r4,#0]
000098  f06f0010          MVN      r0,#0x10
00009c  6088              STR      r0,[r1,#8]
                  |L32.158|
;;;2125         }
;;;2126       }
;;;2127   
;;;2128       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
00009e  6860              LDR      r0,[r4,#4]
0000a0  f5b07f82          CMP      r0,#0x104
0000a4  d10b              BNE      |L32.190|
0000a6  68a0              LDR      r0,[r4,#8]
0000a8  f5b04f00          CMP      r0,#0x8000
0000ac  d002              BEQ      |L32.180|
0000ae  f5b06f80          CMP      r0,#0x400
0000b2  d104              BNE      |L32.190|
                  |L32.180|
;;;2129       {
;;;2130         /* Disable SPI peripheral */
;;;2131         __HAL_SPI_DISABLE(hspi);
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6801              LDR      r1,[r0,#0]
0000b8  f0210140          BIC      r1,r1,#0x40
0000bc  6001              STR      r1,[r0,#0]
                  |L32.190|
;;;2132       }
;;;2133   
;;;2134       hspi->RxXferCount = 0;
0000be  87e5              STRH     r5,[r4,#0x3e]
;;;2135       hspi->State = HAL_SPI_STATE_READY;
0000c0  2001              MOVS     r0,#1
0000c2  f8840051          STRB     r0,[r4,#0x51]
;;;2136   
;;;2137       /* Check if Errors has been detected during transfer */
;;;2138       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000c6  6d60              LDR      r0,[r4,#0x54]
0000c8  b118              CBZ      r0,|L32.210|
;;;2139       {
;;;2140         HAL_SPI_ErrorCallback(hspi);
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2141       }
;;;2142       else
;;;2143       {
;;;2144         HAL_SPI_RxCpltCallback(hspi);
;;;2145       }
;;;2146     }
;;;2147     else
;;;2148     {
;;;2149       HAL_SPI_RxCpltCallback(hspi);
;;;2150     }
;;;2151   }
0000d0  bd38              POP      {r3-r5,pc}
                  |L32.210|
0000d2  4620              MOV      r0,r4                 ;2149
0000d4  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000d8  bd38              POP      {r3-r5,pc}
;;;2152   
                          ENDP


                          AREA ||i.SPI_DMATransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitCplt PROC
;;;2030     */
;;;2031   static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000000  b538              PUSH     {r3-r5,lr}
;;;2032   {
;;;2033     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;2034   
;;;2035     /* DMA Normal Mode */
;;;2036     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000002  6a44              LDR      r4,[r0,#0x24]
000004  6800              LDR      r0,[r0,#0]
000006  6800              LDR      r0,[r0,#0]
000008  0680              LSLS     r0,r0,#26
00000a  d41f              BMI      |L33.76|
;;;2037     {
;;;2038       /* Wait until TXE flag is set to send data */
;;;2039       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00000c  230a              MOVS     r3,#0xa
00000e  2200              MOVS     r2,#0
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000018  b118              CBZ      r0,|L33.34|
;;;2040       {
;;;2041         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00001a  6d60              LDR      r0,[r4,#0x54]
00001c  f0400010          ORR      r0,r0,#0x10
000020  6560              STR      r0,[r4,#0x54]
                  |L33.34|
;;;2042       }
;;;2043   
;;;2044       /* Disable Tx DMA Request */
;;;2045       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000022  6820              LDR      r0,[r4,#0]
000024  6841              LDR      r1,[r0,#4]
000026  f0210102          BIC      r1,r1,#2
00002a  6041              STR      r1,[r0,#4]
;;;2046   
;;;2047       /* Wait until Busy flag is reset before disabling SPI */
;;;2048       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
00002c  230a              MOVS     r3,#0xa
00002e  2201              MOVS     r2,#1
000030  2180              MOVS     r1,#0x80
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000038  b118              CBZ      r0,|L33.66|
;;;2049       {
;;;2050         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00003a  6d60              LDR      r0,[r4,#0x54]
00003c  f0400010          ORR      r0,r0,#0x10
000040  6560              STR      r0,[r4,#0x54]
                  |L33.66|
;;;2051       }
;;;2052   
;;;2053       hspi->TxXferCount = 0;
000042  2000              MOVS     r0,#0
000044  86e0              STRH     r0,[r4,#0x36]
;;;2054       hspi->State = HAL_SPI_STATE_READY;
000046  2001              MOVS     r0,#1
000048  f8840051          STRB     r0,[r4,#0x51]
                  |L33.76|
;;;2055     }
;;;2056   
;;;2057     /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;2058     if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
00004c  68a0              LDR      r0,[r4,#8]
00004e  b918              CBNZ     r0,|L33.88|
;;;2059     {
;;;2060       __HAL_SPI_CLEAR_OVRFLAG(hspi);
000050  6820              LDR      r0,[r4,#0]
000052  68c1              LDR      r1,[r0,#0xc]
000054  6880              LDR      r0,[r0,#8]
000056  9000              STR      r0,[sp,#0]
                  |L33.88|
;;;2061     }
;;;2062   
;;;2063     /* Check if Errors has been detected during transfer */
;;;2064     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
000058  6d60              LDR      r0,[r4,#0x54]
00005a  2800              CMP      r0,#0
;;;2065     {
;;;2066       HAL_SPI_ErrorCallback(hspi);
;;;2067     }
;;;2068     else
;;;2069     {
;;;2070       HAL_SPI_TxCpltCallback(hspi);
00005c  4620              MOV      r0,r4
00005e  d002              BEQ      |L33.102|
000060  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2071     }
;;;2072   }
000064  bd38              POP      {r3-r5,pc}
                  |L33.102|
000066  f7fffffe          BL       HAL_SPI_TxCpltCallback
00006a  bd38              POP      {r3-r5,pc}
;;;2073   
                          ENDP


                          AREA ||i.SPI_DMATransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitReceiveCplt PROC
;;;2158     */
;;;2159   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
000000  b538              PUSH     {r3-r5,lr}
;;;2160   {
;;;2161     __IO uint16_t tmpreg = 0;
000002  2500              MOVS     r5,#0
000004  f8ad5000          STRH     r5,[sp,#0]
;;;2162   
;;;2163     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
;;;2164   
;;;2165     if((hdma->Instance->CCR & DMA_CIRCULAR) == 0)
000008  6a44              LDR      r4,[r0,#0x24]
00000a  6800              LDR      r0,[r0,#0]
00000c  6800              LDR      r0,[r0,#0]
00000e  0680              LSLS     r0,r0,#26
000010  d451              BMI      |L34.182|
;;;2166     {
;;;2167       /* CRC Calculation handling */
;;;2168       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000012  6aa0              LDR      r0,[r4,#0x28]
000014  f5b05f00          CMP      r0,#0x2000
000018  d122              BNE      |L34.96|
;;;2169       {
;;;2170         /* Check if CRC is done on going (RXNE flag set) */
;;;2171         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) == HAL_OK)
00001a  2201              MOVS     r2,#1
00001c  230a              MOVS     r3,#0xa
00001e  4611              MOV      r1,r2
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000026  b950              CBNZ     r0,|L34.62|
;;;2172         {
;;;2173           /* Wait until RXNE flag is set to send data */
;;;2174           if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000028  230a              MOVS     r3,#0xa
00002a  2200              MOVS     r2,#0
00002c  2101              MOVS     r1,#1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000034  b118              CBZ      r0,|L34.62|
;;;2175           {
;;;2176             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000036  6d60              LDR      r0,[r4,#0x54]
000038  f0400010          ORR      r0,r0,#0x10
00003c  6560              STR      r0,[r4,#0x54]
                  |L34.62|
;;;2177           }
;;;2178         }
;;;2179         /* Read CRC */
;;;2180         tmpreg = hspi->Instance->DR;
00003e  6820              LDR      r0,[r4,#0]
000040  68c1              LDR      r1,[r0,#0xc]
000042  f8ad1000          STRH     r1,[sp,#0]
;;;2181         UNUSED(tmpreg);
000046  f8bd1000          LDRH     r1,[sp,#0]
;;;2182   
;;;2183         /* Check if CRC error occurred */
;;;2184         if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00004a  6881              LDR      r1,[r0,#8]
00004c  43c9              MVNS     r1,r1
00004e  06c9              LSLS     r1,r1,#27
000050  d406              BMI      |L34.96|
;;;2185         {
;;;2186           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000052  6d61              LDR      r1,[r4,#0x54]
000054  f0410102          ORR      r1,r1,#2
000058  6561              STR      r1,[r4,#0x54]
;;;2187           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
00005a  f06f0110          MVN      r1,#0x10
00005e  6081              STR      r1,[r0,#8]
                  |L34.96|
;;;2188         }
;;;2189       }
;;;2190   
;;;2191       /* Wait until TXE flag is set to send data */
;;;2192       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000060  230a              MOVS     r3,#0xa
000062  2200              MOVS     r2,#0
000064  2102              MOVS     r1,#2
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00006c  b118              CBZ      r0,|L34.118|
;;;2193       {
;;;2194         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00006e  6d60              LDR      r0,[r4,#0x54]
000070  f0400010          ORR      r0,r0,#0x10
000074  6560              STR      r0,[r4,#0x54]
                  |L34.118|
;;;2195       }
;;;2196     
;;;2197       /* Disable Tx DMA Request */
;;;2198       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000076  6820              LDR      r0,[r4,#0]
000078  6841              LDR      r1,[r0,#4]
00007a  f0210102          BIC      r1,r1,#2
00007e  6041              STR      r1,[r0,#4]
;;;2199   
;;;2200       /* Wait until Busy flag is reset before disabling SPI */
;;;2201       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000080  230a              MOVS     r3,#0xa
000082  2201              MOVS     r2,#1
000084  2180              MOVS     r1,#0x80
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00008c  b118              CBZ      r0,|L34.150|
;;;2202       {
;;;2203         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00008e  6d60              LDR      r0,[r4,#0x54]
000090  f0400010          ORR      r0,r0,#0x10
000094  6560              STR      r0,[r4,#0x54]
                  |L34.150|
;;;2204       }
;;;2205   
;;;2206       /* Disable Rx DMA Request */
;;;2207       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000096  6820              LDR      r0,[r4,#0]
000098  6841              LDR      r1,[r0,#4]
00009a  f0210101          BIC      r1,r1,#1
00009e  6041              STR      r1,[r0,#4]
;;;2208   
;;;2209       hspi->TxXferCount = 0;
0000a0  86e5              STRH     r5,[r4,#0x36]
;;;2210       hspi->RxXferCount = 0;
0000a2  87e5              STRH     r5,[r4,#0x3e]
;;;2211   
;;;2212       hspi->State = HAL_SPI_STATE_READY;
0000a4  2001              MOVS     r0,#1
0000a6  f8840051          STRB     r0,[r4,#0x51]
;;;2213   
;;;2214       /* Check if Errors has been detected during transfer */
;;;2215       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000aa  6d60              LDR      r0,[r4,#0x54]
0000ac  b118              CBZ      r0,|L34.182|
;;;2216       {
;;;2217         HAL_SPI_ErrorCallback(hspi);
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2218       }
;;;2219       else
;;;2220       {
;;;2221         HAL_SPI_TxRxCpltCallback(hspi);
;;;2222       }
;;;2223     }
;;;2224     else
;;;2225     {
;;;2226       HAL_SPI_TxRxCpltCallback(hspi);
;;;2227     }
;;;2228   }
0000b4  bd38              POP      {r3-r5,pc}
                  |L34.182|
0000b6  4620              MOV      r0,r4                 ;2226
0000b8  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0000bc  bd38              POP      {r3-r5,pc}
;;;2229   
                          ENDP


                          AREA ||i.SPI_ISCRCErrorValid||, CODE, READONLY, ALIGN=1

                  SPI_ISCRCErrorValid PROC
;;;2387   */
;;;2388   __WEAK uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
000000  2001              MOVS     r0,#1
;;;2389   {
;;;2390     return (SPI_VALID_CRC_ERROR);
;;;2391   }
000002  4770              BX       lr
;;;2392   /**
                          ENDP


                          AREA ||i.SPI_RxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_RxCloseIRQHandler PROC
;;;1880     */
;;;1881   static void SPI_RxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;1882   {
000002  4604              MOV      r4,r0
;;;1883     __IO uint16_t tmpreg = 0;
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;1884   
;;;1885     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00000a  6aa0              LDR      r0,[r4,#0x28]
00000c  f5b05f00          CMP      r0,#0x2000
000010  d12d              BNE      |L36.110|
;;;1886     {
;;;1887       /* Wait until RXNE flag is set to read CRC data */
;;;1888       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000012  230a              MOVS     r3,#0xa
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00001e  b118              CBZ      r0,|L36.40|
;;;1889       {
;;;1890         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000020  6d60              LDR      r0,[r4,#0x54]
000022  f0400010          ORR      r0,r0,#0x10
000026  6560              STR      r0,[r4,#0x54]
                  |L36.40|
;;;1891       }
;;;1892   
;;;1893       /* Read CRC to reset RXNE flag */
;;;1894       tmpreg = hspi->Instance->DR;
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  f8ad0000          STRH     r0,[sp,#0]
;;;1895       UNUSED(tmpreg);
000030  f8bd0000          LDRH     r0,[sp,#0]
;;;1896   
;;;1897       /* Wait until RXNE flag is reset */
;;;1898       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000034  2201              MOVS     r2,#1
000036  230a              MOVS     r3,#0xa
000038  4611              MOV      r1,r2
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000040  b118              CBZ      r0,|L36.74|
;;;1899       {
;;;1900         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000042  6d60              LDR      r0,[r4,#0x54]
000044  f0400010          ORR      r0,r0,#0x10
000048  6560              STR      r0,[r4,#0x54]
                  |L36.74|
;;;1901       }
;;;1902   
;;;1903       /* Check if CRC error occurred */
;;;1904       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00004a  6820              LDR      r0,[r4,#0]
00004c  6880              LDR      r0,[r0,#8]
00004e  43c0              MVNS     r0,r0
000050  06c0              LSLS     r0,r0,#27
000052  d40c              BMI      |L36.110|
;;;1905       {
;;;1906         /* Check if CRC error is valid or not (workaround to be applied or not) */
;;;1907         if (   (hspi->State != HAL_SPI_STATE_BUSY_RX)
000054  f8940051          LDRB     r0,[r4,#0x51]
000058  2822              CMP      r0,#0x22
00005a  d11b              BNE      |L36.148|
;;;1908             || (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR) )
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       SPI_ISCRCErrorValid
000062  2801              CMP      r0,#1
000064  d016              BEQ      |L36.148|
;;;1909         {
;;;1910           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;1911   
;;;1912           /* Reset CRC Calculation */
;;;1913           SPI_RESET_CRC(hspi);
;;;1914         }
;;;1915         else
;;;1916         {
;;;1917           __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000066  6821              LDR      r1,[r4,#0]
000068  f06f0010          MVN      r0,#0x10
00006c  6088              STR      r0,[r1,#8]
                  |L36.110|
;;;1918         }
;;;1919       }
;;;1920     }
;;;1921   
;;;1922     /* Disable RXNE interrupt */
;;;1923     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE));
00006e  6820              LDR      r0,[r4,#0]
000070  6841              LDR      r1,[r0,#4]
000072  f0210140          BIC      r1,r1,#0x40
000076  6041              STR      r1,[r0,#4]
;;;1924   
;;;1925     /* if Transmit process is finished */
;;;1926     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) == RESET)
000078  6820              LDR      r0,[r4,#0]
00007a  6841              LDR      r1,[r0,#4]
00007c  43c9              MVNS     r1,r1
00007e  0609              LSLS     r1,r1,#24
000080  d52b              BPL      |L36.218|
;;;1927     {
;;;1928       /* Disable ERR interrupt */
;;;1929       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000082  6841              LDR      r1,[r0,#4]
000084  f0210120          BIC      r1,r1,#0x20
000088  6041              STR      r1,[r0,#4]
;;;1930   
;;;1931       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
00008a  6860              LDR      r0,[r4,#4]
00008c  f5b07f82          CMP      r0,#0x104
000090  d00f              BEQ      |L36.178|
000092  e01a              B        |L36.202|
                  |L36.148|
000094  6d60              LDR      r0,[r4,#0x54]         ;1910
000096  f0400002          ORR      r0,r0,#2              ;1910
00009a  6560              STR      r0,[r4,#0x54]         ;1910
00009c  6820              LDR      r0,[r4,#0]            ;1913
00009e  6801              LDR      r1,[r0,#0]            ;1913
0000a0  f4215100          BIC      r1,r1,#0x2000         ;1913
0000a4  6001              STR      r1,[r0,#0]            ;1913
0000a6  6820              LDR      r0,[r4,#0]            ;1913
0000a8  6801              LDR      r1,[r0,#0]            ;1913
0000aa  f4415100          ORR      r1,r1,#0x2000         ;1913
0000ae  6001              STR      r1,[r0,#0]            ;1913
0000b0  e7dd              B        |L36.110|
                  |L36.178|
0000b2  68a0              LDR      r0,[r4,#8]
0000b4  f5b04f00          CMP      r0,#0x8000
0000b8  d002              BEQ      |L36.192|
0000ba  f5b06f80          CMP      r0,#0x400
0000be  d104              BNE      |L36.202|
                  |L36.192|
;;;1932       {
;;;1933         /* Disable SPI peripheral */
;;;1934         __HAL_SPI_DISABLE(hspi);
0000c0  6820              LDR      r0,[r4,#0]
0000c2  6801              LDR      r1,[r0,#0]
0000c4  f0210140          BIC      r1,r1,#0x40
0000c8  6001              STR      r1,[r0,#0]
                  |L36.202|
;;;1935       }
;;;1936       
;;;1937       /* Check if Errors has been detected during transfer */
;;;1938       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
0000ca  6d61              LDR      r1,[r4,#0x54]
0000cc  2001              MOVS     r0,#1                 ;1888
0000ce  b129              CBZ      r1,|L36.220|
;;;1939       {
;;;1940         /* Check if we are in Rx or in Rx/Tx Mode */
;;;1941         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1942         {
;;;1943           /* Set state to READY before run the Callback Complete */
;;;1944           hspi->State = HAL_SPI_STATE_READY;
;;;1945           HAL_SPI_TxRxCpltCallback(hspi);
;;;1946         }
;;;1947         else
;;;1948         {
;;;1949           /* Set state to READY before run the Callback Complete */
;;;1950           hspi->State = HAL_SPI_STATE_READY;
;;;1951           HAL_SPI_RxCpltCallback(hspi);
;;;1952         }
;;;1953       }
;;;1954       else
;;;1955       {
;;;1956         /* Set state to READY before run the Callback Complete */
;;;1957         hspi->State = HAL_SPI_STATE_READY;
0000d0  f8840051          STRB     r0,[r4,#0x51]
;;;1958         /* Call Error call back in case of Error */
;;;1959         HAL_SPI_ErrorCallback(hspi);
0000d4  4620              MOV      r0,r4
0000d6  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L36.218|
;;;1960       }
;;;1961     }
;;;1962   }
0000da  bd38              POP      {r3-r5,pc}
                  |L36.220|
0000dc  f8941051          LDRB     r1,[r4,#0x51]         ;1941
0000e0  f8840051          STRB     r0,[r4,#0x51]         ;1950
0000e4  2932              CMP      r1,#0x32              ;1941
0000e6  4620              MOV      r0,r4                 ;1951
0000e8  d002              BEQ      |L36.240|
0000ea  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000ee  bd38              POP      {r3-r5,pc}
                  |L36.240|
0000f0  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0000f4  bd38              POP      {r3-r5,pc}
;;;1963   
                          ENDP


                          AREA ||i.SPI_RxISR||, CODE, READONLY, ALIGN=1

                  SPI_RxISR PROC
;;;1996     */
;;;1997   static void SPI_RxISR(SPI_HandleTypeDef *hspi)
000000  6802              LDR      r2,[r0,#0]
;;;1998   {
;;;1999     /* Receive data in 8 Bit mode */
;;;2000     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;2001     {
;;;2002       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;2003     }
;;;2004     /* Receive data in 16 Bit mode */
;;;2005     else
;;;2006     {
;;;2007       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000002  68c3              LDR      r3,[r0,#0xc]
000004  6b81              LDR      r1,[r0,#0x38]
000006  68d2              LDR      r2,[r2,#0xc]
000008  b153              CBZ      r3,|L37.32|
00000a  800a              STRH     r2,[r1,#0]
;;;2008       hspi->pRxBuffPtr+=2;
00000c  6b81              LDR      r1,[r0,#0x38]
00000e  1c89              ADDS     r1,r1,#2
000010  6381              STR      r1,[r0,#0x38]
                  |L37.18|
;;;2009     }
;;;2010       hspi->RxXferCount--;
000012  8fc1              LDRH     r1,[r0,#0x3e]
000014  1e49              SUBS     r1,r1,#1
000016  b289              UXTH     r1,r1
000018  87c1              STRH     r1,[r0,#0x3e]
;;;2011   
;;;2012     /* Enable CRC Transmission */
;;;2013     if((hspi->RxXferCount == 1) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
00001a  2901              CMP      r1,#1
00001c  d004              BEQ      |L37.40|
00001e  e00c              B        |L37.58|
                  |L37.32|
000020  1c4b              ADDS     r3,r1,#1              ;2002
000022  6383              STR      r3,[r0,#0x38]         ;2002
000024  700a              STRB     r2,[r1,#0]            ;2002
000026  e7f4              B        |L37.18|
                  |L37.40|
000028  6a81              LDR      r1,[r0,#0x28]
00002a  f5b15f00          CMP      r1,#0x2000
00002e  d109              BNE      |L37.68|
;;;2014     {
;;;2015       /* Set CRC Next to calculate CRC on Rx side */
;;;2016       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000030  6801              LDR      r1,[r0,#0]
000032  680a              LDR      r2,[r1,#0]
000034  f4425280          ORR      r2,r2,#0x1000
000038  600a              STR      r2,[r1,#0]
                  |L37.58|
;;;2017     }
;;;2018   
;;;2019     if(hspi->RxXferCount == 0)
00003a  8fc1              LDRH     r1,[r0,#0x3e]
00003c  2900              CMP      r1,#0
00003e  d101              BNE      |L37.68|
;;;2020     {
;;;2021       SPI_RxCloseIRQHandler(hspi);
000040  f7ffbffe          B.W      SPI_RxCloseIRQHandler
                  |L37.68|
;;;2022     }
;;;2023   }
000044  4770              BX       lr
;;;2024   
                          ENDP


                          AREA ||i.SPI_TxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_TxCloseIRQHandler PROC
;;;1787     */
;;;1788   static void SPI_TxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;1789   {
000002  4604              MOV      r4,r0
;;;1790     /* Wait until TXE flag is set to send data */
;;;1791     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000004  230a              MOVS     r3,#0xa
000006  2200              MOVS     r2,#0
000008  2102              MOVS     r1,#2
00000a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00000e  b118              CBZ      r0,|L38.24|
;;;1792     {
;;;1793       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000010  6d60              LDR      r0,[r4,#0x54]
000012  f0400010          ORR      r0,r0,#0x10
000016  6560              STR      r0,[r4,#0x54]
                  |L38.24|
;;;1794     }
;;;1795   
;;;1796     /* Disable TXE interrupt */
;;;1797     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE));
000018  6820              LDR      r0,[r4,#0]
00001a  6841              LDR      r1,[r0,#4]
00001c  f0210180          BIC      r1,r1,#0x80
000020  6041              STR      r1,[r0,#4]
;;;1798   
;;;1799     /* Disable ERR interrupt if Receive process is finished */
;;;1800     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) == RESET)
000022  6820              LDR      r0,[r4,#0]
000024  6841              LDR      r1,[r0,#4]
000026  43c9              MVNS     r1,r1
000028  0649              LSLS     r1,r1,#25
00002a  d51c              BPL      |L38.102|
;;;1801     {
;;;1802       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
00002c  6841              LDR      r1,[r0,#4]
00002e  f0210120          BIC      r1,r1,#0x20
000032  6041              STR      r1,[r0,#4]
;;;1803   
;;;1804       /* Wait until Busy flag is reset before disabling SPI */
;;;1805       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000034  230a              MOVS     r3,#0xa
000036  2201              MOVS     r2,#1
000038  2180              MOVS     r1,#0x80
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000040  b118              CBZ      r0,|L38.74|
;;;1806       {
;;;1807         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000042  6d60              LDR      r0,[r4,#0x54]
000044  f0400010          ORR      r0,r0,#0x10
000048  6560              STR      r0,[r4,#0x54]
                  |L38.74|
;;;1808       }
;;;1809   
;;;1810       /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
;;;1811       if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
00004a  68a0              LDR      r0,[r4,#8]
00004c  b918              CBNZ     r0,|L38.86|
;;;1812       {
;;;1813         __HAL_SPI_CLEAR_OVRFLAG(hspi);
00004e  6820              LDR      r0,[r4,#0]
000050  68c1              LDR      r1,[r0,#0xc]
000052  6880              LDR      r0,[r0,#8]
000054  9000              STR      r0,[sp,#0]
                  |L38.86|
;;;1814       }
;;;1815       
;;;1816       /* Check if Errors has been detected during transfer */
;;;1817       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
000056  6d61              LDR      r1,[r4,#0x54]
000058  2001              MOVS     r0,#1                 ;1805
00005a  b129              CBZ      r1,|L38.104|
;;;1818       {
;;;1819         /* Check if we are in Tx or in Rx/Tx Mode */
;;;1820         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1821         {
;;;1822           /* Set state to READY before run the Callback Complete */
;;;1823           hspi->State = HAL_SPI_STATE_READY;
;;;1824           HAL_SPI_TxRxCpltCallback(hspi);
;;;1825         }
;;;1826         else
;;;1827         {
;;;1828           /* Set state to READY before run the Callback Complete */
;;;1829           hspi->State = HAL_SPI_STATE_READY;
;;;1830           HAL_SPI_TxCpltCallback(hspi);
;;;1831         }
;;;1832       }
;;;1833       else
;;;1834       {
;;;1835         /* Set state to READY before run the Callback Complete */
;;;1836         hspi->State = HAL_SPI_STATE_READY;
00005c  f8840051          STRB     r0,[r4,#0x51]
;;;1837         /* Call Error call back in case of Error */
;;;1838         HAL_SPI_ErrorCallback(hspi);
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L38.102|
;;;1839       }
;;;1840     }
;;;1841   }
000066  bd38              POP      {r3-r5,pc}
                  |L38.104|
000068  f8941051          LDRB     r1,[r4,#0x51]         ;1820
00006c  f8840051          STRB     r0,[r4,#0x51]         ;1829
000070  2932              CMP      r1,#0x32              ;1820
000072  4620              MOV      r0,r4                 ;1830
000074  d002              BEQ      |L38.124|
000076  f7fffffe          BL       HAL_SPI_TxCpltCallback
00007a  bd38              POP      {r3-r5,pc}
                  |L38.124|
00007c  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
000080  bd38              POP      {r3-r5,pc}
;;;1842   
                          ENDP


                          AREA ||i.SPI_TxISR||, CODE, READONLY, ALIGN=1

                  SPI_TxISR PROC
;;;1848     */
;;;1849   static void SPI_TxISR(SPI_HandleTypeDef *hspi)
000000  68c3              LDR      r3,[r0,#0xc]
;;;1850   {
000002  6802              LDR      r2,[r0,#0]
000004  6b01              LDR      r1,[r0,#0x30]
000006  b17b              CBZ      r3,|L39.40|
;;;1851     /* Transmit data in 8 Bit mode */
;;;1852     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;1853     {
;;;1854       hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;1855     }
;;;1856     /* Transmit data in 16 Bit mode */
;;;1857     else
;;;1858     {
;;;1859       hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
000008  8809              LDRH     r1,[r1,#0]
00000a  60d1              STR      r1,[r2,#0xc]
;;;1860       hspi->pTxBuffPtr+=2;
00000c  6b01              LDR      r1,[r0,#0x30]
00000e  1c89              ADDS     r1,r1,#2
000010  6301              STR      r1,[r0,#0x30]
                  |L39.18|
;;;1861     }
;;;1862     hspi->TxXferCount--;
000012  8ec1              LDRH     r1,[r0,#0x36]
000014  1e49              SUBS     r1,r1,#1
000016  0409              LSLS     r1,r1,#16
000018  0c09              LSRS     r1,r1,#16
00001a  86c1              STRH     r1,[r0,#0x36]
;;;1863   
;;;1864     if(hspi->TxXferCount == 0)
00001c  d110              BNE      |L39.64|
;;;1865     {
;;;1866       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00001e  6a81              LDR      r1,[r0,#0x28]
000020  f5b15f00          CMP      r1,#0x2000
000024  d005              BEQ      |L39.50|
000026  e009              B        |L39.60|
                  |L39.40|
000028  1c4b              ADDS     r3,r1,#1              ;1854
00002a  6303              STR      r3,[r0,#0x30]         ;1854
00002c  7809              LDRB     r1,[r1,#0]            ;1854
00002e  60d1              STR      r1,[r2,#0xc]          ;1854
000030  e7ef              B        |L39.18|
                  |L39.50|
;;;1867       {
;;;1868         /* calculate and transfer CRC on Tx line */
;;;1869         SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000032  6801              LDR      r1,[r0,#0]
000034  680a              LDR      r2,[r1,#0]
000036  f4425280          ORR      r2,r2,#0x1000
00003a  600a              STR      r2,[r1,#0]
                  |L39.60|
;;;1870       }
;;;1871       SPI_TxCloseIRQHandler(hspi);
00003c  f7ffbffe          B.W      SPI_TxCloseIRQHandler
                  |L39.64|
;;;1872     }
;;;1873   }
000040  4770              BX       lr
;;;1874   
                          ENDP


                          AREA ||i.SPI_WaitOnFlagUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitOnFlagUntilTimeout PROC
;;;2293     */
;;;2294   static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2295   {
000004  461d              MOV      r5,r3
000006  4690              MOV      r8,r2
000008  460e              MOV      r6,r1
00000a  4604              MOV      r4,r0
;;;2296     uint32_t tickstart = 0;
;;;2297   
;;;2298     /* Get tick */ 
;;;2299     tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4607              MOV      r7,r0
;;;2300   
;;;2301     /* Wait until flag is set */
;;;2302     if(Status == RESET)
000012  ea5f0008          MOVS     r0,r8
000016  f04f0800          MOV      r8,#0
;;;2303     {
;;;2304       while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
;;;2305       {
;;;2306         if(Timeout != HAL_MAX_DELAY)
;;;2307         {
;;;2308           if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
;;;2309           {
;;;2310             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2311                on both master and slave sides in order to resynchronize the master
;;;2312                and slave for their respective CRC calculation */
;;;2313   
;;;2314             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2315             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2316   
;;;2317             /* Disable SPI peripheral */
;;;2318             __HAL_SPI_DISABLE(hspi);
;;;2319   
;;;2320             /* Reset CRC Calculation */
;;;2321             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00001a  f44f5a00          MOV      r10,#0x2000
;;;2322             {
;;;2323               SPI_RESET_CRC(hspi);
;;;2324             }
;;;2325   
;;;2326             hspi->State= HAL_SPI_STATE_READY;
00001e  f04f0901          MOV      r9,#1
000022  d026              BEQ      |L40.114|
000024  e034              B        |L40.144|
                  |L40.38|
000026  1c68              ADDS     r0,r5,#1              ;2306
000028  d023              BEQ      |L40.114|
00002a  b125              CBZ      r5,|L40.54|
00002c  f7fffffe          BL       HAL_GetTick
000030  1bc0              SUBS     r0,r0,r7              ;2308
000032  42a8              CMP      r0,r5                 ;2308
000034  d91d              BLS      |L40.114|
                  |L40.54|
000036  6820              LDR      r0,[r4,#0]            ;2315
000038  6841              LDR      r1,[r0,#4]            ;2315
00003a  f02101e0          BIC      r1,r1,#0xe0           ;2315
00003e  6041              STR      r1,[r0,#4]            ;2315
000040  6820              LDR      r0,[r4,#0]            ;2318
000042  6801              LDR      r1,[r0,#0]            ;2318
000044  f0210140          BIC      r1,r1,#0x40           ;2318
000048  6001              STR      r1,[r0,#0]            ;2318
00004a  6aa0              LDR      r0,[r4,#0x28]         ;2321
00004c  4550              CMP      r0,r10                ;2321
00004e  d109              BNE      |L40.100|
000050  6820              LDR      r0,[r4,#0]            ;2323
000052  6801              LDR      r1,[r0,#0]            ;2323
000054  f4215100          BIC      r1,r1,#0x2000         ;2323
000058  6001              STR      r1,[r0,#0]            ;2323
00005a  6820              LDR      r0,[r4,#0]            ;2323
00005c  6801              LDR      r1,[r0,#0]            ;2323
00005e  f4415100          ORR      r1,r1,#0x2000         ;2323
000062  6001              STR      r1,[r0,#0]            ;2323
                  |L40.100|
;;;2327   
;;;2328             /* Process Unlocked */
;;;2329             __HAL_UNLOCK(hspi);
;;;2330   
;;;2331             return HAL_TIMEOUT;
;;;2332           }
;;;2333         }
;;;2334       }
;;;2335     }
;;;2336     else
;;;2337     {
;;;2338       while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
;;;2339       {
;;;2340         if(Timeout != HAL_MAX_DELAY)
;;;2341         {
;;;2342           if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
;;;2343           {
;;;2344             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2345                on both master and slave sides in order to resynchronize the master
;;;2346                and slave for their respective CRC calculation */
;;;2347   
;;;2348             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2349             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2350   
;;;2351             /* Disable SPI peripheral */
;;;2352             __HAL_SPI_DISABLE(hspi);
;;;2353   
;;;2354             /* Reset CRC Calculation */
;;;2355             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;2356             {
;;;2357               SPI_RESET_CRC(hspi);
;;;2358             }
;;;2359   
;;;2360             hspi->State= HAL_SPI_STATE_READY;
000064  f8849051          STRB     r9,[r4,#0x51]
;;;2361   
;;;2362             /* Process Unlocked */
;;;2363             __HAL_UNLOCK(hspi);
000068  f8848050          STRB     r8,[r4,#0x50]
;;;2364   
;;;2365             return HAL_TIMEOUT;
00006c  2003              MOVS     r0,#3
                  |L40.110|
;;;2366           }
;;;2367         }
;;;2368       }
;;;2369     }
;;;2370     return HAL_OK;
;;;2371   }
00006e  e8bd87f0          POP      {r4-r10,pc}
                  |L40.114|
000072  6820              LDR      r0,[r4,#0]            ;2304
000074  6880              LDR      r0,[r0,#8]            ;2304
000076  ea360000          BICS     r0,r6,r0              ;2304
00007a  d1d4              BNE      |L40.38|
00007c  e00d              B        |L40.154|
                  |L40.126|
00007e  1c68              ADDS     r0,r5,#1              ;2340
000080  d006              BEQ      |L40.144|
000082  2d00              CMP      r5,#0                 ;2342
000084  d0d7              BEQ      |L40.54|
000086  f7fffffe          BL       HAL_GetTick
00008a  1bc0              SUBS     r0,r0,r7              ;2342
00008c  42a8              CMP      r0,r5                 ;2342
00008e  d8d2              BHI      |L40.54|
                  |L40.144|
000090  6820              LDR      r0,[r4,#0]            ;2338
000092  6880              LDR      r0,[r0,#8]            ;2338
000094  ea360000          BICS     r0,r6,r0              ;2338
000098  d0f1              BEQ      |L40.126|
                  |L40.154|
00009a  2000              MOVS     r0,#0                 ;2370
00009c  e7e7              B        |L40.110|
;;;2372   
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5c481309____REV16|
#line 463 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_spi_c_5c481309____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5c481309____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_spi_c_5c481309____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_spi_c_5c481309____RRX|
#line 665
|__asm___19_stm32f1xx_hal_spi_c_5c481309____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
