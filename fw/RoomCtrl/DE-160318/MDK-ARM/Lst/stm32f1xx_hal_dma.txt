; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-160318\stm32f1xx_hal_dma.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-160318\stm32f1xx_hal_dma.d --feedback=.\DE-160318\DE-160318.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I.\RTE\_DE-160318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-160318\stm32f1xx_hal_dma.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;670      */
;;;671    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b510              PUSH     {r4,lr}
;;;672    {
;;;673      /* Configure DMA Channel data length */
;;;674      hdma->Instance->CNDTR = DataLength;
000002  6804              LDR      r4,[r0,#0]
000004  6063              STR      r3,[r4,#4]
;;;675      
;;;676      /* Peripheral to Memory */
;;;677      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000006  6843              LDR      r3,[r0,#4]
000008  2b10              CMP      r3,#0x10
00000a  6803              LDR      r3,[r0,#0]            ;672
00000c  d003              BEQ      |L1.22|
;;;678      {
;;;679        /* Configure DMA Channel destination address */
;;;680        hdma->Instance->CPAR = DstAddress;
;;;681        
;;;682        /* Configure DMA Channel source address */
;;;683        hdma->Instance->CMAR = SrcAddress;
;;;684      }
;;;685      /* Memory to Peripheral */
;;;686      else
;;;687      {
;;;688        /* Configure DMA Channel source address */
;;;689        hdma->Instance->CPAR = SrcAddress;
00000e  6099              STR      r1,[r3,#8]
;;;690        
;;;691        /* Configure DMA Channel destination address */
;;;692        hdma->Instance->CMAR = DstAddress;
000010  6800              LDR      r0,[r0,#0]
000012  60c2              STR      r2,[r0,#0xc]
;;;693      }
;;;694    }
000014  bd10              POP      {r4,pc}
                  |L1.22|
000016  609a              STR      r2,[r3,#8]            ;680
000018  6800              LDR      r0,[r0,#0]            ;683
00001a  60c1              STR      r1,[r0,#0xc]          ;683
00001c  bd10              POP      {r4,pc}
;;;695    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Abort PROC
;;;387      */
;;;388    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;389    {
000004  4604              MOV      r4,r0
;;;390      uint32_t tickstart = 0x00;
;;;391      
;;;392      /* Disable the channel */
;;;393      __HAL_DMA_DISABLE(hdma);
000006  6800              LDR      r0,[r0,#0]
000008  6801              LDR      r1,[r0,#0]
00000a  f0210101          BIC      r1,r1,#1
00000e  6001              STR      r1,[r0,#0]
;;;394    
;;;395      /* Get tick */
;;;396      tickstart = HAL_GetTick();
000010  f7fffffe          BL       HAL_GetTick
000014  4605              MOV      r5,r0
000016  2600              MOVS     r6,#0
;;;397      
;;;398      /* Check if the DMA Channel is effectively disabled */
;;;399      while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
;;;400      {
;;;401        /* Check for the Timeout */
;;;402        if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
000018  f44f777a          MOV      r7,#0x3e8
00001c  e010              B        |L2.64|
00001e  bf00              NOP      
                  |L2.32|
000020  f7fffffe          BL       HAL_GetTick
000024  1b40              SUBS     r0,r0,r5
000026  42b8              CMP      r0,r7
000028  d90a              BLS      |L2.64|
;;;403        {
;;;404          /* Update error code */
;;;405          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
00002a  f8540f34          LDR      r0,[r4,#0x34]!
00002e  f0400020          ORR      r0,r0,#0x20
000032  f8440914          STR      r0,[r4],#-0x14
;;;406    
;;;407          /* Change the DMA state */
;;;408          hdma->State = HAL_DMA_STATE_TIMEOUT;
000036  2003              MOVS     r0,#3
000038  7060              STRB     r0,[r4,#1]
;;;409    
;;;410          /* Process Unlocked */
;;;411          __HAL_UNLOCK(hdma);
00003a  7026              STRB     r6,[r4,#0]
                  |L2.60|
;;;412    
;;;413          return HAL_TIMEOUT;
;;;414        }
;;;415      }
;;;416      /* Change the DMA state */
;;;417      hdma->State = HAL_DMA_STATE_READY;
;;;418      
;;;419      /* Process Unlocked */
;;;420      __HAL_UNLOCK(hdma);
;;;421      
;;;422      return HAL_OK;
;;;423    }
00003c  e8bd81f0          POP      {r4-r8,pc}
                  |L2.64|
000040  6820              LDR      r0,[r4,#0]            ;399
000042  6800              LDR      r0,[r0,#0]            ;399
000044  07c0              LSLS     r0,r0,#31             ;399
000046  d1eb              BNE      |L2.32|
000048  2001              MOVS     r0,#1                 ;417
00004a  f8840021          STRB     r0,[r4,#0x21]         ;417
00004e  f8846020          STRB     r6,[r4,#0x20]         ;420
000052  2000              MOVS     r0,#0                 ;422
000054  e7f2              B        |L2.60|
;;;424    
                          ENDP


                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;230      */
;;;231    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b5f0              PUSH     {r4-r7,lr}
;;;232    {
000002  b340              CBZ      r0,|L3.86|
;;;233      /* Check the DMA handle allocation */
;;;234      if(hdma == NULL)
;;;235      {
;;;236        return HAL_ERROR;
;;;237      }
;;;238      
;;;239      /* Check the parameters */
;;;240      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;241    
;;;242      /* Check the DMA peripheral state */
;;;243      if(hdma->State == HAL_DMA_STATE_BUSY)
000004  f8901021          LDRB     r1,[r0,#0x21]
000008  2902              CMP      r1,#2
00000a  d024              BEQ      |L3.86|
;;;244      {
;;;245         return HAL_ERROR;
;;;246      }
;;;247    
;;;248      /* Disable the selected DMA Channelx */
;;;249      __HAL_DMA_DISABLE(hdma);
00000c  6801              LDR      r1,[r0,#0]
00000e  680a              LDR      r2,[r1,#0]
000010  f0220201          BIC      r2,r2,#1
000014  600a              STR      r2,[r1,#0]
;;;250      
;;;251      /* Reset DMA Channel control register */
;;;252      hdma->Instance->CCR  = 0;
000016  6801              LDR      r1,[r0,#0]
000018  f04f0e00          MOV      lr,#0
00001c  f8c1e000          STR      lr,[r1,#0]
;;;253      
;;;254      /* Reset DMA Channel Number of Data to Transfer register */
;;;255      hdma->Instance->CNDTR = 0;
000020  6801              LDR      r1,[r0,#0]
000022  f8c1e004          STR      lr,[r1,#4]
;;;256      
;;;257      /* Reset DMA Channel peripheral address register */
;;;258      hdma->Instance->CPAR  = 0;
000026  6801              LDR      r1,[r0,#0]
000028  f8c1e008          STR      lr,[r1,#8]
;;;259      
;;;260      /* Reset DMA Channel memory address register */
;;;261      hdma->Instance->CMAR = 0;
00002c  6801              LDR      r1,[r0,#0]
00002e  f8c1e00c          STR      lr,[r1,#0xc]
;;;262    
;;;263      /* Clear all flags */
;;;264      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
000032  4c3c              LDR      r4,|L3.292|
000034  4d3b              LDR      r5,|L3.292|
000036  4e3b              LDR      r6,|L3.292|
000038  4f3a              LDR      r7,|L3.292|
00003a  4a3a              LDR      r2,|L3.292|
00003c  f8dfc0e4          LDR      r12,|L3.292|
000040  6801              LDR      r1,[r0,#0]
000042  3414              ADDS     r4,r4,#0x14
000044  3528              ADDS     r5,r5,#0x28
000046  363c              ADDS     r6,r6,#0x3c
000048  3750              ADDS     r7,r7,#0x50
00004a  f10c0c64          ADD      r12,r12,#0x64
00004e  4291              CMP      r1,r2
000050  d103              BNE      |L3.90|
000052  2102              MOVS     r1,#2
000054  e01b              B        |L3.142|
                  |L3.86|
000056  2001              MOVS     r0,#1                 ;245
;;;265      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
;;;266      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;267      
;;;268      /* Initialize the error code */
;;;269      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;270    
;;;271      /* Initialize the DMA state */
;;;272      hdma->State = HAL_DMA_STATE_RESET;
;;;273    
;;;274      /* Release Lock */
;;;275      __HAL_UNLOCK(hdma);
;;;276    
;;;277      return HAL_OK;
;;;278    }
000058  bdf0              POP      {r4-r7,pc}
                  |L3.90|
00005a  42a1              CMP      r1,r4                 ;264
00005c  d101              BNE      |L3.98|
00005e  2120              MOVS     r1,#0x20              ;264
000060  e015              B        |L3.142|
                  |L3.98|
000062  42a9              CMP      r1,r5                 ;264
000064  d102              BNE      |L3.108|
000066  f44f7100          MOV      r1,#0x200             ;264
00006a  e010              B        |L3.142|
                  |L3.108|
00006c  42b1              CMP      r1,r6                 ;264
00006e  d102              BNE      |L3.118|
000070  f44f5100          MOV      r1,#0x2000            ;264
000074  e00b              B        |L3.142|
                  |L3.118|
000076  42b9              CMP      r1,r7                 ;264
000078  d102              BNE      |L3.128|
00007a  f44f3100          MOV      r1,#0x20000           ;264
00007e  e006              B        |L3.142|
                  |L3.128|
000080  4561              CMP      r1,r12                ;264
000082  d102              BNE      |L3.138|
000084  f44f1100          MOV      r1,#0x200000          ;264
000088  e001              B        |L3.142|
                  |L3.138|
00008a  f04f7100          MOV      r1,#0x2000000         ;264
                  |L3.142|
00008e  4b25              LDR      r3,|L3.292|
000090  3b08              SUBS     r3,r3,#8              ;264
000092  6059              STR      r1,[r3,#4]            ;264
000094  6801              LDR      r1,[r0,#0]            ;265
000096  4291              CMP      r1,r2                 ;265
000098  d101              BNE      |L3.158|
00009a  2108              MOVS     r1,#8                 ;265
00009c  e019              B        |L3.210|
                  |L3.158|
00009e  42a1              CMP      r1,r4                 ;265
0000a0  d101              BNE      |L3.166|
0000a2  2180              MOVS     r1,#0x80              ;265
0000a4  e015              B        |L3.210|
                  |L3.166|
0000a6  42a9              CMP      r1,r5                 ;265
0000a8  d102              BNE      |L3.176|
0000aa  f44f6100          MOV      r1,#0x800             ;265
0000ae  e010              B        |L3.210|
                  |L3.176|
0000b0  42b1              CMP      r1,r6                 ;265
0000b2  d102              BNE      |L3.186|
0000b4  f44f4100          MOV      r1,#0x8000            ;265
0000b8  e00b              B        |L3.210|
                  |L3.186|
0000ba  42b9              CMP      r1,r7                 ;265
0000bc  d102              BNE      |L3.196|
0000be  f44f2100          MOV      r1,#0x80000           ;265
0000c2  e006              B        |L3.210|
                  |L3.196|
0000c4  4561              CMP      r1,r12                ;265
0000c6  d102              BNE      |L3.206|
0000c8  f44f0100          MOV      r1,#0x800000          ;265
0000cc  e001              B        |L3.210|
                  |L3.206|
0000ce  f04f6100          MOV      r1,#0x8000000         ;265
                  |L3.210|
0000d2  6059              STR      r1,[r3,#4]            ;265
0000d4  6801              LDR      r1,[r0,#0]            ;266
0000d6  4291              CMP      r1,r2                 ;266
0000d8  d101              BNE      |L3.222|
0000da  2104              MOVS     r1,#4                 ;266
0000dc  e019              B        |L3.274|
                  |L3.222|
0000de  42a1              CMP      r1,r4                 ;266
0000e0  d101              BNE      |L3.230|
0000e2  2140              MOVS     r1,#0x40              ;266
0000e4  e015              B        |L3.274|
                  |L3.230|
0000e6  42a9              CMP      r1,r5                 ;266
0000e8  d102              BNE      |L3.240|
0000ea  f44f6180          MOV      r1,#0x400             ;266
0000ee  e010              B        |L3.274|
                  |L3.240|
0000f0  42b1              CMP      r1,r6                 ;266
0000f2  d102              BNE      |L3.250|
0000f4  f44f4180          MOV      r1,#0x4000            ;266
0000f8  e00b              B        |L3.274|
                  |L3.250|
0000fa  42b9              CMP      r1,r7                 ;266
0000fc  d102              BNE      |L3.260|
0000fe  f44f2180          MOV      r1,#0x40000           ;266
000102  e006              B        |L3.274|
                  |L3.260|
000104  4561              CMP      r1,r12                ;266
000106  d102              BNE      |L3.270|
000108  f44f0180          MOV      r1,#0x400000          ;266
00010c  e001              B        |L3.274|
                  |L3.270|
00010e  f04f6180          MOV      r1,#0x4000000         ;266
                  |L3.274|
000112  6059              STR      r1,[r3,#4]            ;266
000114  f8c0e034          STR      lr,[r0,#0x34]         ;269
000118  f880e021          STRB     lr,[r0,#0x21]         ;272
00011c  f880e020          STRB     lr,[r0,#0x20]         ;275
000120  2000              MOVS     r0,#0                 ;277
000122  bdf0              POP      {r4-r7,pc}
;;;279    
                          ENDP

                  |L3.292|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;644      */
;;;645    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6b40              LDR      r0,[r0,#0x34]
;;;646    {
;;;647      return hdma->ErrorCode;
;;;648    }
000002  4770              BX       lr
;;;649    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;633      */
;;;634    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  f8900021          LDRB     r0,[r0,#0x21]
;;;635    {
;;;636      return hdma->State;
;;;637    }
000004  4770              BX       lr
;;;638    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;521      */
;;;522    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;523    {
;;;524      /* Transfer Error Interrupt management ***************************************/
;;;525      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
000004  f8df8260          LDR      r8,|L6.616|
000008  4604              MOV      r4,r0                 ;523
00000a  f8d82000          LDR      r2,[r8,#0]
00000e  f8dfb258          LDR      r11,|L6.616|
000012  4d95              LDR      r5,|L6.616|
000014  4e94              LDR      r6,|L6.616|
000016  4f94              LDR      r7,|L6.616|
000018  6800              LDR      r0,[r0,#0]
00001a  f8df924c          LDR      r9,|L6.616|
00001e  f8dfa248          LDR      r10,|L6.616|
000022  f10b0b08          ADD      r11,r11,#8
000026  351c              ADDS     r5,r5,#0x1c
000028  3630              ADDS     r6,r6,#0x30
00002a  3744              ADDS     r7,r7,#0x44
00002c  f44f6100          MOV      r1,#0x800
000030  f44f4c00          MOV      r12,#0x8000
000034  f44f2e00          MOV      lr,#0x80000
000038  f1090958          ADD      r9,r9,#0x58
00003c  f10a0a6c          ADD      r10,r10,#0x6c
000040  4558              CMP      r0,r11
000042  d101              BNE      |L6.72|
000044  2308              MOVS     r3,#8
000046  e016              B        |L6.118|
                  |L6.72|
000048  42a8              CMP      r0,r5
00004a  d101              BNE      |L6.80|
00004c  2380              MOVS     r3,#0x80
00004e  e012              B        |L6.118|
                  |L6.80|
000050  42b0              CMP      r0,r6
000052  d101              BNE      |L6.88|
000054  460b              MOV      r3,r1
000056  e00e              B        |L6.118|
                  |L6.88|
000058  42b8              CMP      r0,r7
00005a  d101              BNE      |L6.96|
00005c  4663              MOV      r3,r12
00005e  e00a              B        |L6.118|
                  |L6.96|
000060  4548              CMP      r0,r9
000062  d101              BNE      |L6.104|
000064  4673              MOV      r3,lr
000066  e006              B        |L6.118|
                  |L6.104|
000068  4550              CMP      r0,r10
00006a  d102              BNE      |L6.114|
00006c  f44f0300          MOV      r3,#0x800000
000070  e001              B        |L6.118|
                  |L6.114|
000072  f04f6300          MOV      r3,#0x8000000
                  |L6.118|
000076  421a              TST      r2,r3
000078  d031              BEQ      |L6.222|
;;;526      {
;;;527        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
00007a  6802              LDR      r2,[r0,#0]
00007c  43d2              MVNS     r2,r2
00007e  0712              LSLS     r2,r2,#28
000080  d42d              BMI      |L6.222|
;;;528        {
;;;529          /* Disable the transfer error interrupt */
;;;530          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
000082  6802              LDR      r2,[r0,#0]
000084  f0220208          BIC      r2,r2,#8
000088  6002              STR      r2,[r0,#0]
;;;531          
;;;532          /* Clear the transfer error flag */
;;;533          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
00008a  6820              LDR      r0,[r4,#0]
00008c  4558              CMP      r0,r11
00008e  d101              BNE      |L6.148|
000090  2108              MOVS     r1,#8
000092  e014              B        |L6.190|
                  |L6.148|
000094  42a8              CMP      r0,r5
000096  d101              BNE      |L6.156|
000098  2180              MOVS     r1,#0x80
00009a  e010              B        |L6.190|
                  |L6.156|
00009c  42b0              CMP      r0,r6
00009e  d00e              BEQ      |L6.190|
0000a0  42b8              CMP      r0,r7
0000a2  d101              BNE      |L6.168|
0000a4  4661              MOV      r1,r12
0000a6  e00a              B        |L6.190|
                  |L6.168|
0000a8  4548              CMP      r0,r9
0000aa  d101              BNE      |L6.176|
0000ac  4671              MOV      r1,lr
0000ae  e006              B        |L6.190|
                  |L6.176|
0000b0  4550              CMP      r0,r10
0000b2  d102              BNE      |L6.186|
0000b4  f44f0100          MOV      r1,#0x800000
0000b8  e001              B        |L6.190|
                  |L6.186|
0000ba  f04f6100          MOV      r1,#0x8000000
                  |L6.190|
0000be  f8c81004          STR      r1,[r8,#4]
;;;534          
;;;535          /* Update error code */
;;;536          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
0000c2  6b60              LDR      r0,[r4,#0x34]
0000c4  f0400001          ORR      r0,r0,#1
0000c8  6360              STR      r0,[r4,#0x34]
;;;537          
;;;538          /* Change the DMA state */
;;;539          hdma->State = HAL_DMA_STATE_ERROR;
0000ca  2004              MOVS     r0,#4
0000cc  f8840021          STRB     r0,[r4,#0x21]
;;;540          
;;;541          /* Process Unlocked */
;;;542          __HAL_UNLOCK(hdma); 
0000d0  2000              MOVS     r0,#0
0000d2  f8840020          STRB     r0,[r4,#0x20]
;;;543          
;;;544          if (hdma->XferErrorCallback != NULL)
0000d6  6b21              LDR      r1,[r4,#0x30]
0000d8  b109              CBZ      r1,|L6.222|
;;;545          {
;;;546            /* Transfer error callback */
;;;547            hdma->XferErrorCallback(hdma);
0000da  4620              MOV      r0,r4
0000dc  4788              BLX      r1
                  |L6.222|
;;;548          }
;;;549        }
;;;550      }
;;;551    
;;;552      /* Half Transfer Complete Interrupt management ******************************/
;;;553      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
0000de  4862              LDR      r0,|L6.616|
0000e0  f8d0c000          LDR      r12,[r0,#0]
0000e4  f44f6180          MOV      r1,#0x400
0000e8  6820              LDR      r0,[r4,#0]
0000ea  010a              LSLS     r2,r1,#4
0000ec  040b              LSLS     r3,r1,#16
0000ee  f44f2e80          MOV      lr,#0x40000
0000f2  4558              CMP      r0,r11
0000f4  d102              BNE      |L6.252|
0000f6  f04f0804          MOV      r8,#4
0000fa  e016              B        |L6.298|
                  |L6.252|
0000fc  42a8              CMP      r0,r5
0000fe  d102              BNE      |L6.262|
000100  f04f0840          MOV      r8,#0x40
000104  e011              B        |L6.298|
                  |L6.262|
000106  42b0              CMP      r0,r6
000108  d101              BNE      |L6.270|
00010a  4688              MOV      r8,r1
00010c  e00d              B        |L6.298|
                  |L6.270|
00010e  42b8              CMP      r0,r7
000110  d101              BNE      |L6.278|
000112  4690              MOV      r8,r2
000114  e009              B        |L6.298|
                  |L6.278|
000116  4548              CMP      r0,r9
000118  d101              BNE      |L6.286|
00011a  46f0              MOV      r8,lr
00011c  e005              B        |L6.298|
                  |L6.286|
00011e  4550              CMP      r0,r10
000120  d102              BNE      |L6.296|
000122  f44f0880          MOV      r8,#0x400000
000126  e000              B        |L6.298|
                  |L6.296|
000128  4698              MOV      r8,r3
                  |L6.298|
00012a  ea1c0f08          TST      r12,r8
00012e  d033              BEQ      |L6.408|
;;;554      {
;;;555        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
000130  f8d0c000          LDR      r12,[r0,#0]
000134  ea6f0c0c          MVN      r12,r12
000138  ea5f7c4c          LSLS     r12,r12,#29
00013c  d42c              BMI      |L6.408|
;;;556        { 
;;;557          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;558          if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
00013e  f8d0c000          LDR      r12,[r0,#0]
000142  ea5f6c8c          LSLS     r12,r12,#26
000146  d405              BMI      |L6.340|
;;;559          {
;;;560            /* Disable the half transfer interrupt */
;;;561            __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
000148  f8d0c000          LDR      r12,[r0,#0]
00014c  f02c0c04          BIC      r12,r12,#4
000150  f8c0c000          STR      r12,[r0,#0]
                  |L6.340|
;;;562          }
;;;563          /* Clear the half transfer complete flag */
;;;564          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000154  6820              LDR      r0,[r4,#0]
000156  4558              CMP      r0,r11
000158  d101              BNE      |L6.350|
00015a  2104              MOVS     r1,#4
00015c  e013              B        |L6.390|
                  |L6.350|
00015e  42a8              CMP      r0,r5
000160  d101              BNE      |L6.358|
000162  2140              MOVS     r1,#0x40
000164  e00f              B        |L6.390|
                  |L6.358|
000166  42b0              CMP      r0,r6
000168  d00d              BEQ      |L6.390|
00016a  42b8              CMP      r0,r7
00016c  d101              BNE      |L6.370|
00016e  4611              MOV      r1,r2
000170  e009              B        |L6.390|
                  |L6.370|
000172  4548              CMP      r0,r9
000174  d101              BNE      |L6.378|
000176  4671              MOV      r1,lr
000178  e005              B        |L6.390|
                  |L6.378|
00017a  4550              CMP      r0,r10
00017c  d102              BNE      |L6.388|
00017e  f44f0180          MOV      r1,#0x400000
000182  e000              B        |L6.390|
                  |L6.388|
000184  4619              MOV      r1,r3
                  |L6.390|
000186  4838              LDR      r0,|L6.616|
000188  6041              STR      r1,[r0,#4]
;;;565    
;;;566          /* Change DMA peripheral state */
;;;567          hdma->State = HAL_DMA_STATE_READY_HALF;
00018a  2011              MOVS     r0,#0x11
00018c  f8840021          STRB     r0,[r4,#0x21]
;;;568    
;;;569          if(hdma->XferHalfCpltCallback != NULL)
000190  6ae1              LDR      r1,[r4,#0x2c]
000192  b109              CBZ      r1,|L6.408|
;;;570          {
;;;571            /* Half transfer callback */
;;;572            hdma->XferHalfCpltCallback(hdma);
000194  4620              MOV      r0,r4
000196  4788              BLX      r1
                  |L6.408|
;;;573          }
;;;574        }
;;;575      }
;;;576      
;;;577      /* Transfer Complete Interrupt management ***********************************/
;;;578      if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
000198  4a33              LDR      r2,|L6.616|
00019a  f8d2c000          LDR      r12,[r2,#0]
00019e  465b              MOV      r3,r11
0001a0  6820              LDR      r0,[r4,#0]
0001a2  1551              ASRS     r1,r2,#21
0001a4  f44f5b00          MOV      r11,#0x2000
0001a8  f44f3e00          MOV      lr,#0x20000
0001ac  4298              CMP      r0,r3
0001ae  d102              BNE      |L6.438|
0001b0  f04f0802          MOV      r8,#2
0001b4  e017              B        |L6.486|
                  |L6.438|
0001b6  42a8              CMP      r0,r5
0001b8  d102              BNE      |L6.448|
0001ba  f04f0820          MOV      r8,#0x20
0001be  e012              B        |L6.486|
                  |L6.448|
0001c0  42b0              CMP      r0,r6
0001c2  d101              BNE      |L6.456|
0001c4  4688              MOV      r8,r1
0001c6  e00e              B        |L6.486|
                  |L6.456|
0001c8  42b8              CMP      r0,r7
0001ca  d101              BNE      |L6.464|
0001cc  46d8              MOV      r8,r11
0001ce  e00a              B        |L6.486|
                  |L6.464|
0001d0  4548              CMP      r0,r9
0001d2  d101              BNE      |L6.472|
0001d4  46f0              MOV      r8,lr
0001d6  e006              B        |L6.486|
                  |L6.472|
0001d8  4550              CMP      r0,r10
0001da  d102              BNE      |L6.482|
0001dc  f44f1800          MOV      r8,#0x200000
0001e0  e001              B        |L6.486|
                  |L6.482|
0001e2  f04f7800          MOV      r8,#0x2000000
                  |L6.486|
0001e6  ea1c0f08          TST      r12,r8
0001ea  d03b              BEQ      |L6.612|
;;;579      {
;;;580        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
0001ec  f8d0c000          LDR      r12,[r0,#0]
0001f0  ea6f0c0c          MVN      r12,r12
0001f4  ea5f7c8c          LSLS     r12,r12,#30
0001f8  d434              BMI      |L6.612|
;;;581        {
;;;582          if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
0001fa  f8d0c000          LDR      r12,[r0,#0]
0001fe  ea5f6c8c          LSLS     r12,r12,#26
000202  d405              BMI      |L6.528|
;;;583          {
;;;584            /* Disable the transfer complete interrupt */
;;;585            __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
000204  f8d0c000          LDR      r12,[r0,#0]
000208  f02c0c02          BIC      r12,r12,#2
00020c  f8c0c000          STR      r12,[r0,#0]
                  |L6.528|
;;;586          }
;;;587          /* Clear the transfer complete flag */
;;;588          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
000210  6820              LDR      r0,[r4,#0]
000212  4298              CMP      r0,r3
000214  d101              BNE      |L6.538|
000216  2102              MOVS     r1,#2
000218  e014              B        |L6.580|
                  |L6.538|
00021a  42a8              CMP      r0,r5
00021c  d101              BNE      |L6.546|
00021e  2120              MOVS     r1,#0x20
000220  e010              B        |L6.580|
                  |L6.546|
000222  42b0              CMP      r0,r6
000224  d00e              BEQ      |L6.580|
000226  42b8              CMP      r0,r7
000228  d101              BNE      |L6.558|
00022a  4659              MOV      r1,r11
00022c  e00a              B        |L6.580|
                  |L6.558|
00022e  4548              CMP      r0,r9
000230  d101              BNE      |L6.566|
000232  4671              MOV      r1,lr
000234  e006              B        |L6.580|
                  |L6.566|
000236  4550              CMP      r0,r10
000238  d102              BNE      |L6.576|
00023a  f44f1100          MOV      r1,#0x200000
00023e  e001              B        |L6.580|
                  |L6.576|
000240  f04f7100          MOV      r1,#0x2000000
                  |L6.580|
000244  6051              STR      r1,[r2,#4]
;;;589        
;;;590          /* Update error code */
;;;591          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
000246  6b60              LDR      r0,[r4,#0x34]
000248  6360              STR      r0,[r4,#0x34]
;;;592    
;;;593          /* Change the DMA state */
;;;594          hdma->State = HAL_DMA_STATE_READY;
00024a  2001              MOVS     r0,#1
00024c  f8840021          STRB     r0,[r4,#0x21]
;;;595        
;;;596          /* Process Unlocked */
;;;597          __HAL_UNLOCK(hdma);
000250  2000              MOVS     r0,#0
000252  f8840020          STRB     r0,[r4,#0x20]
;;;598        
;;;599          if(hdma->XferCpltCallback != NULL)
000256  6aa1              LDR      r1,[r4,#0x28]
000258  2900              CMP      r1,#0
00025a  d003              BEQ      |L6.612|
;;;600          {       
;;;601            /* Transfer complete callback */
;;;602            hdma->XferCpltCallback(hdma);
00025c  4620              MOV      r0,r4
00025e  e8bd5ff0          POP      {r4-r12,lr}
000262  4708              BX       r1
                  |L6.612|
;;;603          }
;;;604        }
;;;605      }
;;;606    }
000264  e8bd9ff0          POP      {r4-r12,pc}
;;;607    
                          ENDP

                  |L6.616|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Init PROC
;;;169      */
;;;170    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;171    { 
000002  b120              CBZ      r0,|L7.14|
;;;172      uint32_t tmp = 0;
;;;173      
;;;174      /* Check the DMA handle allocation */
;;;175      if(hdma == NULL)
;;;176      {
;;;177        return HAL_ERROR;
;;;178      }
;;;179      
;;;180      /* Check the parameters */
;;;181      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;182      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;183      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;184      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;185      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;186      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;187      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;188      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;189      
;;;190      if(hdma->State == HAL_DMA_STATE_RESET)
000004  f8901021          LDRB     r1,[r0,#0x21]
000008  2400              MOVS     r4,#0
00000a  b111              CBZ      r1,|L7.18|
00000c  e003              B        |L7.22|
                  |L7.14|
00000e  2001              MOVS     r0,#1                 ;177
;;;191      {  
;;;192        /* Allocate lock resource and initialize it */
;;;193        hdma->Lock = HAL_UNLOCKED;
;;;194      }
;;;195      
;;;196      /* Change DMA peripheral state */
;;;197      hdma->State = HAL_DMA_STATE_BUSY;
;;;198    
;;;199      /* Get the CR register value */
;;;200      tmp = hdma->Instance->CCR;
;;;201      
;;;202      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
;;;203      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
;;;204                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;205                          DMA_CCR_DIR));
;;;206      
;;;207      /* Prepare the DMA Channel configuration */
;;;208      tmp |=  hdma->Init.Direction        |
;;;209              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;210              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;211              hdma->Init.Mode                | hdma->Init.Priority;
;;;212    
;;;213      /* Write to DMA Channel CR register */
;;;214      hdma->Instance->CCR = tmp;  
;;;215      
;;;216      /* Initialise the error code */
;;;217      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;218    
;;;219      /* Initialize the DMA state*/
;;;220      hdma->State = HAL_DMA_STATE_READY;
;;;221      
;;;222      return HAL_OK;
;;;223    }
000010  bd70              POP      {r4-r6,pc}
                  |L7.18|
000012  f8804020          STRB     r4,[r0,#0x20]         ;193
                  |L7.22|
000016  2102              MOVS     r1,#2                 ;197
000018  f8801021          STRB     r1,[r0,#0x21]         ;197
00001c  6803              LDR      r3,[r0,#0]            ;200
00001e  681a              LDR      r2,[r3,#0]            ;200
000020  f64371f0          MOV      r1,#0x3ff0            ;203
000024  438a              BICS     r2,r2,r1              ;203
000026  e9d01501          LDRD     r1,r5,[r0,#4]         ;203
00002a  4329              ORRS     r1,r1,r5              ;208
00002c  e9d05603          LDRD     r5,r6,[r0,#0xc]       ;208
000030  4335              ORRS     r5,r5,r6              ;208
000032  4329              ORRS     r1,r1,r5              ;208
000034  6945              LDR      r5,[r0,#0x14]         ;208
000036  4329              ORRS     r1,r1,r5              ;208
000038  6985              LDR      r5,[r0,#0x18]         ;208
00003a  4329              ORRS     r1,r1,r5              ;208
00003c  69c5              LDR      r5,[r0,#0x1c]         ;208
00003e  4329              ORRS     r1,r1,r5              ;208
000040  4311              ORRS     r1,r1,r2              ;208
000042  6019              STR      r1,[r3,#0]            ;214
000044  6344              STR      r4,[r0,#0x34]         ;217
000046  2101              MOVS     r1,#1                 ;220
000048  f8801021          STRB     r1,[r0,#0x21]         ;220
00004c  2000              MOVS     r0,#0                 ;222
00004e  bd70              POP      {r4-r6,pc}
;;;224    
                          ENDP


                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;434    {
000004  b082              SUB      sp,sp,#8
;;;435      uint32_t temp;
;;;436      uint32_t tickstart = 0x00;
;;;437      
;;;438      /* Get the level transfer complete flag */
;;;439      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;440      {
;;;441        /* Transfer Complete flag */
;;;442        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
000006  4d8c              LDR      r5,|L8.568|
000008  4604              MOV      r4,r0                 ;434
00000a  4e8b              LDR      r6,|L8.568|
00000c  f8df8228          LDR      r8,|L8.568|
000010  f8df9224          LDR      r9,|L8.568|
000014  f8dfa220          LDR      r10,|L8.568|
000018  f8dfb21c          LDR      r11,|L8.568|
00001c  3514              ADDS     r5,r5,#0x14
00001e  9903              LDR      r1,[sp,#0xc]
000020  6800              LDR      r0,[r0,#0]
000022  3628              ADDS     r6,r6,#0x28
000024  f108083c          ADD      r8,r8,#0x3c
000028  f1090950          ADD      r9,r9,#0x50
00002c  f10a0a64          ADD      r10,r10,#0x64
000030  b119              CBZ      r1,|L8.58|
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Half Transfer Complete flag */
;;;447        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
000032  4558              CMP      r0,r11
000034  d120              BNE      |L8.120|
000036  2704              MOVS     r7,#4
000038  e038              B        |L8.172|
                  |L8.58|
00003a  4558              CMP      r0,r11                ;442
00003c  d101              BNE      |L8.66|
00003e  2702              MOVS     r7,#2                 ;442
000040  e034              B        |L8.172|
                  |L8.66|
000042  42a8              CMP      r0,r5                 ;442
000044  d101              BNE      |L8.74|
000046  2720              MOVS     r7,#0x20              ;442
000048  e030              B        |L8.172|
                  |L8.74|
00004a  42b0              CMP      r0,r6                 ;442
00004c  d102              BNE      |L8.84|
00004e  f44f7700          MOV      r7,#0x200             ;442
000052  e02b              B        |L8.172|
                  |L8.84|
000054  4540              CMP      r0,r8                 ;442
000056  d102              BNE      |L8.94|
000058  f44f5700          MOV      r7,#0x2000            ;442
00005c  e026              B        |L8.172|
                  |L8.94|
00005e  4548              CMP      r0,r9                 ;442
000060  d102              BNE      |L8.104|
000062  f44f3700          MOV      r7,#0x20000           ;442
000066  e021              B        |L8.172|
                  |L8.104|
000068  4550              CMP      r0,r10                ;442
00006a  d102              BNE      |L8.114|
00006c  f44f1700          MOV      r7,#0x200000          ;442
000070  e01c              B        |L8.172|
                  |L8.114|
000072  f04f7700          MOV      r7,#0x2000000         ;442
000076  e019              B        |L8.172|
                  |L8.120|
000078  42a8              CMP      r0,r5
00007a  d101              BNE      |L8.128|
00007c  2740              MOVS     r7,#0x40
00007e  e015              B        |L8.172|
                  |L8.128|
000080  42b0              CMP      r0,r6
000082  d102              BNE      |L8.138|
000084  f44f6780          MOV      r7,#0x400
000088  e010              B        |L8.172|
                  |L8.138|
00008a  4540              CMP      r0,r8
00008c  d102              BNE      |L8.148|
00008e  f44f4780          MOV      r7,#0x4000
000092  e00b              B        |L8.172|
                  |L8.148|
000094  4548              CMP      r0,r9
000096  d102              BNE      |L8.158|
000098  f44f2780          MOV      r7,#0x40000
00009c  e006              B        |L8.172|
                  |L8.158|
00009e  4550              CMP      r0,r10
0000a0  d102              BNE      |L8.168|
0000a2  f44f0780          MOV      r7,#0x400000
0000a6  e001              B        |L8.172|
                  |L8.168|
0000a8  f04f6780          MOV      r7,#0x4000000
                  |L8.172|
;;;448      }
;;;449    
;;;450      /* Get tick */
;;;451      tickstart = HAL_GetTick();
0000ac  f7fffffe          BL       HAL_GetTick
;;;452    
;;;453      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
;;;454      {
;;;455        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
0000b0  f8dfb184          LDR      r11,|L8.568|
0000b4  9000              STR      r0,[sp,#0]            ;453
0000b6  f1ab0b08          SUB      r11,r11,#8
0000ba  e069              B        |L8.400|
                  |L8.188|
0000bc  6801              LDR      r1,[r0,#0]
0000be  4a5e              LDR      r2,|L8.568|
0000c0  6820              LDR      r0,[r4,#0]
0000c2  4290              CMP      r0,r2
0000c4  d101              BNE      |L8.202|
0000c6  2208              MOVS     r2,#8
0000c8  e019              B        |L8.254|
                  |L8.202|
0000ca  42a8              CMP      r0,r5
0000cc  d101              BNE      |L8.210|
0000ce  2280              MOVS     r2,#0x80
0000d0  e015              B        |L8.254|
                  |L8.210|
0000d2  42b0              CMP      r0,r6
0000d4  d102              BNE      |L8.220|
0000d6  f44f6200          MOV      r2,#0x800
0000da  e010              B        |L8.254|
                  |L8.220|
0000dc  4540              CMP      r0,r8
0000de  d102              BNE      |L8.230|
0000e0  f44f4200          MOV      r2,#0x8000
0000e4  e00b              B        |L8.254|
                  |L8.230|
0000e6  4548              CMP      r0,r9
0000e8  d102              BNE      |L8.240|
0000ea  f44f2200          MOV      r2,#0x80000
0000ee  e006              B        |L8.254|
                  |L8.240|
0000f0  4550              CMP      r0,r10
0000f2  d102              BNE      |L8.250|
0000f4  f44f0200          MOV      r2,#0x800000
0000f8  e001              B        |L8.254|
                  |L8.250|
0000fa  f04f6200          MOV      r2,#0x8000000
                  |L8.254|
0000fe  4211              TST      r1,r2
000100  d02e              BEQ      |L8.352|
;;;456        {      
;;;457          /* Clear the transfer error flags */
;;;458          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
000102  494d              LDR      r1,|L8.568|
000104  4288              CMP      r0,r1
000106  d101              BNE      |L8.268|
000108  2008              MOVS     r0,#8
00010a  e019              B        |L8.320|
                  |L8.268|
00010c  42a8              CMP      r0,r5
00010e  d101              BNE      |L8.276|
000110  2080              MOVS     r0,#0x80
000112  e015              B        |L8.320|
                  |L8.276|
000114  42b0              CMP      r0,r6
000116  d102              BNE      |L8.286|
000118  f44f6000          MOV      r0,#0x800
00011c  e010              B        |L8.320|
                  |L8.286|
00011e  4540              CMP      r0,r8
000120  d102              BNE      |L8.296|
000122  f44f4000          MOV      r0,#0x8000
000126  e00b              B        |L8.320|
                  |L8.296|
000128  4548              CMP      r0,r9
00012a  d102              BNE      |L8.306|
00012c  f44f2000          MOV      r0,#0x80000
000130  e006              B        |L8.320|
                  |L8.306|
000132  4550              CMP      r0,r10
000134  d102              BNE      |L8.316|
000136  f44f0000          MOV      r0,#0x800000
00013a  e001              B        |L8.320|
                  |L8.316|
00013c  f04f6000          MOV      r0,#0x8000000
                  |L8.320|
000140  f8cb0004          STR      r0,[r11,#4]
;;;459          
;;;460          /* Update error code */
;;;461          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
000144  f8540f34          LDR      r0,[r4,#0x34]!
000148  f0400001          ORR      r0,r0,#1
00014c  f8440914          STR      r0,[r4],#-0x14
;;;462    
;;;463          /* Change the DMA state */
;;;464          hdma->State= HAL_DMA_STATE_ERROR;
000150  2004              MOVS     r0,#4
000152  7060              STRB     r0,[r4,#1]
;;;465          
;;;466          /* Process Unlocked */
;;;467          __HAL_UNLOCK(hdma);
000154  2000              MOVS     r0,#0
000156  7020              STRB     r0,[r4,#0]
;;;468          
;;;469          return HAL_ERROR;
000158  2001              MOVS     r0,#1
                  |L8.346|
;;;470        }
;;;471        /* Check for the Timeout */
;;;472        if(Timeout != HAL_MAX_DELAY)
;;;473        {
;;;474          if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
;;;475          {
;;;476            /* Update error code */
;;;477            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;478            
;;;479            /* Change the DMA state */
;;;480            hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;481    
;;;482            /* Process Unlocked */
;;;483            __HAL_UNLOCK(hdma);
;;;484            
;;;485            return HAL_TIMEOUT;
;;;486          }
;;;487        }
;;;488      }
;;;489    
;;;490      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;491      {
;;;492        /* Clear the transfer complete flag */
;;;493        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;494    
;;;495        /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;496        all transfers are complete) */
;;;497        hdma->State = HAL_DMA_STATE_READY;
;;;498    
;;;499      }
;;;500      else
;;;501      { 
;;;502        /* Clear the half transfer complete flag */
;;;503        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;504      
;;;505        /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;506        all transfers of half buffer are complete) */
;;;507        hdma->State = HAL_DMA_STATE_READY_HALF;
;;;508      }
;;;509      
;;;510      /* Process unlocked */
;;;511      __HAL_UNLOCK(hdma);
;;;512    
;;;513      return HAL_OK;
;;;514    }
00015a  b005              ADD      sp,sp,#0x14
00015c  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.352|
000160  9804              LDR      r0,[sp,#0x10]         ;472
000162  1c40              ADDS     r0,r0,#1              ;472
000164  d014              BEQ      |L8.400|
000166  9804              LDR      r0,[sp,#0x10]         ;474
000168  b130              CBZ      r0,|L8.376|
00016a  f7fffffe          BL       HAL_GetTick
00016e  9900              LDR      r1,[sp,#0]            ;474
000170  1a41              SUBS     r1,r0,r1              ;474
000172  9804              LDR      r0,[sp,#0x10]         ;474
000174  4281              CMP      r1,r0                 ;474
000176  d90b              BLS      |L8.400|
                  |L8.376|
000178  f8540f34          LDR      r0,[r4,#0x34]!        ;477
00017c  f0400020          ORR      r0,r0,#0x20           ;477
000180  f8440914          STR      r0,[r4],#-0x14        ;477
000184  2003              MOVS     r0,#3                 ;480
000186  7060              STRB     r0,[r4,#1]            ;480
000188  2000              MOVS     r0,#0                 ;483
00018a  7020              STRB     r0,[r4,#0]            ;483
00018c  2003              MOVS     r0,#3                 ;485
00018e  e7e4              B        |L8.346|
                  |L8.400|
000190  f8db1000          LDR      r1,[r11,#0]           ;453
000194  4658              MOV      r0,r11                ;453
000196  4239              TST      r1,r7                 ;453
000198  d090              BEQ      |L8.188|
00019a  9803              LDR      r0,[sp,#0xc]          ;490
00019c  4926              LDR      r1,|L8.568|
00019e  2800              CMP      r0,#0                 ;490
0001a0  6820              LDR      r0,[r4,#0]            ;490
0001a2  d003              BEQ      |L8.428|
0001a4  4288              CMP      r0,r1                 ;503
0001a6  d123              BNE      |L8.496|
0001a8  2004              MOVS     r0,#4                 ;503
0001aa  e03b              B        |L8.548|
                  |L8.428|
0001ac  4288              CMP      r0,r1                 ;493
0001ae  d101              BNE      |L8.436|
0001b0  2002              MOVS     r0,#2                 ;493
0001b2  e019              B        |L8.488|
                  |L8.436|
0001b4  42a8              CMP      r0,r5                 ;493
0001b6  d101              BNE      |L8.444|
0001b8  2020              MOVS     r0,#0x20              ;493
0001ba  e015              B        |L8.488|
                  |L8.444|
0001bc  42b0              CMP      r0,r6                 ;493
0001be  d102              BNE      |L8.454|
0001c0  f44f7000          MOV      r0,#0x200             ;493
0001c4  e010              B        |L8.488|
                  |L8.454|
0001c6  4540              CMP      r0,r8                 ;493
0001c8  d102              BNE      |L8.464|
0001ca  f44f5000          MOV      r0,#0x2000            ;493
0001ce  e00b              B        |L8.488|
                  |L8.464|
0001d0  4548              CMP      r0,r9                 ;493
0001d2  d102              BNE      |L8.474|
0001d4  f44f3000          MOV      r0,#0x20000           ;493
0001d8  e006              B        |L8.488|
                  |L8.474|
0001da  4550              CMP      r0,r10                ;493
0001dc  d102              BNE      |L8.484|
0001de  f44f1000          MOV      r0,#0x200000          ;493
0001e2  e001              B        |L8.488|
                  |L8.484|
0001e4  f04f7000          MOV      r0,#0x2000000         ;493
                  |L8.488|
0001e8  f8cb0004          STR      r0,[r11,#4]           ;493
0001ec  2001              MOVS     r0,#1                 ;497
0001ee  e01c              B        |L8.554|
                  |L8.496|
0001f0  42a8              CMP      r0,r5                 ;503
0001f2  d101              BNE      |L8.504|
0001f4  2040              MOVS     r0,#0x40              ;503
0001f6  e015              B        |L8.548|
                  |L8.504|
0001f8  42b0              CMP      r0,r6                 ;503
0001fa  d102              BNE      |L8.514|
0001fc  f44f6080          MOV      r0,#0x400             ;503
000200  e010              B        |L8.548|
                  |L8.514|
000202  4540              CMP      r0,r8                 ;503
000204  d102              BNE      |L8.524|
000206  f44f4080          MOV      r0,#0x4000            ;503
00020a  e00b              B        |L8.548|
                  |L8.524|
00020c  4548              CMP      r0,r9                 ;503
00020e  d102              BNE      |L8.534|
000210  f44f2080          MOV      r0,#0x40000           ;503
000214  e006              B        |L8.548|
                  |L8.534|
000216  4550              CMP      r0,r10                ;503
000218  d102              BNE      |L8.544|
00021a  f44f0080          MOV      r0,#0x400000          ;503
00021e  e001              B        |L8.548|
                  |L8.544|
000220  f04f6080          MOV      r0,#0x4000000         ;503
                  |L8.548|
000224  f8cb0004          STR      r0,[r11,#4]           ;503
000228  2011              MOVS     r0,#0x11              ;507
                  |L8.554|
00022a  f8840021          STRB     r0,[r4,#0x21]         ;507
00022e  2000              MOVS     r0,#0                 ;511
000230  f8840020          STRB     r0,[r4,#0x20]         ;511
000234  e791              B        |L8.346|
;;;515    
                          ENDP

000236  0000              DCW      0x0000
                  |L8.568|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;311      */
;;;312    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;313    {
000002  4604              MOV      r4,r0
;;;314      /* Process locked */
;;;315      __HAL_LOCK(hdma);
000004  f8900020          LDRB     r0,[r0,#0x20]
000008  2801              CMP      r0,#1
00000a  d014              BEQ      |L9.54|
00000c  2001              MOVS     r0,#1
00000e  f8840020          STRB     r0,[r4,#0x20]
;;;316    
;;;317      /* Change DMA peripheral state */
;;;318      hdma->State = HAL_DMA_STATE_BUSY;
000012  2002              MOVS     r0,#2
000014  f8840021          STRB     r0,[r4,#0x21]
;;;319    
;;;320       /* Check the parameters */
;;;321      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;322      
;;;323      /* Disable the peripheral */
;;;324      __HAL_DMA_DISABLE(hdma);
000018  6820              LDR      r0,[r4,#0]
00001a  6805              LDR      r5,[r0,#0]
00001c  f0250501          BIC      r5,r5,#1
000020  6005              STR      r5,[r0,#0]
;;;325      
;;;326      /* Configure the source, destination address and the data length */
;;;327      DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DMA_SetConfig
;;;328    
;;;329      /* Enable the Peripheral */
;;;330      __HAL_DMA_ENABLE(hdma);
000028  6820              LDR      r0,[r4,#0]
00002a  6801              LDR      r1,[r0,#0]
00002c  f0410101          ORR      r1,r1,#1
000030  6001              STR      r1,[r0,#0]
;;;331    
;;;332      return HAL_OK; 
000032  2000              MOVS     r0,#0
;;;333    }
000034  bd70              POP      {r4-r6,pc}
                  |L9.54|
000036  2002              MOVS     r0,#2                 ;315
000038  bd70              POP      {r4-r6,pc}
;;;334    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;343      */
;;;344    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;345    {
000002  4604              MOV      r4,r0
;;;346      /* Process locked */
;;;347      __HAL_LOCK(hdma);
000004  f8900020          LDRB     r0,[r0,#0x20]
000008  2801              CMP      r0,#1
00000a  d023              BEQ      |L10.84|
00000c  2001              MOVS     r0,#1
00000e  f8840020          STRB     r0,[r4,#0x20]
;;;348    
;;;349      /* Change DMA peripheral state */
;;;350      hdma->State = HAL_DMA_STATE_BUSY;
000012  2002              MOVS     r0,#2
000014  f8840021          STRB     r0,[r4,#0x21]
;;;351    
;;;352       /* Check the parameters */
;;;353      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;354      
;;;355      /* Disable the peripheral */
;;;356      __HAL_DMA_DISABLE(hdma);
000018  6820              LDR      r0,[r4,#0]
00001a  6805              LDR      r5,[r0,#0]
00001c  f0250501          BIC      r5,r5,#1
000020  6005              STR      r5,[r0,#0]
;;;357      
;;;358      /* Configure the source, destination address and the data length */
;;;359      DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       DMA_SetConfig
;;;360      
;;;361      /* Enable the transfer complete interrupt */
;;;362      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
000028  6820              LDR      r0,[r4,#0]
00002a  6801              LDR      r1,[r0,#0]
00002c  f0410102          ORR      r1,r1,#2
000030  6001              STR      r1,[r0,#0]
;;;363    
;;;364      /* Enable the Half transfer complete interrupt */
;;;365      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
000032  6820              LDR      r0,[r4,#0]
000034  6801              LDR      r1,[r0,#0]
000036  f0410104          ORR      r1,r1,#4
00003a  6001              STR      r1,[r0,#0]
;;;366    
;;;367      /* Enable the transfer Error interrupt */
;;;368      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
00003c  6820              LDR      r0,[r4,#0]
00003e  6801              LDR      r1,[r0,#0]
000040  f0410108          ORR      r1,r1,#8
000044  6001              STR      r1,[r0,#0]
;;;369      
;;;370       /* Enable the Peripheral */
;;;371      __HAL_DMA_ENABLE(hdma);
000046  6820              LDR      r0,[r4,#0]
000048  6801              LDR      r1,[r0,#0]
00004a  f0410101          ORR      r1,r1,#1
00004e  6001              STR      r1,[r0,#0]
;;;372      
;;;373      return HAL_OK;
000050  2000              MOVS     r0,#0
;;;374    } 
000052  bd70              POP      {r4-r6,pc}
                  |L10.84|
000054  2002              MOVS     r0,#2                 ;347
000056  bd70              POP      {r4-r6,pc}
;;;375    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 463 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 665
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
