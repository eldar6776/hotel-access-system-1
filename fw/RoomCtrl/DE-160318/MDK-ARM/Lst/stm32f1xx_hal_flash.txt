; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-160318\stm32f1xx_hal_flash.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-160318\stm32f1xx_hal_flash.d --feedback=.\DE-160318\DE-160318.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I.\RTE\_DE-160318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-160318\stm32f1xx_hal_flash.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;542      */
;;;543    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4b04              LDR      r3,|L1.20|
;;;544    {
;;;545      /* Clean the error context */
;;;546      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2200              MOVS     r2,#0
000004  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;547      
;;;548    #if defined(FLASH_BANK2_END)
;;;549      if(Address <= FLASH_BANK1_END)
;;;550      {
;;;551    #endif /* FLASH_BANK2_END */
;;;552        /* Proceed to program the new data */
;;;553        SET_BIT(FLASH->CR, FLASH_CR_PG);
000006  4a04              LDR      r2,|L1.24|
000008  6913              LDR      r3,[r2,#0x10]
00000a  f0430301          ORR      r3,r3,#1
00000e  6113              STR      r3,[r2,#0x10]
;;;554    #if defined(FLASH_BANK2_END)
;;;555      }
;;;556      else
;;;557      {
;;;558        /* Proceed to program the new data */
;;;559        SET_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;560      }
;;;561    #endif /* FLASH_BANK2_END */
;;;562    
;;;563      /* Write data in the address */
;;;564      *(__IO uint16_t*)Address = Data;
000010  8001              STRH     r1,[r0,#0]
;;;565    }
000012  4770              BX       lr
;;;566    
                          ENDP

                  |L1.20|
                          DCD      ||.bss||
                  |L1.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;659      */
;;;660    static void FLASH_SetErrorCode(void)
000000  490e              LDR      r1,|L2.60|
;;;661    { 
;;;662    #if defined(FLASH_BANK2_END)
;;;663      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
;;;664    #else
;;;665      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000002  68c8              LDR      r0,[r1,#0xc]
000004  06c2              LSLS     r2,r0,#27
;;;666    #endif /* FLASH_BANK2_END */
;;;667      {
;;;668        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
000006  480e              LDR      r0,|L2.64|
000008  d503              BPL      |L2.18|
00000a  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00000c  f0420202          ORR      r2,r2,#2
000010  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L2.18|
;;;669      }
;;;670    #if defined(FLASH_BANK2_END)
;;;671      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
;;;672    #else
;;;673      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000012  68ca              LDR      r2,[r1,#0xc]
000014  0752              LSLS     r2,r2,#29
000016  d503              BPL      |L2.32|
;;;674    #endif /* FLASH_BANK2_END */
;;;675      {
;;;676         pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
000018  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00001a  f0420201          ORR      r2,r2,#1
00001e  61c2              STR      r2,[r0,#0x1c]  ; pFlash
                  |L2.32|
;;;677      }
;;;678    
;;;679      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
000020  69ca              LDR      r2,[r1,#0x1c]
000022  07d2              LSLS     r2,r2,#31
000024  d007              BEQ      |L2.54|
;;;680      {
;;;681         pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
000026  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
000028  f0420204          ORR      r2,r2,#4
00002c  61c2              STR      r2,[r0,#0x1c]  ; pFlash
;;;682         __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
00002e  69c8              LDR      r0,[r1,#0x1c]
000030  f0200001          BIC      r0,r0,#1
000034  61c8              STR      r0,[r1,#0x1c]
                  |L2.54|
;;;683      }
;;;684    
;;;685      /* Clear FLASH error pending bits */
;;;686    #if defined(FLASH_BANK2_END)
;;;687      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2);
;;;688    #else
;;;689      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
000036  2014              MOVS     r0,#0x14
000038  60c8              STR      r0,[r1,#0xc]
;;;690    #endif /* FLASH_BANK2_END */
;;;691    }  
00003a  4770              BX       lr
;;;692    /**
                          ENDP

                  |L2.60|
                          DCD      0x40022000
                  |L2.64|
                          DCD      ||.bss||

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;571      */
;;;572    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;573    {
000002  4605              MOV      r5,r0
;;;574      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;575         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;576         flag will be set */
;;;577         
;;;578      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4606              MOV      r6,r0
;;;579         
;;;580      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
00000a  4c11              LDR      r4,|L3.80|
00000c  e009              B        |L3.34|
                  |L3.14|
;;;581      { 
;;;582        if (Timeout != HAL_MAX_DELAY)
00000e  1c68              ADDS     r0,r5,#1
000010  d007              BEQ      |L3.34|
;;;583        {
;;;584          if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
000012  b125              CBZ      r5,|L3.30|
000014  f7fffffe          BL       HAL_GetTick
000018  1b80              SUBS     r0,r0,r6
00001a  42a8              CMP      r0,r5
00001c  d901              BLS      |L3.34|
                  |L3.30|
;;;585          {
;;;586            return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
;;;587          }
;;;588        }
;;;589      }
;;;590      
;;;591      /* Check FLASH End of Operation flag  */
;;;592      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;593      {
;;;594        /* Clear FLASH End of Operation pending bit */
;;;595        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;596      }
;;;597      
;;;598      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;599         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;600         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;601      {
;;;602        /*Save the error code*/
;;;603        FLASH_SetErrorCode();
;;;604        return HAL_ERROR;
;;;605      }
;;;606    
;;;607      /* If there is no error flag set */
;;;608      return HAL_OK;
;;;609    }
000020  bd70              POP      {r4-r6,pc}
                  |L3.34|
000022  68e0              LDR      r0,[r4,#0xc]          ;580
000024  07c0              LSLS     r0,r0,#31             ;580
000026  d1f2              BNE      |L3.14|
000028  68e0              LDR      r0,[r4,#0xc]          ;592
00002a  0680              LSLS     r0,r0,#26             ;592
00002c  d501              BPL      |L3.50|
00002e  2020              MOVS     r0,#0x20              ;595
000030  60e0              STR      r0,[r4,#0xc]          ;595
                  |L3.50|
000032  68e0              LDR      r0,[r4,#0xc]          ;598
000034  06c0              LSLS     r0,r0,#27             ;598
000036  d405              BMI      |L3.68|
000038  69e0              LDR      r0,[r4,#0x1c]         ;599
00003a  07c0              LSLS     r0,r0,#31             ;599
00003c  d102              BNE      |L3.68|
00003e  68e0              LDR      r0,[r4,#0xc]          ;600
000040  0740              LSLS     r0,r0,#29             ;600
000042  d503              BPL      |L3.76|
                  |L3.68|
000044  f7fffffe          BL       FLASH_SetErrorCode
000048  2001              MOVS     r0,#1                 ;604
00004a  bd70              POP      {r4-r6,pc}
                  |L3.76|
00004c  2000              MOVS     r0,#0                 ;608
00004e  bd70              POP      {r4-r6,pc}
;;;610    
                          ENDP

                  |L3.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;356      */
;;;357    __WEAK void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;358    {
;;;359      /* Prevent unused argument(s) compilation warning */
;;;360      UNUSED(ReturnValue);
;;;361      /* NOTE : This function Should not be modified, when the callback is needed,
;;;362                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;363       */ 
;;;364    }
;;;365    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;520      */
;;;521    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;522    { 
;;;523       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;524    }  
000004  4770              BX       lr
;;;525    /**
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;438      */
;;;439    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L6.16|
;;;440    {
;;;441      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;442      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;443      
;;;444    #if defined(FLASH_BANK2_END)
;;;445      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;446      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;447    #endif /* FLASH_BANK2_END */
;;;448    
;;;449      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;450    }
00000c  4770              BX       lr
;;;451    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OB_Launch PROC
;;;489      */
;;;490    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;491    {
;;;492      /* Initiates a system reset request to launch the option byte loading */
;;;493      HAL_NVIC_SystemReset();
000002  f7fffffe          BL       HAL_NVIC_SystemReset
;;;494      
;;;495      return HAL_OK;  
000006  2000              MOVS     r0,#0
;;;496    }
000008  bd10              POP      {r4,pc}
;;;497    
                          ENDP


                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;476      */
;;;477    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L8.16|
;;;478    {
;;;479      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;480      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6901              LDR      r1,[r0,#0x10]
000004  f4217100          BIC      r1,r1,#0x200
000008  6101              STR      r1,[r0,#0x10]
;;;481      
;;;482      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;483    }
00000c  4770              BX       lr
;;;484      
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;456      */
;;;457    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L9.24|
;;;458    {
;;;459      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6901              LDR      r1,[r0,#0x10]
000004  0589              LSLS     r1,r1,#22
000006  d405              BMI      |L9.20|
;;;460      {
;;;461        /* Authorizes the Option Byte register programming */
;;;462        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
000008  4904              LDR      r1,|L9.28|
00000a  6081              STR      r1,[r0,#8]
;;;463        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
00000c  4904              LDR      r1,|L9.32|
00000e  6081              STR      r1,[r0,#8]
;;;464      }
;;;465      else
;;;466      {
;;;467        return HAL_ERROR;
;;;468      }  
;;;469      
;;;470      return HAL_OK;  
000010  2000              MOVS     r0,#0
;;;471    }
000012  4770              BX       lr
                  |L9.20|
000014  2001              MOVS     r0,#1                 ;467
000016  4770              BX       lr
;;;472    
                          ENDP

                  |L9.24|
                          DCD      0x40022000
                  |L9.28|
                          DCD      0x45670123
                  |L9.32|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;373      */
;;;374    __WEAK void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;375    {
;;;376      /* Prevent unused argument(s) compilation warning */
;;;377      UNUSED(ReturnValue);
;;;378      /* NOTE : This function Should not be modified, when the callback is needed,
;;;379                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;380       */ 
;;;381    }
;;;382    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;185      */
;;;186    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;187    {
000004  4607              MOV      r7,r0
;;;188      HAL_StatusTypeDef status = HAL_ERROR;
;;;189      uint8_t index = 0;
;;;190      uint8_t nbiterations = 0;
;;;191      
;;;192      /* Process Locked */
;;;193      __HAL_LOCK(&pFlash);
000006  481c              LDR      r0,|L11.120|
000008  4688              MOV      r8,r1                 ;187
00000a  2400              MOVS     r4,#0                 ;189
00000c  7e01              LDRB     r1,[r0,#0x18]  ; pFlash
00000e  4615              MOV      r5,r2                 ;187
000010  461e              MOV      r6,r3                 ;187
000012  2901              CMP      r1,#1
000014  d009              BEQ      |L11.42|
000016  2101              MOVS     r1,#1
000018  4681              MOV      r9,r0
00001a  7601              STRB     r1,[r0,#0x18]
;;;194    
;;;195      /* Check the parameters */
;;;196      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;197      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;198    
;;;199    #if defined(FLASH_BANK2_END)
;;;200      if(Address <= FLASH_BANK1_END)
;;;201      {
;;;202    #endif /* FLASH_BANK2_END */
;;;203        /* Wait for last operation to be completed */
;;;204        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00001c  f24c3a50          MOV      r10,#0xc350
000020  4650              MOV      r0,r10
000022  f7fffffe          BL       FLASH_WaitForLastOperation
000026  b118              CBZ      r0,|L11.48|
000028  e022              B        |L11.112|
                  |L11.42|
00002a  2002              MOVS     r0,#2                 ;193
                  |L11.44|
;;;205    #if defined(FLASH_BANK2_END)
;;;206      }
;;;207      else
;;;208      {
;;;209        /* Wait for last operation to be completed */
;;;210        status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;211      }
;;;212    #endif /* FLASH_BANK2_END */
;;;213      
;;;214      if(status == HAL_OK)
;;;215      {
;;;216        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;217        {
;;;218          /* Program halfword (16-bit) at a specified address. */
;;;219          nbiterations = 1;
;;;220        }
;;;221        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;222        {
;;;223          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;224          nbiterations = 2;
;;;225        }
;;;226        else
;;;227        {
;;;228          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;229          nbiterations = 4;
;;;230        }
;;;231    
;;;232        for (index = 0; index < nbiterations; index++)
;;;233        {
;;;234          FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
;;;235    
;;;236    #if defined(FLASH_BANK2_END)
;;;237          if(Address <= FLASH_BANK1_END)
;;;238          {
;;;239    #endif /* FLASH_BANK2_END */
;;;240            /* Wait for last operation to be completed */
;;;241            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;242        
;;;243            /* If the program operation is completed, disable the PG Bit */
;;;244            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;245    #if defined(FLASH_BANK2_END)
;;;246          }
;;;247          else
;;;248          {
;;;249            /* Wait for last operation to be completed */
;;;250            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;251            
;;;252            /* If the program operation is completed, disable the PG Bit */
;;;253            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;254          }
;;;255    #endif /* FLASH_BANK2_END */
;;;256          /* In case of error, stop programation procedure */
;;;257          if (status != HAL_OK)
;;;258          {
;;;259            break;
;;;260          }
;;;261        }
;;;262      }
;;;263    
;;;264      /* Process Unlocked */
;;;265      __HAL_UNLOCK(&pFlash);
;;;266    
;;;267      return status;
;;;268    }
00002c  e8bd9ff0          POP      {r4-r12,pc}
                  |L11.48|
000030  2f01              CMP      r7,#1                 ;216
000032  d002              BEQ      |L11.58|
000034  2f02              CMP      r7,#2                 ;221
000036  d000              BEQ      |L11.58|
000038  2704              MOVS     r7,#4                 ;229
                  |L11.58|
00003a  46d3              MOV      r11,r10               ;204
00003c  f8dfa03c          LDR      r10,|L11.124|
                  |L11.64|
000040  0122              LSLS     r2,r4,#4              ;244
000042  4628              MOV      r0,r5                 ;234
000044  4631              MOV      r1,r6                 ;234
000046  f7fffffe          BL       __aeabi_llsr
00004a  b281              UXTH     r1,r0                 ;234
00004c  eb080044          ADD      r0,r8,r4,LSL #1       ;234
000050  f7fffffe          BL       FLASH_Program_HalfWord
000054  4658              MOV      r0,r11                ;241
000056  f7fffffe          BL       FLASH_WaitForLastOperation
00005a  f8da2010          LDR      r2,[r10,#0x10]        ;244
00005e  f0220201          BIC      r2,r2,#1              ;244
000062  f8ca2010          STR      r2,[r10,#0x10]        ;244
000066  b918              CBNZ     r0,|L11.112|
000068  1c64              ADDS     r4,r4,#1              ;257
00006a  b2e4              UXTB     r4,r4                 ;232
00006c  42bc              CMP      r4,r7                 ;232
00006e  d3e7              BCC      |L11.64|
                  |L11.112|
000070  2200              MOVS     r2,#0                 ;265
000072  f8892018          STRB     r2,[r9,#0x18]         ;265
000076  e7d9              B        |L11.44|
;;;269    
                          ENDP

                  |L11.120|
                          DCD      ||.bss||
                  |L11.124|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;284      */
;;;285    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;286    {
000004  460d              MOV      r5,r1
000006  4601              MOV      r1,r0
;;;287      HAL_StatusTypeDef status = HAL_OK;
;;;288      
;;;289      /* Process Locked */
;;;290      __HAL_LOCK(&pFlash);
000008  4814              LDR      r0,|L12.92|
00000a  2400              MOVS     r4,#0                 ;287
00000c  7e06              LDRB     r6,[r0,#0x18]  ; pFlash
00000e  2e01              CMP      r6,#1
000010  d01a              BEQ      |L12.72|
;;;291    
;;;292      /* Check the parameters */
;;;293      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;294      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;295    
;;;296    #if defined(FLASH_BANK2_END)
;;;297      /* If procedure already ongoing, reject the next one */
;;;298      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;299      {
;;;300        return HAL_ERROR;
;;;301      }
;;;302      
;;;303      if(Address <= FLASH_BANK1_END)
;;;304      {
;;;305        /* Enable End of FLASH Operation and Error source interrupts */
;;;306        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;307    
;;;308      }else
;;;309      {
;;;310        /* Enable End of FLASH Operation and Error source interrupts */
;;;311        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;312      }
;;;313    #else
;;;314      /* Enable End of FLASH Operation and Error source interrupts */
;;;315      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
000012  4f13              LDR      r7,|L12.96|
000014  2601              MOVS     r6,#1                 ;290
000016  7606              STRB     r6,[r0,#0x18]         ;290
000018  f8d7c010          LDR      r12,[r7,#0x10]
00001c  f44c5ca0          ORR      r12,r12,#0x1400
000020  f8c7c010          STR      r12,[r7,#0x10]
;;;316    #endif /* FLASH_BANK2_END */
;;;317      
;;;318      pFlash.Address = Address;
000024  6085              STR      r5,[r0,#8]  ; pFlash
;;;319      pFlash.Data = Data;
000026  6102              STR      r2,[r0,#0x10]  ; pFlash
000028  6143              STR      r3,[r0,#0x14]  ; pFlash
;;;320    
;;;321      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
00002a  2901              CMP      r1,#1
00002c  d00e              BEQ      |L12.76|
;;;322      {
;;;323        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;324        /*Program halfword (16-bit) at a specified address.*/
;;;325        pFlash.DataRemaining = 1;
;;;326      }
;;;327      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;328      {
;;;329        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
00002e  2304              MOVS     r3,#4
000030  2902              CMP      r1,#2                 ;327
000032  d00f              BEQ      |L12.84|
;;;330        /*Program word (32-bit : 2*16-bit) at a specified address.*/
;;;331        pFlash.DataRemaining = 2;
;;;332      }
;;;333      else
;;;334      {
;;;335        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
000034  2105              MOVS     r1,#5
000036  7001              STRB     r1,[r0,#0]
;;;336        /*Program double word (64-bit : 4*16-bit) at a specified address.*/
;;;337        pFlash.DataRemaining = 4;
000038  6043              STR      r3,[r0,#4]  ; pFlash
                  |L12.58|
;;;338      }
;;;339    
;;;340      /*Program halfword (16-bit) at a specified address.*/
;;;341      FLASH_Program_HalfWord(Address, (uint16_t)Data);
00003a  b291              UXTH     r1,r2
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       FLASH_Program_HalfWord
;;;342    
;;;343      return status;
000042  4620              MOV      r0,r4
                  |L12.68|
;;;344    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L12.72|
000048  2002              MOVS     r0,#2                 ;290
00004a  e7fb              B        |L12.68|
                  |L12.76|
00004c  2103              MOVS     r1,#3                 ;323
00004e  7001              STRB     r1,[r0,#0]            ;323
000050  6046              STR      r6,[r0,#4]            ;325  ; pFlash
000052  e7f2              B        |L12.58|
                  |L12.84|
000054  7003              STRB     r3,[r0,#0]            ;329
000056  2102              MOVS     r1,#2                 ;331
000058  6041              STR      r1,[r0,#4]            ;331  ; pFlash
00005a  e7ee              B        |L12.58|
;;;345    
                          ENDP

                  |L12.92|
                          DCD      ||.bss||
                  |L12.96|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;405      */
;;;406    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4805              LDR      r0,|L13.24|
;;;407    {
;;;408      if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
000002  6901              LDR      r1,[r0,#0x10]
000004  0609              LSLS     r1,r1,#24
000006  d505              BPL      |L13.20|
;;;409      {
;;;410        /* Authorize the FLASH Registers access */
;;;411        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
000008  4904              LDR      r1,|L13.28|
00000a  6041              STR      r1,[r0,#4]
;;;412        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
00000c  4904              LDR      r1,|L13.32|
00000e  6041              STR      r1,[r0,#4]
;;;413      }
;;;414      else
;;;415      {
;;;416        return HAL_ERROR;
;;;417      }
;;;418    
;;;419    #if defined(FLASH_BANK2_END)
;;;420      if (HAL_IS_BIT_SET(FLASH->CR2, FLASH_CR2_LOCK))
;;;421      {
;;;422        /* Authorize the FLASH BANK2 Registers access */
;;;423        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;424        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;425      }
;;;426      else
;;;427      {
;;;428        return HAL_ERROR;
;;;429      }
;;;430      
;;;431    #endif /* FLASH_BANK2_END */
;;;432      return HAL_OK; 
000010  2000              MOVS     r0,#0
;;;433    }
000012  4770              BX       lr
                  |L13.20|
000014  2001              MOVS     r0,#1                 ;416
000016  4770              BX       lr
;;;434    
                          ENDP

                  |L13.24|
                          DCD      0x40022000
                  |L13.28|
                          DCD      0x45670123
                  |L13.32|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 463 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 478
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 665
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
