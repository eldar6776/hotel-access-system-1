; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-160318\stm32f1xx_hal.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-160318\stm32f1xx_hal.d --feedback=.\DE-160318\DE-160318.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I.\RTE\_DE-160318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-160318\stm32f1xx_hal.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;425      */
;;;426    void HAL_DBGMCU_DisableDBGSleepMode(void)
000000  4802              LDR      r0,|L1.12|
;;;427    {
;;;428      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6841              LDR      r1,[r0,#4]
000004  f0210101          BIC      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;429    }
00000a  4770              BX       lr
;;;430    
                          ENDP

                  |L1.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;503      */
;;;504    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4802              LDR      r0,|L2.12|
;;;505    {
;;;506      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  f0210104          BIC      r1,r1,#4
000008  6041              STR      r1,[r0,#4]
;;;507    }
00000a  4770              BX       lr
;;;508    
                          ENDP

                  |L2.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;471      */
;;;472    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4802              LDR      r0,|L3.12|
;;;473    {
;;;474      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  f0210102          BIC      r1,r1,#2
000008  6041              STR      r1,[r0,#4]
;;;475    }
00000a  4770              BX       lr
;;;476    
                          ENDP

                  |L3.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;409      */
;;;410    void HAL_DBGMCU_EnableDBGSleepMode(void)
000000  4802              LDR      r0,|L4.12|
;;;411    {
;;;412      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6841              LDR      r1,[r0,#4]
000004  f0410101          ORR      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;413    }
00000a  4770              BX       lr
;;;414    
                          ENDP

                  |L4.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;487      */
;;;488    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4802              LDR      r0,|L5.12|
;;;489    {
;;;490      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  f0410104          ORR      r1,r1,#4
000008  6041              STR      r1,[r0,#4]
;;;491    }
00000a  4770              BX       lr
;;;492    
                          ENDP

                  |L5.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;455      */
;;;456    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4802              LDR      r0,|L6.12|
;;;457    {
;;;458      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  f0410102          ORR      r1,r1,#2
000008  6041              STR      r1,[r0,#4]
;;;459    }
00000a  4770              BX       lr
;;;460    
                          ENDP

                  |L6.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;189      */
;;;190    HAL_StatusTypeDef HAL_DeInit(void)
000000  4806              LDR      r0,|L7.28|
;;;191    {
000002  b510              PUSH     {r4,lr}
;;;192      /* Reset of all peripherals */
;;;193      __HAL_RCC_APB1_FORCE_RESET();
000004  f04f31ff          MOV      r1,#0xffffffff
000008  60c1              STR      r1,[r0,#0xc]
;;;194      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2200              MOVS     r2,#0
00000c  6102              STR      r2,[r0,#0x10]
;;;195    
;;;196      __HAL_RCC_APB2_FORCE_RESET();
00000e  60c1              STR      r1,[r0,#0xc]
;;;197      __HAL_RCC_APB2_RELEASE_RESET();
000010  60c2              STR      r2,[r0,#0xc]
;;;198    
;;;199    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;200      __HAL_RCC_AHB_FORCE_RESET();
;;;201      __HAL_RCC_AHB_RELEASE_RESET();
;;;202    #endif
;;;203      
;;;204      /* De-Init the low level hardware */
;;;205      HAL_MspDeInit();
000012  f7fffffe          BL       HAL_MspDeInit
;;;206        
;;;207      /* Return function status */
;;;208      return HAL_OK;
000016  2000              MOVS     r0,#0
;;;209    }
000018  bd10              POP      {r4,pc}
;;;210    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40021000

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=1

                  HAL_Delay PROC
;;;323      */
;;;324    __WEAK void HAL_Delay(__IO uint32_t Delay)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;325    {
;;;326      uint32_t tickstart = 0;
;;;327      tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
                  |L8.8|
;;;328      while((HAL_GetTick() - tickstart) < Delay)
000008  f7fffffe          BL       HAL_GetTick
00000c  9900              LDR      r1,[sp,#0]
00000e  1b00              SUBS     r0,r0,r4
000010  4288              CMP      r0,r1
000012  d3f9              BCC      |L8.8|
;;;329      {
;;;330      }
;;;331    }
000014  bd38              POP      {r3-r5,pc}
;;;332    
                          ENDP


                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;400      */
;;;401    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L9.12|
;;;402    {
;;;403       return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;404    }
000008  4770              BX       lr
;;;405    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;368      */
;;;369    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L10.4|
;;;370    {
;;;371     return __STM32F1xx_HAL_VERSION;
;;;372    }
000002  4770              BX       lr
;;;373    
                          ENDP

                  |L10.4|
                          DCD      0x01000300

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;384      */
;;;385    uint32_t HAL_GetREVID(void)
000000  4804              LDR      r0,|L11.20|
;;;386    {
;;;387      return((DBGMCU->IDCODE) >> POSITION_VAL(DBGMCU_IDCODE_REV_ID));
000002  6800              LDR      r0,[r0,#0]
000004  4904              LDR      r1,|L11.24|
000006  fa91f1a1          RBIT     r1,r1
00000a  fab1f181          CLZ      r1,r1
00000e  40c8              LSRS     r0,r0,r1
;;;388    }
000010  4770              BX       lr
;;;389    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0xe0042000
                  |L11.24|
                          DCD      0xffff0000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;307      */
;;;308    __WEAK uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L12.8|
;;;309    {
;;;310      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;311    }
000004  4770              BX       lr
;;;312    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;296      */
;;;297    __WEAK void HAL_IncTick(void)
000000  4802              LDR      r0,|L13.12|
;;;298    {
;;;299      uwTick++;
000002  6801              LDR      r1,[r0,#0]  ; uwTick
000004  1c49              ADDS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]  ; uwTick
;;;300    }
000008  4770              BX       lr
;;;301    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      ||.data||

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;156      */
;;;157    HAL_StatusTypeDef HAL_Init(void)
000000  4807              LDR      r0,|L14.32|
;;;158    {
000002  b510              PUSH     {r4,lr}
;;;159      /* Configure Flash prefetch */
;;;160    #if (PREFETCH_ENABLE != 0)
;;;161    #if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) || \
;;;162        defined(STM32F102x6) || defined(STM32F102xB) || \
;;;163        defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
;;;164        defined(STM32F105xC) || defined(STM32F107xC)
;;;165    
;;;166      /* Prefetch buffer is not available on value line devices */
;;;167      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000004  6801              LDR      r1,[r0,#0]
000006  f0410110          ORR      r1,r1,#0x10
00000a  6001              STR      r1,[r0,#0]
;;;168    #endif
;;;169    #endif /* PREFETCH_ENABLE */
;;;170    
;;;171      /* Set Interrupt Group Priority */
;;;172      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;173    
;;;174      /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
;;;175      HAL_InitTick(TICK_INT_PRIORITY);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       HAL_InitTick
;;;176    
;;;177      /* Init the low level hardware */
;;;178      HAL_MspInit();
000018  f7fffffe          BL       HAL_MspInit
;;;179    
;;;180      /* Return function status */
;;;181      return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;182    }
00001e  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  |L14.32|
                          DCD      0x40022000

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=1

                  HAL_InitTick PROC
;;;248      */
;;;249    __WEAK HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b510              PUSH     {r4,lr}
;;;250    {
000002  4604              MOV      r4,r0
;;;251      /*Configure the SysTick to have interrupt in 1ms time basis*/
;;;252      HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
000004  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000008  f44f717a          MOV      r1,#0x3e8
00000c  fbb0f0f1          UDIV     r0,r0,r1
000010  f7fffffe          BL       HAL_SYSTICK_Config
;;;253    
;;;254      /*Configure the SysTick IRQ priority */
;;;255      HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
000014  2200              MOVS     r2,#0
000016  4621              MOV      r1,r4
000018  1e50              SUBS     r0,r2,#1
00001a  f7fffffe          BL       HAL_NVIC_SetPriority
;;;256    
;;;257       /* Return function status */
;;;258      return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;259    }
000020  bd10              POP      {r4,pc}
;;;260    
                          ENDP


                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;225      */
;;;226    __WEAK void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;227    {
;;;228      /* NOTE : This function Should not be modified, when the callback is needed,
;;;229                the HAL_MspDeInit could be implemented in the user file
;;;230       */
;;;231    }
;;;232    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;214      */
;;;215    __WEAK void HAL_MspInit(void)
000000  4770              BX       lr
;;;216    {
;;;217      /* NOTE : This function Should not be modified, when the callback is needed,
;;;218                the HAL_MspInit could be implemented in the user file
;;;219       */
;;;220    }
;;;221    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=1

                  HAL_ResumeTick PROC
;;;358      */
;;;359    __WEAK void HAL_ResumeTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;360    {
;;;361      /* Enable SysTick Interrupt */
;;;362      SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
000004  6901              LDR      r1,[r0,#0x10]
000006  f0410102          ORR      r1,r1,#2
00000a  6101              STR      r1,[r0,#0x10]
;;;363    }
00000c  4770              BX       lr
;;;364    
                          ENDP


                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=1

                  HAL_SuspendTick PROC
;;;342      */
;;;343    __WEAK void HAL_SuspendTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;344    {
;;;345      /* Disable SysTick Interrupt */
;;;346      CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
000004  6901              LDR      r1,[r0,#0x10]
000006  f0210102          BIC      r1,r1,#2
00000a  6101              STR      r1,[r0,#0x10]
;;;347    }
00000c  4770              BX       lr
;;;348    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_HAL_Init____REV16|
#line 463 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_stm32f1xx_hal_c_HAL_Init____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_HAL_Init____REVSH|
#line 478
|__asm___15_stm32f1xx_hal_c_HAL_Init____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_HAL_Init____RRX|
#line 665
|__asm___15_stm32f1xx_hal_c_HAL_Init____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
