; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\de-160318\main.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\de-160318\main.d --feedback=.\DE-160318\DE-160318.fed --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I.\RTE\_DE-160318 -IC:\Keil\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\de-160318\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.EEPROM_WriteUpdateStatus||, CODE, READONLY, ALIGN=2

                  EEPROM_WriteUpdateStatus PROC
;;;358    
;;;359    static void EEPROM_WriteUpdateStatus(uint8_t status)
000000  b51c              PUSH     {r2-r4,lr}
;;;360    {
;;;361        uint8_t eebuff[4];
;;;362        
;;;363        eebuff[0] = EE_FW_UPDATE_STATUS >> 8U;
000002  2100              MOVS     r1,#0
000004  f88d1004          STRB     r1,[sp,#4]
;;;364        eebuff[1] = EE_FW_UPDATE_STATUS & 0xFFU;
000008  2125              MOVS     r1,#0x25
00000a  f88d1005          STRB     r1,[sp,#5]
;;;365        eebuff[2] = status;
00000e  f88d0006          STRB     r0,[sp,#6]
;;;366        HAL_I2C_Master_Transmit(&hi2c1, I2C_EE_WRITE, eebuff, 3, I2C_EE_TIMEOUT);
000012  2064              MOVS     r0,#0x64
000014  9000              STR      r0,[sp,#0]
000016  2303              MOVS     r3,#3
000018  aa01              ADD      r2,sp,#4
00001a  21a0              MOVS     r1,#0xa0
00001c  4805              LDR      r0,|L1.52|
00001e  f7fffffe          BL       HAL_I2C_Master_Transmit
;;;367        HAL_I2C_IsDeviceReady(&hi2c1, I2C_EE_WRITE, I2C_EE_TRIALS, I2C_EE_TIMEOUT);
000022  2364              MOVS     r3,#0x64
000024  f44f727a          MOV      r2,#0x3e8
000028  21a0              MOVS     r1,#0xa0
00002a  4802              LDR      r0,|L1.52|
00002c  f7fffffe          BL       HAL_I2C_IsDeviceReady
;;;368    }
000030  bd1c              POP      {r2-r4,pc}
;;;369    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      ||.bss||

                          AREA ||i.FLASH_Erase||, CODE, READONLY, ALIGN=2

                  FLASH_Erase PROC
;;;378    
;;;379    static uint32_t FLASH_Erase(uint32_t start)
000000  b530              PUSH     {r4,r5,lr}
;;;380    {
000002  b085              SUB      sp,sp,#0x14
;;;381        uint32_t NbrOfPages = 0U;
;;;382        uint32_t PageError = 0U;
000004  2500              MOVS     r5,#0
000006  4604              MOV      r4,r0                 ;380
;;;383        FLASH_EraseInitTypeDef pEraseInit;
;;;384        HAL_StatusTypeDef status = HAL_OK;
;;;385    
;;;386        HAL_FLASH_Unlock();
000008  9504              STR      r5,[sp,#0x10]
00000a  f7fffffe          BL       HAL_FLASH_Unlock
;;;387    
;;;388        NbrOfPages = (USER_FLASH_END_ADDRESS - start)/FLASH_PAGE_SIZE;
00000e  480a              LDR      r0,|L2.56|
;;;389    
;;;390        pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
;;;391        pEraseInit.PageAddress = start;
;;;392        pEraseInit.Banks = FLASH_BANK_1;
000010  2101              MOVS     r1,#1
000012  1b00              SUBS     r0,r0,r4              ;388
000014  0a80              LSRS     r0,r0,#10             ;388
;;;393        pEraseInit.NbPages = NbrOfPages;
000016  9003              STR      r0,[sp,#0xc]
000018  9500              STR      r5,[sp,#0]
00001a  e9cd1401          STRD     r1,r4,[sp,#4]
;;;394        status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
00001e  a904              ADD      r1,sp,#0x10
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       HAL_FLASHEx_Erase
000026  4604              MOV      r4,r0
;;;395    
;;;396        HAL_FLASH_Lock();
000028  f7fffffe          BL       HAL_FLASH_Lock
;;;397    
;;;398        if (status != HAL_OK)
00002c  b114              CBZ      r4,|L2.52|
;;;399        {
;;;400            return FLASHIF_ERASEKO;
00002e  2001              MOVS     r0,#1
                  |L2.48|
;;;401        }
;;;402    
;;;403        return FLASHIF_OK;
;;;404    }
000030  b005              ADD      sp,sp,#0x14
000032  bd30              POP      {r4,r5,pc}
                  |L2.52|
000034  2000              MOVS     r0,#0                 ;403
000036  e7fb              B        |L2.48|
;;;405    
                          ENDP

                  |L2.56|
                          DCD      0x08010000

                          AREA ||i.FLASH_WriteFirmware||, CODE, READONLY, ALIGN=2

                  FLASH_WriteFirmware PROC
;;;330    
;;;331    static void FLASH_WriteFirmware(uint32_t fw_address, uint32_t fw_size)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;332    {
000004  f2ad4d04          SUB      sp,sp,#0x404
000008  460d              MOV      r5,r1
00000a  4682              MOV      r10,r0
;;;333        uint8_t buff[FLASH_BUFFER_SIZE];
;;;334        uint32_t bcnt, ram_source;
;;;335        uint32_t flash_destination = APPLICATION_ADDRESS;
00000c  f8df80bc          LDR      r8,|L3.204|
000010  e056              B        |L3.192|
;;;336        
;;;337        while(fw_size)
;;;338        {		
;;;339            if(fw_size >= FLASH_BUFFER_SIZE)
000012  bf00              NOP      
                  |L3.20|
000014  f44f6480          MOV      r4,#0x400
000018  42a5              CMP      r5,r4
00001a  d302              BCC      |L3.34|
00001c  f5a56580          SUB      r5,r5,#0x400
;;;340            {
;;;341                bcnt = FLASH_BUFFER_SIZE;
;;;342                fw_size -= FLASH_BUFFER_SIZE;
000020  e001              B        |L3.38|
                  |L3.34|
;;;343            }
;;;344            else
;;;345            {
;;;346                bcnt = fw_size;
000022  462c              MOV      r4,r5
;;;347                fw_size = 0U;
000024  2500              MOVS     r5,#0
                  |L3.38|
000026  2103              MOVS     r1,#3
000028  f88d1400          STRB     r1,[sp,#0x400]
00002c  ea4f411a          LSR      r1,r10,#16
000030  f88d1401          STRB     r1,[sp,#0x401]
000034  ea4f211a          LSR      r1,r10,#8
000038  f88d1402          STRB     r1,[sp,#0x402]
00003c  f8dfb090          LDR      r11,|L3.208|
000040  f44f5980          MOV      r9,#0x1000
;;;348            }
;;;349            
;;;350            SPI_FLASH_ReadPage(fw_address, buff,  bcnt);				
000044  466f              MOV      r7,sp
000046  b2a6              UXTH     r6,r4
000048  f88da403          STRB     r10,[sp,#0x403]
00004c  2200              MOVS     r2,#0
00004e  4649              MOV      r1,r9
000050  4658              MOV      r0,r11
000052  f7fffffe          BL       HAL_GPIO_WritePin
000056  f44f73fa          MOV      r3,#0x1f4
00005a  2204              MOVS     r2,#4
00005c  f50d6180          ADD      r1,sp,#0x400
000060  481c              LDR      r0,|L3.212|
000062  f7fffffe          BL       HAL_SPI_Transmit
000066  f44f73fa          MOV      r3,#0x1f4
00006a  4632              MOV      r2,r6
00006c  4639              MOV      r1,r7
00006e  4819              LDR      r0,|L3.212|
000070  f7fffffe          BL       HAL_SPI_Receive
000074  2201              MOVS     r2,#1
000076  4649              MOV      r1,r9
000078  4658              MOV      r0,r11
00007a  f7fffffe          BL       HAL_GPIO_WritePin
;;;351            ram_source = (uint32_t) buff;
;;;352            FLASH_Write(flash_destination, (uint32_t*) ram_source, (bcnt / 4U));
00007e  46c1              MOV      r9,r8
000080  46eb              MOV      r11,sp
000082  08a7              LSRS     r7,r4,#2
000084  f7fffffe          BL       HAL_FLASH_Unlock
000088  2600              MOVS     r6,#0
00008a  e010              B        |L3.174|
                  |L3.140|
00008c  f85b2026          LDR      r2,[r11,r6,LSL #2]
000090  2300              MOVS     r3,#0
000092  4649              MOV      r1,r9
000094  2002              MOVS     r0,#2
000096  f7fffffe          BL       HAL_FLASH_Program
00009a  b978              CBNZ     r0,|L3.188|
00009c  f85b1026          LDR      r1,[r11,r6,LSL #2]
0000a0  f8d90000          LDR      r0,[r9,#0]
0000a4  4288              CMP      r0,r1
0000a6  d109              BNE      |L3.188|
0000a8  f1090904          ADD      r9,r9,#4
0000ac  1c76              ADDS     r6,r6,#1
                  |L3.174|
0000ae  42be              CMP      r6,r7
0000b0  d202              BCS      |L3.184|
0000b2  4909              LDR      r1,|L3.216|
0000b4  4589              CMP      r9,r1
0000b6  d9e9              BLS      |L3.140|
                  |L3.184|
0000b8  f7fffffe          BL       HAL_FLASH_Lock
                  |L3.188|
;;;353            flash_destination += bcnt;
0000bc  44a0              ADD      r8,r8,r4
;;;354            fw_address += bcnt;
0000be  44a2              ADD      r10,r10,r4
                  |L3.192|
0000c0  2d00              CMP      r5,#0                 ;337
0000c2  d1a7              BNE      |L3.20|
;;;355        }
;;;356    }
0000c4  f20d4d04          ADD      sp,sp,#0x404
0000c8  e8bd8ff0          POP      {r4-r11,pc}
;;;357    
                          ENDP

                  |L3.204|
                          DCD      0x08003000
                  |L3.208|
                          DCD      0x40010c00
                  |L3.212|
                          DCD      ||.bss||+0x3c
                  |L3.216|
                          DCD      0x0800fffc

                          AREA ||i.HC595_Load||, CODE, READONLY, ALIGN=2

                  HC595_Load PROC
;;;299    
;;;300    static void HC595_Load(void)
000000  b570              PUSH     {r4-r6,lr}
;;;301    {
;;;302        HAL_SPI_Transmit(&hspi2, &dout, 1, 10);	
000002  230a              MOVS     r3,#0xa
000004  2201              MOVS     r2,#1
000006  4909              LDR      r1,|L4.44|
000008  4809              LDR      r0,|L4.48|
00000a  f7fffffe          BL       HAL_SPI_Transmit
;;;303        HAL_GPIO_WritePin(SHIFT_CLK_Port, SHIFT_CLK_Pin, GPIO_PIN_RESET);
00000e  4d09              LDR      r5,|L4.52|
000010  f44f5480          MOV      r4,#0x1000
000014  2200              MOVS     r2,#0
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       HAL_GPIO_WritePin
;;;304        HAL_GPIO_WritePin(SHIFT_CLK_Port, SHIFT_CLK_Pin, GPIO_PIN_SET);
00001e  4621              MOV      r1,r4
000020  4628              MOV      r0,r5
000022  e8bd4070          POP      {r4-r6,lr}
000026  2201              MOVS     r2,#1
000028  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;305    }
;;;306    
                          ENDP

                  |L4.44|
                          DCD      ||.data||
                  |L4.48|
                          DCD      ||.bss||+0x3c
                  |L4.52|
                          DCD      0x40010800

                          AREA ||i.HW_DeInit||, CODE, READONLY, ALIGN=2

                  HW_DeInit PROC
;;;320    
;;;321    static void HW_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;322    {
;;;323        HAL_GPIO_DeInit(GPIOA, DISPLAY_LED_PWM_Pin|DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOORLOCK_PWM_Pin|SOUND_PWM_Pin|RS485_DIR_Pin|SHIFT_CLK_Pin);
000002  f64111f1          MOV      r1,#0x19f1
000006  4809              LDR      r0,|L5.44|
000008  f7fffffe          BL       HAL_GPIO_DeInit
;;;324        HAL_GPIO_DeInit(GPIOB, DISPLAY_CS_Pin|FLASH_CS_Pin);
00000c  f44f51c0          MOV      r1,#0x1800
000010  4807              LDR      r0,|L5.48|
000012  f7fffffe          BL       HAL_GPIO_DeInit
;;;325        HAL_I2C_MspDeInit(&hi2c1);
000016  4807              LDR      r0,|L5.52|
000018  f7fffffe          BL       HAL_I2C_MspDeInit
;;;326        HAL_SPI_MspDeInit(&hspi2);
00001c  4805              LDR      r0,|L5.52|
00001e  303c              ADDS     r0,r0,#0x3c
000020  f7fffffe          BL       HAL_SPI_MspDeInit
;;;327        HAL_DeInit();
000024  e8bd4010          POP      {r4,lr}
000028  f7ffbffe          B.W      HAL_DeInit
;;;328    }    
;;;329    
                          ENDP

                  |L5.44|
                          DCD      0x40010800
                  |L5.48|
                          DCD      0x40010c00
                  |L5.52|
                          DCD      ||.bss||

                          AREA ||i.LED_RedBlink||, CODE, READONLY, ALIGN=2

                  LED_RedBlink PROC
;;;180    
;;;181    static void LED_RedBlink(uint8_t cnt)
000000  b570              PUSH     {r4-r6,lr}
;;;182    {
;;;183        uint32_t t = cnt * 2U;
;;;184        
;;;185        LED_RoomStatusRed_Off();
000002  4c0c              LDR      r4,|L6.52|
000004  0045              LSLS     r5,r0,#1              ;183
;;;186        
;;;187        do
;;;188        {
;;;189            LED_RoomStatusRed_Toggle();
;;;190            HC595_Load();
;;;191            Pause(500U);
000006  f44f76fa          MOV      r6,#0x1f4
00000a  7820              LDRB     r0,[r4,#0]            ;185  ; dout
00000c  f0200002          BIC      r0,r0,#2              ;185
000010  7020              STRB     r0,[r4,#0]            ;185
                  |L6.18|
000012  7820              LDRB     r0,[r4,#0]            ;189  ; dout
000014  0781              LSLS     r1,r0,#30             ;189
000016  d502              BPL      |L6.30|
000018  f0200002          BIC      r0,r0,#2              ;189
00001c  e001              B        |L6.34|
                  |L6.30|
00001e  f0400002          ORR      r0,r0,#2              ;189
                  |L6.34|
000022  7020              STRB     r0,[r4,#0]            ;189
000024  f7fffffe          BL       HC595_Load
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       Pause
00002e  1e6d              SUBS     r5,r5,#1
;;;192            --t;
;;;193        }
;;;194        while(t != 0U);
000030  d1ef              BNE      |L6.18|
;;;195    }    
000032  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP

                  |L6.52|
                          DCD      ||.data||

                          AREA ||i.MX_GPIO_Init||, CODE, READONLY, ALIGN=2

                  MX_GPIO_Init PROC
;;;233    
;;;234    static void MX_GPIO_Init(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;235    {
;;;236        GPIO_InitTypeDef GPIO_InitStruct;
;;;237    
;;;238        __GPIOA_CLK_ENABLE();
000004  481a              LDR      r0,|L7.112|
000006  b086              SUB      sp,sp,#0x18           ;235
000008  6981              LDR      r1,[r0,#0x18]
00000a  f0410104          ORR      r1,r1,#4
00000e  6181              STR      r1,[r0,#0x18]
000010  6981              LDR      r1,[r0,#0x18]
000012  f0010104          AND      r1,r1,#4
;;;239        __GPIOB_CLK_ENABLE();
000016  9104              STR      r1,[sp,#0x10]
000018  6981              LDR      r1,[r0,#0x18]
00001a  f0410108          ORR      r1,r1,#8
00001e  6181              STR      r1,[r0,#0x18]
000020  6980              LDR      r0,[r0,#0x18]
;;;240    	/**
;;;241    	*	preset gpio output pin
;;;242    	*/
;;;243        HAL_GPIO_WritePin(GPIOA, DISPLAY_LED_PWM_Pin|DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOORLOCK_PWM_Pin|
000022  4f14              LDR      r7,|L7.116|
000024  f0000008          AND      r0,r0,#8              ;239
000028  f64114f1          MOV      r4,#0x19f1
00002c  9004              STR      r0,[sp,#0x10]
00002e  2200              MOVS     r2,#0
000030  4621              MOV      r1,r4
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       HAL_GPIO_WritePin
;;;244                                 SOUND_PWM_Pin|RS485_DIR_Pin|SHIFT_CLK_Pin, GPIO_PIN_RESET);	
;;;245        HAL_GPIO_WritePin(GPIOB, DISPLAY_CS_Pin|FLASH_CS_Pin, GPIO_PIN_SET);
000038  f8df803c          LDR      r8,|L7.120|
00003c  f44f56c0          MOV      r6,#0x1800
000040  2201              MOVS     r2,#1
000042  4631              MOV      r1,r6
000044  4640              MOV      r0,r8
000046  f7fffffe          BL       HAL_GPIO_WritePin
;;;246    
;;;247        GPIO_InitStruct.Pin = 	DISPLAY_LED_PWM_Pin |
;;;248                                DOUT_0_Pin |
;;;249                                DOUT_1_Pin |
;;;250                                DOUT_2_Pin |
;;;251                                DOORLOCK_PWM_Pin |
;;;252                                SOUND_PWM_Pin |
;;;253                                RS485_DIR_Pin |
;;;254                                SHIFT_CLK_Pin;
;;;255        GPIO_InitStruct.Mode = 	GPIO_MODE_OUTPUT_PP;
00004a  9400              STR      r4,[sp,#0]
00004c  2401              MOVS     r4,#1
;;;256        GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
00004e  2502              MOVS     r5,#2
;;;257        HAL_GPIO_Init(GPIOA, 	&GPIO_InitStruct);
000050  4669              MOV      r1,sp
000052  4638              MOV      r0,r7
000054  9503              STR      r5,[sp,#0xc]
000056  9401              STR      r4,[sp,#4]
000058  f7fffffe          BL       HAL_GPIO_Init
;;;258    	
;;;259        GPIO_InitStruct.Pin = 	DISPLAY_CS_Pin |
;;;260                                FLASH_CS_Pin;
;;;261        GPIO_InitStruct.Mode = 	GPIO_MODE_OUTPUT_PP;
;;;262        GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
;;;263        HAL_GPIO_Init(GPIOB, 	&GPIO_InitStruct);
00005c  e9cd6400          STRD     r6,r4,[sp,#0]
000060  4669              MOV      r1,sp
000062  4640              MOV      r0,r8
000064  9503              STR      r5,[sp,#0xc]
000066  f7fffffe          BL       HAL_GPIO_Init
;;;264    }
00006a  b006              ADD      sp,sp,#0x18
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;265    
                          ENDP

                  |L7.112|
                          DCD      0x40021000
                  |L7.116|
                          DCD      0x40010800
                  |L7.120|
                          DCD      0x40010c00

                          AREA ||i.MX_SPI2_Init||, CODE, READONLY, ALIGN=2

                  MX_SPI2_Init PROC
;;;281    
;;;282    static void MX_SPI2_Init(void)
000000  480b              LDR      r0,|L8.48|
;;;283    {
;;;284        hspi2.Instance = SPI2;
000002  490a              LDR      r1,|L8.44|
;;;285        hspi2.Init.Mode = SPI_MODE_MASTER;
;;;286        hspi2.Init.Direction = SPI_DIRECTION_2LINES;
;;;287        hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
;;;288        hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
;;;289        hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
;;;290        hspi2.Init.NSS = SPI_NSS_SOFT;
000004  f44f7200          MOV      r2,#0x200
000008  6001              STR      r1,[r0,#0]            ;285  ; hspi2
00000a  f44f7182          MOV      r1,#0x104             ;285
00000e  6041              STR      r1,[r0,#4]            ;286  ; hspi2
000010  2100              MOVS     r1,#0                 ;286
000012  6081              STR      r1,[r0,#8]            ;287  ; hspi2
000014  60c1              STR      r1,[r0,#0xc]          ;288  ; hspi2
000016  6101              STR      r1,[r0,#0x10]  ; hspi2
000018  e9c01205          STRD     r1,r2,[r0,#0x14]
;;;291        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
;;;292        hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
00001c  61c1              STR      r1,[r0,#0x1c]  ; hspi2
;;;293        hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
00001e  6201              STR      r1,[r0,#0x20]  ; hspi2
;;;294        hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
000020  6241              STR      r1,[r0,#0x24]  ; hspi2
;;;295        hspi2.Init.CRCPolynomial = 10U;
000022  6281              STR      r1,[r0,#0x28]  ; hspi2
000024  210a              MOVS     r1,#0xa
;;;296        HAL_SPI_Init(&hspi2);
000026  62c1              STR      r1,[r0,#0x2c]  ; hspi2
000028  f7ffbffe          B.W      HAL_SPI_Init
;;;297    }
;;;298    
                          ENDP

                  |L8.44|
                          DCD      0x40003800
                  |L8.48|
                          DCD      ||.bss||+0x3c

                          AREA ||i.Pause||, CODE, READONLY, ALIGN=2

                  Pause PROC
;;;169    
;;;170    static void Pause(uint32_t delay)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
000002  4605              MOV      r5,r0
;;;172        uint32_t timer = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  ea4f0400          MOV.W    r4,r0
                  |L9.12|
;;;173        
;;;174        while((HAL_GetTick() - timer) < delay)
00000c  f7fffffe          BL       HAL_GetTick
000010  1b00              SUBS     r0,r0,r4
000012  42a8              CMP      r0,r5
000014  d3fa              BCC      |L9.12|
;;;175        {
;;;176           continue; 
;;;177        }
;;;178    }
000016  bd70              POP      {r4-r6,pc}
;;;179    
                          ENDP


                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=1

                  SystemClock_Config PROC
;;;197    
;;;198    static void SystemClock_Config(void)
000000  b570              PUSH     {r4-r6,lr}
;;;199    {
000002  b094              SUB      sp,sp,#0x50
;;;200    	RCC_OscInitTypeDef RCC_OscInitStruct;
;;;201        RCC_ClkInitTypeDef RCC_ClkInitStruct;
;;;202        RCC_PeriphCLKInitTypeDef PeriphClkInit;
;;;203    	
;;;204        RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI;
;;;205        RCC_OscInitStruct.HSEState = RCC_HSI_ON;
000004  2501              MOVS     r5,#1
000006  200a              MOVS     r0,#0xa               ;204
;;;206        RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
000008  e9cd0500          STRD     r0,r5,[sp,#0]
;;;207    	RCC_OscInitStruct.LSEState = RCC_LSI_ON;
;;;208        RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
00000c  2602              MOVS     r6,#2
00000e  2400              MOVS     r4,#0                 ;206
000010  9607              STR      r6,[sp,#0x1c]
000012  e9cd4502          STRD     r4,r5,[sp,#8]
;;;209        RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
;;;210        RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
000016  f44f1060          MOV      r0,#0x380000
00001a  e9cd4008          STRD     r4,r0,[sp,#0x20]
;;;211    	HAL_RCC_OscConfig(&RCC_OscInitStruct);
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       HAL_RCC_OscConfig
;;;212    
;;;213    	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
000024  200f              MOVS     r0,#0xf
000026  e9cd060a          STRD     r0,r6,[sp,#0x28]
;;;214    							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
;;;215    	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
;;;216    	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
;;;217    	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
00002a  02a8              LSLS     r0,r5,#10
00002c  e9cd400c          STRD     r4,r0,[sp,#0x30]
;;;218    	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
;;;219    	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
000030  2102              MOVS     r1,#2
000032  a80a              ADD      r0,sp,#0x28
000034  940e              STR      r4,[sp,#0x38]
000036  f7fffffe          BL       HAL_RCC_ClockConfig
;;;220    
;;;221    	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
;;;222    	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
00003a  0268              LSLS     r0,r5,#9
00003c  e9cd500f          STRD     r5,r0,[sp,#0x3c]
;;;223    	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
000040  a80f              ADD      r0,sp,#0x3c
000042  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
;;;224    
;;;225    	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
000046  f7fffffe          BL       HAL_RCC_GetHCLKFreq
00004a  f44f717a          MOV      r1,#0x3e8
00004e  fbb0f0f1          UDIV     r0,r0,r1
000052  f7fffffe          BL       HAL_SYSTICK_Config
;;;226    
;;;227    	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
000056  2004              MOVS     r0,#4
000058  f7fffffe          BL       HAL_SYSTICK_CLKSourceConfig
;;;228    
;;;229    	/* SysTick_IRQn interrupt configuration */
;;;230    	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
00005c  2200              MOVS     r2,#0
00005e  4611              MOV      r1,r2
000060  1e50              SUBS     r0,r2,#1
000062  f7fffffe          BL       HAL_NVIC_SetPriority
;;;231    }
000066  b014              ADD      sp,sp,#0x50
000068  bd70              POP      {r4-r6,pc}
;;;232    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;93     /* Program code   ------------------------------------------------------------*/
;;;94     int main(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;95     {
;;;96         uint8_t buf[8], status;
;;;97         uint32_t image_size;
;;;98         
;;;99         
;;;100        HAL_Init();
000002  f7fffffe          BL       HAL_Init
;;;101        SystemClock_Config();
000006  f7fffffe          BL       SystemClock_Config
;;;102        MX_GPIO_Init();
00000a  f7fffffe          BL       MX_GPIO_Init
00000e  f7fffffe          BL       HAL_FLASH_Unlock
000012  495b              LDR      r1,|L11.384|
000014  2034              MOVS     r0,#0x34
000016  60c8              STR      r0,[r1,#0xc]
000018  f7fffffe          BL       HAL_FLASH_Lock
00001c  485a              LDR      r0,|L11.392|
00001e  4959              LDR      r1,|L11.388|
000020  2400              MOVS     r4,#0
000022  6001              STR      r1,[r0,#0]  ; hi2c1
000024  4959              LDR      r1,|L11.396|
000026  e9c01401          STRD     r1,r4,[r0,#4]
00002a  f44f4180          MOV      r1,#0x4000
00002e  e9c04103          STRD     r4,r1,[r0,#0xc]
000032  6144              STR      r4,[r0,#0x14]  ; hi2c1
000034  6184              STR      r4,[r0,#0x18]  ; hi2c1
000036  61c4              STR      r4,[r0,#0x1c]  ; hi2c1
000038  6204              STR      r4,[r0,#0x20]  ; hi2c1
00003a  f7fffffe          BL       HAL_I2C_Init
;;;103        FLASH_Init();    
;;;104    	MX_I2C1_Init();
;;;105    	MX_SPI2_Init();
00003e  f7fffffe          BL       MX_SPI2_Init
;;;106        
;;;107    
;;;108    	/**
;;;109        *   jump around
;;;110        */	
;;;111        while (1)
;;;112    	{
;;;113    		LED_HandmaidGreen_On();
000042  4e53              LDR      r6,|L11.400|
;;;114            HC595_Load();
;;;115    		Pause(500U);
;;;116            
;;;117    		if(HAL_I2C_IsDeviceReady(&hi2c1, I2C_EE_WRITE, 1000U, 1000U) != HAL_OK)
;;;118    		{
;;;119    			LED_RedBlink(1);
;;;120    			HW_DeInit();
;;;121    			HAL_FLASH_OB_Launch();
;;;122    		}
;;;123            
;;;124    		buf[0] = EE_FW_UPDATE_STATUS >> 8U;
;;;125    		buf[1] = EE_FW_UPDATE_STATUS & 0xFFU;
;;;126    		HAL_I2C_Master_Transmit(&hi2c1, I2C_EE_WRITE, buf, 2U, I2C_EE_TIMEOUT);
;;;127    		HAL_I2C_Master_Receive(&hi2c1, I2C_EE_READ, &status, 1U, I2C_EE_TIMEOUT);
;;;128            
;;;129    		if (status == BOOTLOADER_CMD_RUN)
;;;130    		{
;;;131    			buf[0] = EE_FW_UPDATE_BYTE_CNT >> 8U;
;;;132    			buf[1] = EE_FW_UPDATE_BYTE_CNT & 0xFFU;
;;;133    			HAL_I2C_Master_Transmit(&hi2c1, I2C_EE_WRITE, buf, 2U, I2C_EE_TIMEOUT);
;;;134    			HAL_I2C_Master_Receive(&hi2c1, I2C_EE_READ, &buf[2], 4U, I2C_EE_TIMEOUT);
;;;135    			image_size = (buf[2] << 24) + (buf[3] << 16) + (buf[4] << 8) + buf[5];
;;;136                
;;;137                if((image_size > USER_FLASH_SIZE) || (image_size == 0U))
;;;138                {
;;;139                    LED_RedBlink(2);
;;;140                    HW_DeInit();
;;;141                    HAL_FLASH_OB_Launch();
;;;142                }
;;;143                
;;;144    			FLASH_Erase(APPLICATION_ADDRESS);
000044  4f53              LDR      r7,|L11.404|
000046  f44f787a          MOV      r8,#0x3e8             ;117
00004a  f04f0a25          MOV      r10,#0x25             ;125
00004e  f04f0964          MOV      r9,#0x64              ;126
000052  f44f4b50          MOV      r11,#0xd000           ;137
                  |L11.86|
000056  7830              LDRB     r0,[r6,#0]            ;113  ; dout
000058  f0400001          ORR      r0,r0,#1              ;113
00005c  7030              STRB     r0,[r6,#0]            ;113
00005e  f7fffffe          BL       HC595_Load
000062  f44f70fa          MOV      r0,#0x1f4             ;115
000066  f7fffffe          BL       Pause
00006a  4642              MOV      r2,r8                 ;117
00006c  4643              MOV      r3,r8                 ;117
00006e  21a0              MOVS     r1,#0xa0              ;117
000070  4845              LDR      r0,|L11.392|
000072  f7fffffe          BL       HAL_I2C_IsDeviceReady
000076  b130              CBZ      r0,|L11.134|
000078  2001              MOVS     r0,#1                 ;119
00007a  f7fffffe          BL       LED_RedBlink
00007e  f7fffffe          BL       HW_DeInit
000082  f7fffffe          BL       HAL_FLASH_OB_Launch
                  |L11.134|
000086  f88d4004          STRB     r4,[sp,#4]            ;124
00008a  f88da005          STRB     r10,[sp,#5]           ;125
00008e  464d              MOV      r5,r9                 ;126
000090  2302              MOVS     r3,#2                 ;126
000092  aa01              ADD      r2,sp,#4              ;126
000094  21a0              MOVS     r1,#0xa0              ;126
000096  483c              LDR      r0,|L11.392|
000098  f8cd9000          STR      r9,[sp,#0]            ;126
00009c  f7fffffe          BL       HAL_I2C_Master_Transmit
0000a0  2301              MOVS     r3,#1                 ;127
0000a2  aa03              ADD      r2,sp,#0xc            ;127
0000a4  21a1              MOVS     r1,#0xa1              ;127
0000a6  4838              LDR      r0,|L11.392|
0000a8  9500              STR      r5,[sp,#0]            ;127
0000aa  f7fffffe          BL       HAL_I2C_Master_Receive
0000ae  f89d000c          LDRB     r0,[sp,#0xc]          ;129
0000b2  2857              CMP      r0,#0x57              ;129
0000b4  d004              BEQ      |L11.192|
;;;145    			FLASH_WriteFirmware(EE_NEW_FIRMWARE_START_ADDRESS, image_size);
;;;146    			EEPROM_WriteUpdateStatus(BOOTLOADER_STATUS_UPDATE_SUCCESS);
;;;147    		}
;;;148    		else if(status == BOOTLOADER_STATUS_UPDATE_SUCCESS)
0000b6  284e              CMP      r0,#0x4e
0000b8  d038              BEQ      |L11.300|
;;;149    		{
;;;150                LED_RedBlink(3);
;;;151    			FLASH_Erase(APPLICATION_ADDRESS);
;;;152                FLASH_WriteFirmware(EE_OLD_FIRMWARE_START_ADDRESS, USER_FLASH_SIZE);
;;;153                EEPROM_WriteUpdateStatus(BOOTLOADER_STATUS_UPDATE_FAIL);
;;;154    		}
;;;155    		else if(status == BOOTLOADER_STATUS_UPDATE_FAIL)
0000ba  284f              CMP      r0,#0x4f
0000bc  d054              BEQ      |L11.360|
0000be  e043              B        |L11.328|
                  |L11.192|
0000c0  f88d4004          STRB     r4,[sp,#4]            ;131
0000c4  2021              MOVS     r0,#0x21              ;132
0000c6  f88d0005          STRB     r0,[sp,#5]            ;132
0000ca  2302              MOVS     r3,#2                 ;133
0000cc  aa01              ADD      r2,sp,#4              ;133
0000ce  21a0              MOVS     r1,#0xa0              ;133
0000d0  482d              LDR      r0,|L11.392|
0000d2  9500              STR      r5,[sp,#0]            ;133
0000d4  f7fffffe          BL       HAL_I2C_Master_Transmit
0000d8  2304              MOVS     r3,#4                 ;134
0000da  f10d0206          ADD      r2,sp,#6              ;134
0000de  21a1              MOVS     r1,#0xa1              ;134
0000e0  4829              LDR      r0,|L11.392|
0000e2  9500              STR      r5,[sp,#0]            ;134
0000e4  f7fffffe          BL       HAL_I2C_Master_Receive
0000e8  f89d0009          LDRB     r0,[sp,#9]            ;135
0000ec  f89d1006          LDRB     r1,[sp,#6]            ;135
0000f0  f89d2008          LDRB     r2,[sp,#8]            ;135
0000f4  eb006001          ADD      r0,r0,r1,LSL #24      ;135
0000f8  f89d1007          LDRB     r1,[sp,#7]            ;135
0000fc  0409              LSLS     r1,r1,#16             ;135
0000fe  eb012102          ADD      r1,r1,r2,LSL #8       ;135
000102  1845              ADDS     r5,r0,r1              ;135
000104  455d              CMP      r5,r11                ;137
000106  d800              BHI      |L11.266|
000108  b935              CBNZ     r5,|L11.280|
                  |L11.266|
00010a  2002              MOVS     r0,#2                 ;139
00010c  f7fffffe          BL       LED_RedBlink
000110  f7fffffe          BL       HW_DeInit
000114  f7fffffe          BL       HAL_FLASH_OB_Launch
                  |L11.280|
000118  4638              MOV      r0,r7                 ;144
00011a  f7fffffe          BL       FLASH_Erase
00011e  4629              MOV      r1,r5                 ;145
000120  f44f1064          MOV      r0,#0x390000          ;145
000124  f7fffffe          BL       FLASH_WriteFirmware
000128  204e              MOVS     r0,#0x4e              ;146
00012a  e00b              B        |L11.324|
                  |L11.300|
00012c  2003              MOVS     r0,#3                 ;150
00012e  f7fffffe          BL       LED_RedBlink
000132  4638              MOV      r0,r7                 ;151
000134  f7fffffe          BL       FLASH_Erase
000138  4659              MOV      r1,r11                ;152
00013a  f44f0096          MOV      r0,#0x4b0000          ;152
00013e  f7fffffe          BL       FLASH_WriteFirmware
000142  204f              MOVS     r0,#0x4f              ;153
                  |L11.324|
000144  f7fffffe          BL       EEPROM_WriteUpdateStatus
                  |L11.328|
000148  6838              LDR      r0,[r7,#0]            ;153
00014a  4913              LDR      r1,|L11.408|
00014c  4008              ANDS     r0,r0,r1              ;153
00014e  f1b05f00          CMP      r0,#0x20000000        ;153
000152  d180              BNE      |L11.86|
000154  f7fffffe          BL       HW_DeInit
000158  6878              LDR      r0,[r7,#4]            ;153
00015a  60b0              STR      r0,[r6,#8]            ;153  ; jump_address
00015c  6070              STR      r0,[r6,#4]            ;153  ; JumpToApplication
00015e  6839              LDR      r1,[r7,#0]            ;153
000160  f3818808          MSR      MSP,r1                ;153
000164  4780              BLX      r0                    ;153
000166  e776              B        |L11.86|
                  |L11.360|
;;;156    		{
;;;157    			EEPROM_WriteUpdateStatus(BOOTLOADER_CMD_RUN);
000168  2057              MOVS     r0,#0x57
00016a  f7fffffe          BL       EEPROM_WriteUpdateStatus
;;;158    			LED_HandmaidGreen_Off();
00016e  7830              LDRB     r0,[r6,#0]  ; dout
000170  f0200001          BIC      r0,r0,#1
000174  7030              STRB     r0,[r6,#0]
                  |L11.374|
;;;159    			
;;;160    			while(1)
;;;161    			{
;;;162                    LED_RedBlink(1);
000176  2001              MOVS     r0,#1
000178  f7fffffe          BL       LED_RedBlink
00017c  e7fb              B        |L11.374|
;;;163    			}			
;;;164    		}
;;;165    		
;;;166    		ApplicationExe();
;;;167        }  
;;;168    }
;;;169    
                          ENDP

00017e  0000              DCW      0x0000
                  |L11.384|
                          DCD      0x40022000
                  |L11.388|
                          DCD      0x40005400
                  |L11.392|
                          DCD      ||.bss||
                  |L11.396|
                          DCD      0x000186a0
                  |L11.400|
                          DCD      ||.data||
                  |L11.404|
                          DCD      0x08003000
                  |L11.408|
                          DCD      0x2ffe0000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hi2c1
                          %        60
                  hspi2
                          %        88

                          AREA ||.data||, DATA, ALIGN=2

                  dout
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  JumpToApplication
                          DCD      0x00000000
                  jump_address
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_dout____REV16|
#line 463 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___6_main_c_dout____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_dout____REVSH|
#line 478
|__asm___6_main_c_dout____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_dout____RRX|
#line 665
|__asm___6_main_c_dout____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
